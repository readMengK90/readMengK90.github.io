<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>软件危机/软件工程/软件生命周期/软件过程</title>
    <url>/2024/02/27/01%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">考试内容</th>
<th align="left">考试要求</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1. 软件和软件工程的含义、软件工程的基本原理</td>
<td align="left">1.理解软件和软件工程的含义、软件工程的基本原理。</td>
</tr>
<tr>
<td align="left">2. 软件危机的原因、表现和消除途径。</td>
<td align="left">2.理解产生软件危机的原因和消除软件危机的途径。</td>
</tr>
<tr>
<td align="left">3. 软件生命周期各个阶段的基本任务。</td>
<td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td>
</tr>
<tr>
<td align="left">4. 软件生命周期模型。</td>
<td align="left">4.了解各种软件生命周期模型的优缺点和适用场合：瀑布模型、增量模型、快速原型模型、螺旋模型。</td>
</tr>
</tbody></table>
<p><strong>软件定义</strong></p>
<p>程序、数据及相关文档的完整集合。其中，程序是能够完成预定功能和性能的可执行的指令序列；数据是使程序能够适当地处理信息的数据结构；文档是开发、使用和维护程序所需要的图文资料。</p>
<p><strong>软件工程定义</strong></p>
<p>1）把系统的、规范的、可度量的途经用于软件开发、运行和维护过程，也就是把工程应用于软件；</p>
<p>2）研究1）中提到的途径</p>
<p><strong>软件危机：</strong></p>
<p>​	定义：在计算机软件的<strong>开发</strong>和<strong>维护</strong>过程中所遇到的一系列严重问题。</p>
<p>​	范围： 1.如何维护数量不断膨胀的已有软件。</p>
<p>​		     2.如何开发软件，以满足对软件日益增长的需求。</p>
<p>​        典型表现：1.对软件成本和开发进度的估计不准确。</p>
<p>​			   2.用户对“已完成的”软件系统不满意的现象经常发生。</p>
<p>​			   3.软件产品质量往往靠不住</p>
<p>​			   4.软件常常是不可维护的</p>
<p>​			   5.软件通常没有适当的文档资料</p>
<p>​		           6.软件成本在计算机系统总成本中所占比例逐年上升。</p>
<p>​			   7.软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</p>
<p><strong>产生的原因</strong>：</p>
<table>
<thead>
<tr>
<th>与软件本身的特点有关(客观)</th>
<th>与软件本身的特点无关(主观)</th>
</tr>
</thead>
<tbody><tr>
<td>缺乏可见性，进展较难衡量，软件质量较难评价(用户与产品之间的矛盾)</td>
<td>软件开发与维护的方法不准确，即采用了错误的方法和技术。</td>
</tr>
<tr>
<td>不会用坏，难维护</td>
<td>忽视软件需求分析的重要性</td>
</tr>
<tr>
<td>复杂性随规模的增加呈指数上升</td>
<td>轻视软件维护</td>
</tr>
</tbody></table>
<p><strong>消除途径</strong>：</p>
<p>​		1.对计算机软件有一个正确的认识(软件是程序，数据，及相关文档的完整集合)</p>
<p>​		2.软件是一个工程项目(软件开发是一种组织良好，管理严密，各类人员协同配合，共同完成的工程项目)</p>
<p>​		3.推广使用成功的技术和方法，探索更有效地技术和方法。</p>
<p>​		4.开发和使用更好的软件工具 </p>
<p>**软件工程( Software Engineering)**：</p>
<p>定义：是指导计算机软件开发和维护的一门工程学科，采用工程的概念，原理，技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它。</p>
<p>方法学：通常把软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也称为范型。</p>
<p>软件工程方法学包含3要素：方法(回答“怎么做”的问题)</p>
<p>​						工具(软件工程支撑环境)</p>
<p>​						过程(任务框架)         </p>
<p><strong>软件生命周期</strong>：                                     </p>
<p>​	定义：一个软件从提出开发要求开始直到该软件报废为止得这个时期。</p>
<p>​	阶段：软件定义-问题定义，可行性研究，需求分析</p>
<p>​		   软件开发-总体设计，详细设计，实现</p>
<p>​		   软件维护-软件维护</p>
<p><strong>软件周期的各个时期及其阶段的基本作用</strong></p>
<p>软件生命周期分为3个时期：软件定义、软件开发、运行维护。</p>
<p>软件定义分为3个阶段：问题定义、可行性研究和需求分析。</p>
<p>软件开发分为4个阶段：总体设计，详细设计，编码和单元测试，综合测试。</p>
<p>其中，总体设计和详细设计又称为系统设计，编码和单元测试，综合测试又称为系统实现。</p>
<p><strong>软件过程：</strong></p>
<p>​	瀑布模型：必须等前一阶段得工作完成之后，才能开始后一阶段的工作</p>
<p>​			    优点：可强迫开发人员采用规范的方法；严格地规定了每个阶段必须提交的文档；要求每个阶段交出的所有产品都必须					经过质量保证小组的仔细验证。</p>
<p>​			    缺点：由于瀑布模型完全依赖于书面的规格说明，很可能导致最终开发出的软件产品不能真正满足用户的需求</p>
<p>​	快速原型模型：快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集</p>
<p>​			    软件设计人员快速建立一个能反映用户主要需求的原型系统，让用户试用后提出许多修改意见，开发人员按照用户的意			    见快速修改原型系统，用户再次使用，反复执行上述操作，直到用户任务符合他们的需求，开发人员据此书写规格说明文档。</p>
<p>​	增量模型：把软件产品作为一系列的增量构件来设计，每个构件由多个相互作用的模块构成，并且能够完成特定的功能。</p>
<p>​			 优点：能在较短时间内向用户提交可完成部分工作的产品；</p>
<p>​				    逐步增加产品功能可以使用户有较宽裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的				    冲击；</p>
<p>​	螺旋模型：使用原型及其他方法来尽量降低风险，可以理解为每个阶段之前都增加了风险分析过程的快速原型模型。</p>
<p>​			    优点：1.对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标，有助				       于把软件质量作为软件开发的一个重要目标；</p>
<p>​					2.减少了过多测试或测试不足所带来的风险；</p>
<p>​					3.维护和开发之间没有本质的区别；</p>
<p>​			    缺点：风险驱动型的特点会由于风险评估不准确给项目带来的风险。</p>
<p>​	喷泉模型：是一种以用户需求为动力，以对象为驱动的模型，主要用于描述面向对象的软件开发过程。</p>
<p>​			   体现了面向对象软件开发过程迭代和无缝的特性</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>考研复试</tag>
      </tags>
  </entry>
  <entry>
    <title>可行性研究</title>
    <url>/2024/03/02/02%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">考试内容</th>
<th align="left">考试要求</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1. 可行性研究的任务</td>
<td align="left">1.了解可行性研究的任务</td>
</tr>
<tr>
<td align="left">2. 数据流图和数据字典</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3.成本效益分析</td>
<td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td>
</tr>
<tr>
<td align="left">4. 需求分析的任务</td>
<td align="left">4.了解需求分析的任务</td>
</tr>
<tr>
<td align="left">5.实体联系图，状态转换图，层次方框图，IPO图</td>
<td align="left">掌握可行性研究和需求分析的建模方法：数据流图，数据字典，实体联系图，状态转换图，层次方框图，IPO图</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>考研复试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Mext设置主页文章添加边框阴影效果</title>
    <url>/2024/01/10/Hexo+Next%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%BB%E9%A1%B5%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="设置主页文章添加边框阴影效果"><a href="#设置主页文章添加边框阴影效果" class="headerlink" title="设置主页文章添加边框阴影效果"></a>设置主页文章添加边框阴影效果</h1><ol>
<li><p>打开主题文件夹下的post：</p>
<p>MyBlog\themes\next\source\css\ _common\components\post\post.styl文件</p>
</li>
<li><p>ctrl+F查找.use-motion{},修改后的内容如下方所示</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.use-motion</span> &#123;</span><br><span class="line"> if (hexo-config(&#x27;motion<span class="selector-class">.transition</span><span class="selector-class">.post_block</span>&#x27;)) &#123;</span><br><span class="line">    <span class="selector-class">.post-block</span>, <span class="selector-class">.pagination</span>, <span class="selector-class">.comments</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">      -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">      -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo+clean</span><br><span class="line"></span><br><span class="line">hexo+g</span><br><span class="line"></span><br><span class="line">hexo+d</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Next主题配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键的妙用</title>
    <url>/2024/01/22/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%A6%99%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Idea快捷键的妙用"><a href="#Idea快捷键的妙用" class="headerlink" title="Idea快捷键的妙用"></a>Idea快捷键的妙用</h1><p>Ctrl+alt+M:自动抽取方法 </p>
<p>​	编写程序时发现有重复代码，可以使用快捷键自动抽取方法，提高效率。</p>
<p>Ctrl+alt+L:代码格式化</p>
<p>​	编写完成一段代码后养成格式化的习惯。</p>
<p>Ctrl+alt+v:自动补全代码快捷键</p>
<p>CTRL+&#x2F;：单行注释</p>
<p>CTRL+ALT+&#x2F;:多行注释</p>
<p>选择变量+shift+F6:变量的批量修改</p>
<p>Ctrl + Alt + T： 对选中的代码弹出环绕选项弹出层(while,if….)</p>
<p>Alt+Insert:选择get和set方法</p>
<p>Ctrl+B:点击方法，跟进原码,选中要进入的方法，使用快捷键直接进入</p>
<p>Insert:书写代码是错误碰到insert键，会出现闪速黑色正方形块，影响书写。再次点击insert键可恢复</p>
<p>Ctrll+N:搜索类快捷键</p>
<p>alt+回车(enter):选中变量，alt+回车，左右进行切割</p>
<p>代码 上 &#x2F;下移 ：Shift+Alt +方向上键&#x2F;下键</p>
<p>alt+回车：点击方法，直接可以创建方法</p>
]]></content>
      <categories>
        <category>快捷方式</category>
      </categories>
      <tags>
        <tag>快捷方式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next主题下的阅读全文设置</title>
    <url>/2024/01/10/Hexo-%E6%98%BE%E7%A4%BA%E5%85%A8%E6%96%87%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Hexo-显示全文的设置"><a href="#Hexo-显示全文的设置" class="headerlink" title="Hexo-显示全文的设置"></a>Hexo-显示全文的设置</h1><h5 id="1-在文章中使用-more-手动进行截断"><a href="#1-在文章中使用-more-手动进行截断" class="headerlink" title="1.在文章中使用&lt; !--more--&gt; 手动进行截断"></a>1.在文章中使用<code>&lt; !--more--&gt;</code> 手动进行截断</h5><p><img src="https://github.com/readMengK90/readMengK90.github.io/blob/master/images/1-01.png?raw=true" alt="image-20240110132555493"></p>
<h5 id="2-添加描述信息的内容，会成为一种相关内容的提示信息"><a href="#2-添加描述信息的内容，会成为一种相关内容的提示信息" class="headerlink" title="2.添加描述信息的内容，会成为一种相关内容的提示信息"></a>2.添加描述信息的内容，会成为一种相关内容的提示信息</h5><p><img src="https://github.com/readMengK90/readMengK90.github.io/blob/master/images/1-02.png?raw=true" alt="image-20240110132853566"></p>
<h5 id="3-在主题配置文件中添加-，默认截取的长度为-150-字符，可以根据需要自行设定-直接复制到-config-文件的底部"><a href="#3-在主题配置文件中添加-，默认截取的长度为-150-字符，可以根据需要自行设定-直接复制到-config-文件的底部" class="headerlink" title="3.在主题配置文件中添加 ，默认截取的长度为 150 字符，可以根据需要自行设定,直接复制到  _config  文件的底部"></a>3.在<strong>主题配置文件</strong>中添加 ，默认截取的长度为 150 字符，可以根据需要自行设定,直接复制到  _config  文件的底部</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<h5 id="4-效果-展示"><a href="#4-效果-展示" class="headerlink" title="4.效果 展示"></a>4.效果 展示</h5><p><img src="https://github.com/readMengK90/readMengK90.github.io/blob/master/images/1-03.png?raw=true" alt="image-20240110133302658"></p>
]]></content>
      <categories>
        <category>Next主题配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux从入门到精通</title>
    <url>/2024/09/20/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/</url>
    <content><![CDATA[<p><strong>带着枷锁的舞者，枷锁一定是其成功的工具</strong></p>
<p>课程设计：</p>
<h3 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1.初识Linux"></a>1.初识Linux</h3><h4 id="1-1-操作系统概述"><a href="#1-1-操作系统概述" class="headerlink" title="1.1 操作系统概述"></a>1.1 操作系统概述</h4><p>​		计算机由硬件和软件组成，操作系统属于软件，主要作用就是协助用户<strong>调度</strong>硬件工作，充当用户和计算机硬件的桥梁，常见的操作系统有MacOS,Linux,Windows(PC端)，安卓，iponeOS,HarmonyOS(移动端).</p>
<h4 id="1-2-Linux内核"><a href="#1-2-Linux内核" class="headerlink" title="1.2 Linux内核"></a>1.2 Linux内核</h4><p>​		Linux是<strong>服务器操作系统</strong>领域的核心系统。</p>
<p>​		Linux系统&#x3D;Linux系统内核+系统级应用程序</p>
<p>​		内核提供系统最核心的功能：调度 CPU,内存,文件系统，网络通讯，IO等。</p>
<p>​		系统级应用程序：供用户快速上手操作系统的出厂自带程序。</p>
<p>​		<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/Linux%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F.png">		</p>
<p>​                Linux发行版:提供了内核+系统及应用程序的完成封装，市面上Centos,ubuntu是常使用的。</p>
<h4 id="1-3-了解虚拟机"><a href="#1-3-了解虚拟机" class="headerlink" title="1.3 了解虚拟机"></a>1.3 了解虚拟机</h4><p>​		如何获得可用的Linux操作系统环境–借助虚拟机。</p>
<p>​		虚拟机：通过虚拟化的软件得到虚拟化的硬件，然后给虚拟的硬件安装真实的操作系统(centos7),得到一台没有实体的完整电脑。</p>
<h4 id="1-4-如何构建虚拟机环境"><a href="#1-4-如何构建虚拟机环境" class="headerlink" title="1.4 如何构建虚拟机环境"></a>1.4 如何构建虚拟机环境</h4><p>​		通过<strong>虚拟化的软件</strong>(VMware)来提供虚拟硬件的能力，然后在硬件上安装操作系统。</p>
<p>​		VMware WorkStation安装和配置 </p>
<p>​			1.软件安装：无脑下一步</p>
<p>​			2.检测网络适配器</p>
<p>​			通用的更改适配器打开方式: win+R输入ncpa.cpl，查看VM1和VM8是否存在，如果不存在建议删除VM,重启后重新安装。			</p>
<h4 id="1-5-在VMware上安装Linux虚拟机-Windows-图形化"><a href="#1-5-在VMware上安装Linux虚拟机-Windows-图形化" class="headerlink" title="1.5 在VMware上安装Linux虚拟机(Windows)-图形化"></a>1.5 在VMware上安装Linux虚拟机(Windows)-图形化</h4><p>​		下载DVD-1810.iso</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://vault.centos.org/7.6.1810/isos/x86_64/</span><br></pre></td></tr></table></figure>

<p>​		打开VM,点击创建新的虚拟机-打开向导-典型-安装程序光盘映像文件浏览选择刚下载好的文件-配置账户名,用户名,密码-更改虚拟 		机的名称和位置(可选)-40GB-自定义硬件(可选)-<strong>勾选</strong>后点击完成。</p>
<p>​		漫长的等待………………………</p>
<p>​		输入用户名和密码，就可以体验Linux系统了</p>
<h4 id="1-6-远程连接Linux系统"><a href="#1-6-远程连接Linux系统" class="headerlink" title="1.6 远程连接Linux系统"></a>1.6 远程连接Linux系统</h4><p>​		Linux系统中多数情况下使用的命令行，因为Linux系统图形化界面不好用，不稳定。</p>
<p>​		使用第三方软件(finalShell)操作Linux的必要性：在VM中操作Linux命令行不太方便，内容的复制粘贴，文件的上传下载跨越VM都不太方便</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exe</span><br></pre></td></tr></table></figure>

<p>​		Linux桌面进入命令行：桌面右键点击：open in terminal</p>
<p>​		查询Linux系统的IP地址：当前登陆用户~下输入ifconfig,ens3里的inet就是IP地址</p>
<p>​		打开FinalShell–左上角文件夹–白色+号–ssh连接(Linux)–主机：linux的IP地址–双击连接管理器的链接–接受并保存–连接成功。</p>
<p>​		<strong>注意</strong>：Linux虚拟机如果重启，有可能IP地址发生改变，如果改变需要在FinalShell中修该连接的地址。</p>
<p>​		固定IP地址的方法：</p>
<h4 id="1-7-使用WSL获得Ubuntu系统环境-拓展"><a href="#1-7-使用WSL获得Ubuntu系统环境-拓展" class="headerlink" title="1.7 使用WSL获得Ubuntu系统环境(拓展)"></a>1.7 使用WSL获得Ubuntu系统环境(拓展)</h4><p>​		WSL是Window10系统的新特性，可以以非常轻量化的方式，得到Linux系统环境，这种环境是完全直连我们计算机硬件的，并不需要通过虚拟机去虚拟硬件，不会影响Window系统本身的运行。</p>
<p>​		WSL的部署：win键-右键-应用和功能-程序和功能-启用或关闭Windows功能-勾选适用于Linux的Windows子系统-立即重启自动。	</p>
<p>​		安装WSL的操作系统：搜索Miscrosoft Store-搜索ubuntu–下载第一个-获取安装-打开-设置用户名和密码。</p>
<p>​		安装Windows Terminal软件：Ubuntu自带的终端窗口不太好用，可以直接在应用商店下载Terminal，</p>
<h4 id="1-8-虚拟机快照的制作和还原-Windows"><a href="#1-8-虚拟机快照的制作和还原-Windows" class="headerlink" title="1.8 虚拟机快照的制作和还原(Windows)"></a>1.8 虚拟机快照的制作和还原(Windows)</h4><p>​		功能：为了避免由于系统损坏重装Linux操作系统的麻烦，可以通过快照功能将当前虚拟机的状态保存下来，在以后可以通过快照恢复虚拟机到保存的状态。</p>
<p>​		制作：(确保虚拟机关机)右键虚拟机-快照-快照管理器-拍摄快照</p>
<p>​		还原：测试快照-转到-是</p>
<h3 id="2-Linux基础命令"><a href="#2-Linux基础命令" class="headerlink" title="2.Linux基础命令"></a>2.Linux基础命令</h3><h4 id="2-1-Linux的目录结构"><a href="#2-1-Linux的目录结构" class="headerlink" title="2.1 Linux的目录结构"></a>2.1 Linux的目录结构</h4><p>​		Linux没有盘符这个概念，只有一个根目录**&#x2F;<strong>，所以文件都在它下面，在Linux系统中，路径直接的层级关系用 &#x2F; 表示(</strong>&#x2F;**usr&#x2F;local&#x2F;hello.txt)。</p>
<h4 id="2-2-Linux的命令"><a href="#2-2-Linux的命令" class="headerlink" title="2.2 Linux的命令"></a>2.2 Linux的命令</h4><p>​			命令的通用格式： command [options] [parameter]	</p>
<h5 id="2-2-1-ls-列出内容"><a href="#2-2-1-ls-列出内容" class="headerlink" title="2.2.1 ls 列出内容"></a>2.2.1 ls 列出内容</h5><p>​			<strong>ls : list简写，列出当前工作目录下&#x2F;home的内容(文件+文件夹)。</strong></p>
<pre><code>         ls /root:查看指定目录/root里面的内容。
</code></pre>
<p>​			 <strong>-options:</strong></p>
<pre><code>         ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all
</code></pre>
<p>​                         ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(<strong>简写ll</strong>)。</p>
<p>​                         ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p>
<h5 id="2-22-cd-切换目录"><a href="#2-22-cd-切换目录" class="headerlink" title="2.22 cd 切换目录"></a>2.22 cd 切换目录</h5><p>​		 	cd : change directory,切换目录**</p>
<pre><code>         cd .. ：返回上一级目录
 
         cd - :在临近的2个目录间切换
 
         cd . : 返回登陆者的当前目录
 
         cd / :切换到根目录
</code></pre>
<p>​			 cd或cd ~: 到达家目录</p>
<pre><code>         cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到/home/itcast,如果 是root用户登陆的就回到/root
</code></pre>
<h5 id="2-23-pwd"><a href="#2-23-pwd" class="headerlink" title="2.23  pwd"></a>2.23  pwd</h5><p>​			pwd(print work directory)显示当前所在的工作目录的<strong>绝对路径</strong>。</p>
<h5 id="2-24-相对-绝对路径"><a href="#2-24-相对-绝对路径" class="headerlink" title="2.24 相对&#x2F;绝对路径"></a>2.24 相对&#x2F;绝对路径</h5><p>​			 绝对路径：从根目录&#x2F;开始。</p>
<pre><code>         相对路径：从当前目录开始，不需要以/开头。
</code></pre>
<h5 id="2-25-mkdir"><a href="#2-25-mkdir" class="headerlink" title="2.25 mkdir"></a>2.25 mkdir</h5><p>​			<strong>mkdir: make directory,创建文件夹</strong></p>
<pre><code>            mkdir test1:没有层级的创建文件夹test1,当前目录下创建。
</code></pre>
<p>​                        mkdir [<strong>-p</strong> ]  aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p>
<h5 id="2-26-touch"><a href="#2-26-touch" class="headerlink" title="2.26 touch"></a>2.26 touch</h5><p>​			<strong>touch: 创建空文件</strong></p>
<pre><code>         touch a.txt #在当前目录创建a.txt文件
 
         touch /root/a.txt #在/root目录创建a.txt文件
</code></pre>
<h5 id="2-27-cat"><a href="#2-27-cat" class="headerlink" title="2.27 cat"></a>2.27 cat</h5><p>​			cat Linux路径</p>
<p>​			<strong>cat : 查看 整个文件内容</strong></p>
<p>​			cat a.txt :查看文件全部内容</p>
<h5 id="2-28-more"><a href="#2-28-more" class="headerlink" title="2.28 more"></a>2.28 more</h5><p>​			more Linux路径</p>
<p>​			<strong>more :查看文件部分内容</strong></p>
<pre><code>         enter：多查一行数据
 
         空 格 ： 查看新的一屏幕数据，翻页
</code></pre>
<p>​			 q：退出查看 </p>
<h5 id="2-29-cp-copy-复制粘贴"><a href="#2-29-cp-copy-复制粘贴" class="headerlink" title="2.29 cp  copy , 复制粘贴"></a>2.29 cp  <strong>copy , 复制粘贴</strong></h5><p>​			语法：cp [-r]  参数1 参数2</p>
<p>​			<strong>针对文件</strong></p>
<p>​			cp a.txt b.txt</p>
<pre><code>            a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。
</code></pre>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-1.png"></p>
<p>​			a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-2.png"></p>
<p>​			【无论有没有创建后一个空文件，都会把前一个文件的内容复制过去】</p>
<p>​			a.txt 内容存在 b.txt<strong>内容存在</strong>———将a的内容覆盖到b里。</p>
<p>​			(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p>
<p>​			<strong>针对文件夹</strong></p>
<p>​			【 当test2文件夹存在：将test1整个复制一份到test2目录中】</p>
<p>​			 cp test1 test2 -r</p>
<p>​			当test2文件夹和内容不存在：将test1下面的内容复制一份，写到test2目录下。			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-3.png"></p>
<p>​			test1内容存在 test2内容存在. —-将test1目录整体复制到test2目录中		<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-4.png"></p>
<p>​			<strong>针对文件文件夹</strong></p>
<p>​			cp a.txt test2 :复制a.txt并写入到 test2 目录中	<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-5.png"></p>
<h5 id="2-30-mv移动文件或者文件夹"><a href="#2-30-mv移动文件或者文件夹" class="headerlink" title="2.30 mv移动文件或者文件夹"></a>2.30 mv移动文件或者文件夹</h5><p>​			mv:文件,目录的移动和重命名</p>
<p>​			<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p>
<p>​		 	mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆			盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-001.png"></p>
<p>​		 	mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-002.png"></p>
<p>​			                     	当test2不存在：重命名</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-003.png"></p>
<p>​		 	mv a.txt  test1 :移动文件到指定目录test1下面</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-004.png"></p>
<h5 id="2-31-rm-用于文件和文件夹的删除"><a href="#2-31-rm-用于文件和文件夹的删除" class="headerlink" title="2.31 rm 用于文件和文件夹的删除"></a>2.31 rm 用于文件和文件夹的删除</h5><p>​			<strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></p>
<p>​		  rm a.txt : 删除文件会提示，输入以y开头都会被删除，其他都不会被删除。</p>
<p>​		 -r: 递归,先进入最里的一层，然后从里向外删除</p>
<p>​			rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p>
<p>​	         -f: force,强制</p>
<p>​			rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p>
<p>​			rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示</p>
<h5 id="2-32-which和find查找命令"><a href="#2-32-which和find查找命令" class="headerlink" title="2.32  which和find查找命令"></a>2.32  which和find查找命令</h5><p>​			which：通过which命令，查看所使用的一系列命令的程序文件放在那里(which  cd)。</p>
<p>​			find: </p>
<p>​			【按文件名查找文件语法】:<strong>find 起始路径  -name  “被查找文件名”</strong></p>
<p>​			可以搭配通配符*进行模糊搜索</p>
<p>​			【按文件大小查找文件语法】:<strong>find 起始路径 -size | -n[KMG]</strong></p>
<p>​			示例：查找小于10KB的文件：find &#x2F; -size -10k</p>
<p>​				   查找大于100MB的文件：find &#x2F; -size +100M</p>
<h5 id="2-33-grep-wc和管道"><a href="#2-33-grep-wc和管道" class="headerlink" title="2.33 grep ,wc和管道|"></a>2.33 grep ,wc和管道|</h5><p>​			grep关键字过滤:通过grep命令，从文件中<strong>通过关键字过滤文件行</strong>。</p>
<p>​			语法：grep [-n] 关键字 关键路径</p>
<p>​				-n,可选项，表示在结果中显示匹配的行的行号</p>
<p>​			 grep -ir hadoop &#x2F;root:不区分大小写。</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/gerp001.png"></p>
<p>​			wc:通过wc命令统计文件的行数，单词数量等</p>
<p>​			语法：wc [-c -m -l -w ]  <strong>文件路径</strong>(输入)</p>
<p>​			-c:统计bytes数量</p>
<p>​			-m:统计字符数量</p>
<p>​			-l:统计行数</p>
<p>​			-w:统计单词数量</p>
<p>​			管道符|：将管道符左边命令的结果，作为右边命令的输入</p>
<p>​				管道符可以嵌套。</p>
<h5 id="2-34-echo-tail和重定向符"><a href="#2-34-echo-tail和重定向符" class="headerlink" title="2.34 echo,tail和重定向符"></a>2.34 echo,tail和重定向符</h5><p>​			echo:在命令行输出指定内容，类似编程语言的print</p>
<p>​				语法：echo  “输出的内容”&#x2F;输出的内容</p>
<p>​				反引号’ ‘:被它包围的内容会被作为命令去执行而不是普通字符。</p>
<p>​			重定向符：</p>
<p>​				&gt;:将左侧命令的结果，<strong>覆盖</strong>写入到符号右侧指定的文件中</p>
<p>​				&gt;&gt;:将左侧命令的结果，<strong>追加</strong>写入符号右侧指定的文件中</p>
<p>​			tail:可以查看文件尾部内容，跟踪文件的最新更改**(从后向前看)**</p>
<p>​				语法：tail [-f -num] Linux路径</p>
<p>​				Linux路径，表示被跟踪的文件路径</p>
<p>​				-f:表示持续跟踪，程序一直运行(ctrl+c终止运行)</p>
<p>​				-num:表示，查看尾部多少行，不填写默认10行(-5)</p>
<h5 id="2-35-vi编辑器"><a href="#2-35-vi编辑器" class="headerlink" title="2.35 vi编辑器"></a>2.35 vi编辑器</h5><p>​			命令模式：vi  a.txt回车进入命令模式。</p>
<p>​			编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p>
<p>​			保持退出： 输入：进入末行模式，再输入wq保存退出。</p>
<p>​			<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/vi%E7%BC%96%E8%BE%91.png"></p>
<h3 id="3-Linux权限管控"><a href="#3-Linux权限管控" class="headerlink" title="3.Linux权限管控"></a>3.Linux权限管控</h3><h4 id="3-1-认知root用户"><a href="#3-1-认知root用户" class="headerlink" title="3.1 认知root用户"></a>3.1 认知root用户</h4><p>​		 在Linux系统中，root**(超级管理员)**拥有系统的最大操作权限，而普通用户在许多地方的权限是受限的。</p>
<p>​		普通用户的权限，一般在器HOME目录内是不受限的，一旦出了HOME目录，大多数地方，普通用户仅有只读和执行的 权限，无修改权限。</p>
<p>​		 切换用户的命令语法：su [-]  [用户名]    （su:switch User）</p>
<p>​		 - 符号是可选的，表示是否在切换用户后加载环境变量，建议带上</p>
<p>​		 用户名：表示要切换的用户，用户名也可以省略，省略表示切换到root。</p>
<p>​		 切换用户后，可以通过<strong>exit</strong>命令退回上一个用户，也可以使用快捷键：ctrl+d。</p>
<p>​		  不建议长期使用root用户，避免错误操作带来的系统损伤，可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p>
<p>​		    <strong>语法：sudo  其他命令</strong></p>
<p>​		     在其他命令之前，带上sudo,即可为这一条命令临时赋予root授权</p>
<p>​		     但是并不是所以的用户，抖音权力使用sudo，我们需要为<strong>普通用户配置sudo认证。</strong></p>
<p>​		     <strong>为普通用户配置sudo认证</strong></p>
<p>​		      切换到root用户，执行visudo命令，会自动通过vi编辑器打开：&#x2F;etc&#x2F;sudoers</p>
<p>​			在文件的最后添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">itheima   ALL=(ALL)         NOPASSWD: ALL</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">no pass word</span></span><br></pre></td></tr></table></figure>

<p>​			最后通过wq保存</p>
<p>​			切换回普通用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[itheima@localhost  ~]$ sudo  ls  /root</span><br><span class="line">anaconda-ks.cfg    original  -ks.cfg</span><br><span class="line">[itheima@localhost  ~]$ sudo  mkdir /test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行的命令均以root运行</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-用户-用户组"><a href="#3-2-用户-用户组" class="headerlink" title="3.2  用户 用户组"></a>3.2  用户 用户组</h4><p>​			Linux系统中可以配置多个用户，也可以配置多个 用户组，并且用户可以加入多个用户组中。</p>
<p>​			<strong>用户组管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户组</span></span></span><br><span class="line">groupadd 用户组名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户组</span></span></span><br><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure>

<p>​			<strong>用户管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户</span></span></span><br><span class="line">useradd [-g -d] 用户名</span><br><span class="line">	-g:指定用户的组,不指定-g会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</span><br><span class="line">	-d:指定用户HOME路径，不指定，HOME目录默认在：/home/用户名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户</span></span></span><br><span class="line">userdel [-r] 用户名</span><br><span class="line">	-r:删除用户的HOME目录，不使用-r,删除用户时，HOME目录保留</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#查看用户所属组</span></span></span><br><span class="line">id [用户名]</span><br><span class="line">	用户名：被查看的用户，如果不提供则查看自身</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#修改用户所属组</span></span></span><br><span class="line">usermod -aG 用户组 用户名,将指定用户加入指定用户组</span><br></pre></td></tr></table></figure>

<p>​			getent: 查看当前系统中有哪些用户(语法：getent passwd)</p>
<p>​				     查看当前系统中有那些用户组(语法：getent group)</p>
<h4 id="3-3-查看权限管控信息"><a href="#3-3-查看权限管控信息" class="headerlink" title="3.3 查看权限管控信息"></a>3.3 查看权限管控信息</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/user03.png"></p>
<table>
<thead>
<tr>
<th align="center">r w x</th>
<th align="center">针对文件</th>
<th align="center">针对文件夹</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r</td>
<td align="center">可以查看文件内容</td>
<td align="center">可以查看文件夹内容，如ls命令</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">可以修改此文件</td>
<td align="center">可以在文件夹内创建删除改名等操作</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">可以将文件作为程序执行</td>
<td align="center">可以更改工作目录到此文件夹，即cd进入</td>
</tr>
</tbody></table>
<h4 id="3-4-修改权限控制chmod"><a href="#3-4-修改权限控制chmod" class="headerlink" title="3.4 修改权限控制chmod"></a>3.4 修改权限控制chmod</h4><p>​			使用chmod命令，修改文件，文件夹的权限信息。</p>
<p>​			注意，只有文件，文件夹的所属用户或者root用户可以修改</p>
<p>​			语法：chmod [-R]  权限  文件或文件夹</p>
<p>​				    -R:对文件夹内的全部内容应用统一的操作</p>
<p>​			示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x hello.txt #将文件权限修改为：rwx r-x --x</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中：u表示user所属用户权限,g表示group组权限,o表示other其他权限</span></span><br><span class="line">chmod -R u=rwx,g=rx,o=x test #将文件夹test以及文件夹内前部内容权限设置		为：rwxr-x--x</span><br></pre></td></tr></table></figure>

<p>​			权限的数字符号：数字的细节如下：r记为5，w记为2，x记为1</p>
<p>​			0：无任何权限，即—</p>
<p>​			1：仅有x权限，即–x</p>
<p>​			2:   仅有w权限，即-w-</p>
<p>​			3:   有w和x权限，即-wx</p>
<p>​			4:   仅有r权限， 即r–</p>
<p>​			5:   仅有r和x权限，即r-x</p>
<p>​			6:   仅有r和w权限，即rw-</p>
<p>​			7:   有全部权限，即rwx</p>
<h4 id="3-5-修改权限控制chown"><a href="#3-5-修改权限控制chown" class="headerlink" title="3.5 修改权限控制chown"></a>3.5 修改权限控制chown</h4><p>​				3.51 掌握使用chown修改<em>所属用户，用户组</em></p>
<p>​				普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行。</p>
<p>​				语法：chown [-R] [用户] [ : ] [用户组] 文件或文件夹。</p>
<p>​				-R：同chmod,对文件夹内部内容应用相同规则</p>
<p>​				用户：修改所属用户</p>
<p>​				选项：用户组，修改所属用户组</p>
<p>​				：用于分隔用户和用户组</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown root hello.txt,将hello.txt所属用户修改为root</span><br><span class="line">chown :root hello.txt,将hello.txt所属用户组修改为root</span><br><span class="line">chown root:itheima hello.txt,将hello.txt所属用户修改为root，用户组修改为itheima</span><br><span class="line">chown -R root test,将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</span><br></pre></td></tr></table></figure>

<h3 id="4-Linux实用操作"><a href="#4-Linux实用操作" class="headerlink" title="4.Linux实用操作"></a>4.Linux实用操作</h3><h4 id="4-1-Linux实用小技巧"><a href="#4-1-Linux实用小技巧" class="headerlink" title="4.1 Linux实用小技巧"></a>4.1 Linux实用小技巧</h4><p>​				ctrl+c:强制停止</p>
<p>​				ctrl+d:退出账户的登陆或者退出某些特定程序的专属页面。</p>
<p>​				history：历史命令搜索</p>
<p>​				ctrl+a,命令跳到开头</p>
<p>​				ctrl+e,命令跳到结尾</p>
<p>​				ctrl+键盘左键，向左跳一个单词</p>
<p>​				ctrl+键盘右键，向右跳一个单词</p>
<p>​				ctrl+l:可以清空终端内容，或者clear命令得到同样得效果</p>
<h4 id="4-2-软件安装"><a href="#4-2-软件安装" class="headerlink" title="4.2 软件安装"></a>4.2 软件安装</h4><p>​				      1.掌握使用yum为Centos系统安装软件</p>
<p>​					  yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法 yum [-y]  [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-y,自动确认，无需手动确认安装或卸载过程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install:安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove:卸载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">search:搜索</span></span><br><span class="line">yum命令需要联网和root权限</span><br></pre></td></tr></table></figure>

<p>​				   	安装wget程序(从网络上下载程序)			   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">yum -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">yum -y search wget</span><br></pre></td></tr></table></figure>

<p>​				    2.掌握使用apt为Ubuntu安装软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：apt [-y] [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">apt -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">apt -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">apt -y search wget</span><br></pre></td></tr></table></figure>

<h4 id="4-3-systemctl命令"><a href="#4-3-systemctl命令" class="headerlink" title="4.3 systemctl命令"></a>4.3 systemctl命令</h4><p>Linux系统很多软件均支持使用systemctl命令控制，能够被systemctl管理的软件，一般也称为：服务</p>
<p>系统内置的服务有：</p>
<p>​	NetworkManager,主网络服务</p>
<p>​	network:副网络服务</p>
<p>​	firewalld:防火墙服务</p>
<p>​	sshd,ssh服务(FinalShell远程登陆Linux使用的就算这个服务)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：systemctl start | stop | status | enable | disable 服务名</span><br></pre></td></tr></table></figure>

<p>部分第三方软件安装后也可以用systemctl进行控制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ntp,安装ntp软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过ntpd服务器，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y heepd,安装apache服务器软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过httpd服务器名，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-软连接"><a href="#4-4-软连接" class="headerlink" title="4.4 软连接"></a>4.4 软连接</h4><p>​	使用ln命令创建软链接，类似Windows系统中的快捷方式们可以将文件，文件夹链接到其它位置</p>
<p>​	语法： ln -s 参数1 参数2     （-s选项 ，创建软连接；参数1，被链接的文件或文件夹；参数2，要链接的目的地）</p>
<p>​	实例：ln -s &#x2F;etc&#x2F;yum.conf ~&#x2F;yum.conf</p>
<p>​		    ln -s &#x2F;etc&#x2F;yum ~&#x2F;yum</p>
<h4 id="4-5-日期和时区"><a href="#4-5-日期和时区" class="headerlink" title="4.5 日期和时区"></a>4.5 日期和时区</h4><p>​	date命令：可以在命令行中查看系统时间</p>
<p>​		语法：date [-d] [+格式化字符串]</p>
<p>​		-d按照给定的字符串显示日期，一般用于日期计算</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 10:16:00 CST	</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不符合中国人阅读日期的习惯</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# date +%Y-%m-%d</span><br><span class="line">2024-09-22</span><br><span class="line">[root@node1 ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2024-09-22 10:22:25</span><br></pre></td></tr></table></figure>

<p>​	date命令进行日期加减</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# date -d &quot;+1 day&quot; +%Y-%m-%d</span><br><span class="line">2024-09-23  #显示加一天(+,-,day,month,year)</span><br></pre></td></tr></table></figure>

<p>​	修改Linux时区：</p>
<p>​		修改时区需要使用root权限，修改时区为东八区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /etc/localtime</span><br><span class="line">sudo ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# rm -rf /etc/localtime</span><br><span class="line">[root@node1 ~]# ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 11:23:43 CST</span><br></pre></td></tr></table></figure>

<p>​		ntp程序：自动校准系统时间</p>
<p>​			安装ntp:<strong>yum -y install ntp</strong></p>
<p>​			启动并设置开机自启：</p>
<p>​				systemctl start ntpd</p>
<p>​				systemctl enable ntpd</p>
<p>​			当ntpd启动后会定期的帮助我们联网校准系统时间</p>
<p>​			也可以手动校准(需要root权限):ntpdate -u ntp.aliyun.com</p>
<p>​			通过阿里云提供的服务网址配合ntpdate(安装ntp后会附带这个命令)命令自动校准</p>
<h4 id="4-6-IP地址-主机名"><a href="#4-6-IP地址-主机名" class="headerlink" title="4.6 IP地址&amp;主机名"></a>4.6 IP地址&amp;主机名</h4><p>​	IP地址：每台联网的电脑都会有一个地址，可以通过ifconfig,查看本机的。</p>
<p>​	主机名：每一台电脑除了对外联络地址(IP地址)以外，还可以有自己的主机名</p>
<p>​			hostnamectl set-hostname  新的主机名：修改主机名</p>
<p>​	<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BB%E6%9C%BA%E5%90%8D.png"></p>
<p>​	域名解析：</p>
<p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png"></p>
<p>​	配置主机名和ip的映射关系：</p>
<p>​		以管理员身份打开记事本，打开找到hosts,编写保持映射关系。</p>
<p>​	虚拟机配置固定IP</p>
<p>​		为什么需要固定IP ?</p>
<p>​			以前使用的Linux操作系统通过DHCP服务获取的IP地址会频繁变更，不利于远程操作和私人本地的虚拟机IP地址和主机名映射。</p>
<p>​			1.在VMware Workstation中配置IP地址网关和网段(IP地址的范围)</p>
<p>​			2.在Linux系统中手动修改配置文件，固定IP</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1n84y1i7td?p=35&amp;spm_id_from=pageDriver&amp;vd_source=d8733037a2c6216f5b8db97d9c49da5f</span><br></pre></td></tr></table></figure>

<h4 id="4-7-网络传输"><a href="#4-7-网络传输" class="headerlink" title="4.7 网络传输"></a>4.7 网络传输</h4><p>4.7.1 下载和网络请求</p>
<p>使用<strong>ping命令</strong>，检查指定的网络服务器是否是可联通的</p>
<p>语法：ping [-c num] ip或主机名</p>
<p><strong>wget命令</strong>：非交互式的文件下载器，可以在命令行内下载网络文件</p>
<p>语法：wget [-b] url</p>
<p>-b:可选，后台下载，会将日志写入到当前工作目录的wget-log文件</p>
<p>curl命令：类似于浏览器打开网页（发起网络请求&amp;下载文件[-O]）</p>
<p>4.7.2 端口</p>
<p>物理端口：</p>
<p>虚拟端口：计算机内程序间的相互查找就需要端口来解决，IP地址只能锁定计算机。</p>
<p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%AB%AF%E5%8F%A3.png"></p>
<p><strong>查看端口占用情况</strong></p>
<p>语法 ：nmap 被查看的IP地址端口的占用情况,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# yum install nmap #安装nmap</span><br><span class="line">[root@node1 ~]# nmap 127.0.0.1  </span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2024-09-22 20:04 CST</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.0000030s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">25/tcp  open  smtp</span><br><span class="line">111/tcp open  rpcbind</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>netstat命令：查看指定端口的占用情况</p>
<p>语法：netstat  -anp <strong>|</strong> grep 端口号，安装netstat:  yum -y install net-tools</p>
<h4 id="4-8-进程管理"><a href="#4-8-进程管理" class="headerlink" title="4.8 进程管理"></a>4.8 进程管理</h4><p>​	操作系统中运行的程序会被一个独立的进程ID标记，就算进程。</p>
<p>​	<strong>查看进程</strong>：ps [-e -f]</p>
<p>​	-e:显示出全部的进程</p>
<p>​	-f：以完全格式化的形式展示信息</p>
<p>​	一般来说ps -ef 列出全部进程的去全部信息，可以配合管道符，gerp过滤一下。</p>
<p>​	<strong>关闭进程</strong>：kill [-9] 进程ID,-9表示强制关闭，不使用-9只是发送关闭信号，不保证关闭。</p>
<h4 id="4-9-主机状态"><a href="#4-9-主机状态" class="headerlink" title="4.9 主机状态"></a>4.9 主机状态</h4><p>​	查看系统资源占用：</p>
<p>​		可以通过top命令查看CPU，内存使用情况，类时Windows的任务管理器。</p>
<p>​		语法：直接输入top即可，按ctrl+c&#x2F;q退出。</p>
<p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top.png"></p>
<p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top02.png"></p>
<p>磁盘监控：使用df命令，可以查看硬盘的使用情况</p>
<p>​		语法：df [-h]  -h,以更加人性的单位显示</p>
<p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4.png"></p>
<p>​		使用iostat查看CPU，磁盘的相关信息；语法：iostat [-x] [num1] [num2]   ,-x可以显示更多信息，num1秒刷新一次刷新num2次。</p>
<p>网络监控：sar命令查看网络的相关统计</p>
<p>​		语法： sar -n DEV num1 num2    ,-n代表查看网络，DEV表示查看网络接口，num同上。</p>
<h4 id="4-10-环境变量"><a href="#4-10-环境变量" class="headerlink" title="4.10 环境变量"></a>4.10 环境变量</h4><p>​		<strong>环境变量PATH:</strong></p>
<p>​		在Linux系统中执行env命令即可查到环境变量。</p>
<p>​		无论在哪一个目录都能准确的执行&#x2F;usr&#x2F;bin&#x2F;cd这个程序，就是因为PATH记录了系统执行任何命令的搜索路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# env | grep PATH</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>

<p>​		<strong>$符号：</strong>被用于取”变量”的值</p>
<p>​		环境变量记录中的信息，除了给操作系统自己使用外，如果我们想要取用，可以通过$符号来取，具体语法：$环境变量名</p>
<p>通过echo语句输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>

<p>当和其他内容混合在一起，通过{}来标注取得变量是谁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>

<p>​		<strong>自行设置环境变量：</strong></p>
<p>​		临时设置：语法：export 变量名&#x3D;变量值</p>
<p>​		永久生效：针对当前用户生效，配置在当前用户得：~&#x2F;.bashrc文件中</p>
<p>​				    针对所有用户生效，配置在系统得：&#x2F;etc&#x2F;profile文件中</p>
<p>​				    并通过语法：source <strong>配置文件</strong>，进行立刻生效，或重新登陆FinalShell生效。</p>
<p>​		<strong>自定义环境变量PATH：</strong></p>
<p>​		环境变量PATH这个项目里面记录了系统执行命令得搜索路径，这些搜索路径我们可以自行添加到PATH中去</p>
<p>​		测试：在当前HOME目录内创建文件夹，myenv,在文件夹内创建文件mkhaha</p>
<p>​			    通过vim编辑器，在mkhaha文件内填入：echo hahaha</p>
<p>​		完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行</p>
<p>​			    文件想要执行需要程序执行权限X: chmod 755</p>
<p>​			     执行文件： .&#x2F;mkhahaha</p>
<p>​			修改PATH的值</p>
<p>​			临时修改PATH:export PATH &#x3D; <strong>$PATH</strong>:&#x2F;home&#x2F;itheima&#x2F;myenv,再次执行mkhaha,无论到哪里都能执行。</p>
<p>​			或将export PATH&#x3D;<strong>$PATH</strong> :&#x2F;home&#x2F;itheima&#x2F;mkenv填入用户环境变量文件或系统环境变量文件中去。</p>
<h4 id="4-11-Linux文件的上传和下载"><a href="#4-11-Linux文件的上传和下载" class="headerlink" title="4.11 Linux文件的上传和下载"></a>4.11 Linux文件的上传和下载</h4><p>​			1.掌握通过FinalShell在Linux系统中进行上传和下载</p>
<p>​			2.掌握rz,sz命令</p>
<p>​			除了通过FinalShell的下方窗体进行文件的传输以外，还可以通过rz,sz命令进行文件传输。</p>
<p>​			rz,sz命令需要安装，可以通过：yum -y install lrzsz,即可安装。</p>
<p>​			rz命令，进行上传，语法：直接输入rz即可，弹出框</p>
<p>​			sz命令，进行下载，语法：sz   要下载的文件</p>
<p>​			文件会自动下载到桌面的fsdownload文件夹中。</p>
<h4 id="4-12-压缩和解压"><a href="#4-12-压缩和解压" class="headerlink" title="4.12 压缩和解压"></a>4.12 压缩和解压</h4><p>​			1.掌握使用tar命令压缩或解压tar或gzip文件</p>
<p>​			.tar：简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装。</p>
<p>​			.gz:也常见为.tar.gz,.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积。</p>
<p>​			针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p>
<p>​			语法:tar [-c  -v  -x  -f  -z  -C]  参数1  参数2  ….参数N</p>
<p>​			-c，创建压缩文件，用于压缩模式</p>
<p>​			-v，显示压缩，解压过程，用于查看进度</p>
<p>​			-x，解压模式</p>
<p>​			-f，要创建的文件，或要解压的文件，-f选项必须在所以选项中位置处于最后一个</p>
<p>​			-z，gzip模式，不使用-z就算普通的tarball格式(建议放开头)</p>
<p>​			-C，选择解压的目的地，用于解压模式 (单独使用，和解压所需的其他参数分开)</p>
<p>​			常见压缩组合：</p>
<p>​			tar  -cvf  test.tar  1.txt  2.txt 3.txt:将1.txt  2.txt 3.txt压缩到test.tar文件内</p>
<p>​			tar -zcvf  test.tar.gz    1.txt  2.txt 3.txt:将  1.txt  2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式。</p>
<p>​			常见解压组合：</p>
<p>​			tar -xvf  test.tar  ：解压test.tar,将文件压缩至当前目录</p>
<p>​			tar -xvf test.tar -C &#x2F;home&#x2F;itheima :解压test.tar,将文件压缩至指定目录</p>
<p>​			tar -zxvf test.tar.gz -C &#x2F;home&#x2F;itheima：以GZip模式解压test.tar.gz,将文件解压至指定目录</p>
<p>​			2.掌握使用zip，unzip，命令压缩或解压zip文件</p>
<p>​			可以使用zip命令，压缩文件为zip压缩包</p>
<p>​			语法：zip [-r] 参数1，参数2……参数N</p>
<p>​			-r,被压缩的包含文件夹的时候需要使用到-r</p>
<p>​			示例：</p>
<p>​			zip test.zip a.txt b.txt c.txt:将a.txt b.txt c.txt压缩到test.zip文件内</p>
<p>​			zip -r test.zip test itheima a.txt:将test，itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p>
<p>​			可以使用unzip命令，可以方便的解压zip压缩包</p>
<p>​			语法：unzip [-d] 参数</p>
<p>​			-d,指定要解压去的位置，同tar的-C选项</p>
<p>​			参数，被解压的zip压缩包文件</p>
<p>​			示例：</p>
<p>​			unzip  test.zip,将test.zip解压到当前目录。</p>
<p>​			unzip test.zip -d &#x2F;home&#x2F;itheima,将test.zip解压到指定文件夹内。</p>
<h3 id="5-实战软件部署"><a href="#5-实战软件部署" class="headerlink" title="5.实战软件部署"></a>5.实战软件部署</h3><h4 id="5-1-MySQL数据库管理系统安装部署"><a href="#5-1-MySQL数据库管理系统安装部署" class="headerlink" title="5.1 MySQL数据库管理系统安装部署"></a>5.1 MySQL数据库管理系统安装部署</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL5.7版本在Centos系统安装</span><br><span class="line"></span><br><span class="line">1.配置yum仓库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line">2.yum安装Mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">3.安装完成后，启动MySql并配置开机自启动</span><br><span class="line">systemctl start mysqld  #启动</span><br><span class="line">systemctl enable mysqld #开机自启动</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="comment">#MySql安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</span></span></span><br><span class="line">4.主要配置管理员用户root的密码以及配置允许远程登陆的权限</span><br><span class="line">	获取MySQL的初始密码：cat /var/log/mysqld.log | grep &quot;temporary password&quot;</span><br><span class="line">	登陆MySQL数据库系统：mysql -uroot -p</span><br><span class="line">	修改root用户密码:(在mysql控制台内执行)ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;密码&#x27; --密码需要大于8位，有大写字母，特殊字符，不能是连续的简单语句。</span><br><span class="line">	配置root的简单密码：</span><br><span class="line">	set global validate_password_policy=LOW;#密码安全级别低</span><br><span class="line">	set global validate_password_length=6;#密码长度最低6位即可</span><br><span class="line">	ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;简单密码&#x27;;#非正式使用，仅限学习时</span><br><span class="line">	配置root的远程登陆[拓展]:</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">授权root远程登陆</span></span><br><span class="line">	grant all privileges on *.* to root@&quot;IP地址&quot; identified by &#x27;密码&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">IP地址即允许登陆的IP地址，也可以填写%，表示允许任何地址</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">密码表示给远程登陆独立设置密码，和本地登陆的密码可以不同</span></span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">刷新权限，生效</span></span><br><span class="line">	flush privileges;</span><br><span class="line">5.退出MySql控制台页面</span><br><span class="line">	exit</span><br><span class="line">6.检查端口</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">MySQL默认绑定了3306端口，可以通过端口占用检查Mysql的网络状态</span></span><br><span class="line">	netstat -anp | grep 3306	</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL8.0版本在Centos系统安装</span><br><span class="line">1.配置yum仓库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql80-community-release-el7-2.noarch.rpm</span><br><span class="line">2.yum安装Mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">3.安装完成后，启动MySql并配置开机自启动</span><br><span class="line">systemctl start mysqld  #启动</span><br><span class="line">systemctl enable mysqld #开机自启动</span><br><span class="line">systemctl status mysqld #查看允许状态</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="comment">#MySql安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</span></span></span><br><span class="line">允许root远程登陆，并设置远程登陆密码</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一次设置root远程登陆，并设置远程登陆密码</span></span><br><span class="line">create user &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后续修改密码使用如下SQL命令</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​			</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL5.7版本在Ubuntu(WSL环境)系统安装</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line">1.通过 sudo su -,切换到root用户；或者再每一个命令前，加上sudo，用来零时提升权限</span><br><span class="line">安装--下载apt</span><br><span class="line">1.下载apt仓库文件,wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br><span class="line">2.配置apt仓库 dpkg -i mysql-apt-config_0.8.12-1_all.deb 弹出框中选择:ubuntu  bianic</span><br><span class="line">3.更新apt仓库的信息</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash">更新仓库信息</span></span><br><span class="line">	apt update</span><br></pre></td></tr></table></figure>



<p>​			</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL8.0版本在Ubuntu(WSL环境)系统安装（不全）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line">1.通过 sudo su -,切换到root用户；或者再每一个命令前，加上sudo，用来零时提升权限</span><br><span class="line">安装</span><br><span class="line">1.如果已经安装过MySql5.7版本，需要卸载仓库信息</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br><span class="line">2.更新apt仓库信息</span><br><span class="line">apt update</span><br><span class="line">3.安装mysql</span><br><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure>

<p>​	Tomcat安装部署</p>
<p>​		Tomcat是一个WEB应用程序的托管平台，可以让用户编写WEB应用程序，被Tomcat所托管，并提供网站服务。即让用户开发的WEB应用程序，变成可以被访问的网页。</p>
<p>​		<strong>安装：</strong></p>
<p>​		1.安装JDK环境	</p>
<p>​			下载JDK软件</p>
<p>​		2.解压安装Tomcat</p>
<h3 id="6-脚本＆自动化"><a href="#6-脚本＆自动化" class="headerlink" title="6.脚本＆自动化"></a>6.脚本＆自动化</h3><h3 id="7-项目实战"><a href="#7-项目实战" class="headerlink" title="7.项目实战"></a>7.项目实战</h3><h3 id="8-云平台技术"><a href="#8-云平台技术" class="headerlink" title="8.云平台技术"></a>8.云平台技术</h3><h3 id="9-问题汇总和解决方案"><a href="#9-问题汇总和解决方案" class="headerlink" title="9.问题汇总和解决方案"></a>9.问题汇总和解决方案</h3><h4 id="9-1-解决切换用户出现bash-4-2-问题"><a href="#9-1-解决切换用户出现bash-4-2-问题" class="headerlink" title="9.1 解决切换用户出现bash-4.2$问题"></a>9.1 解决切换用户出现bash-4.2$问题</h4><p>​		<strong>问题描述</strong>：linux中创建了一个xhh用户，然后使用su命令切换用户后，终端提示符显示成“bash-4.2$”而不是[root@localhost xhh]#，导致ll等命令无法执行。	</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /] su itheima</span><br><span class="line">bash -4.2$</span><br></pre></td></tr></table></figure>

<p>​		<strong>原因分析</strong>:没有在home目录下创建对应的目录导致。</p>
<p>​		<strong>解决方案</strong>：使用root用户登录，再home目录中创建用户对应的文件夹，mkdir &#x2F;home&#x2F;user，这里的user是用户的名字，然后执行如下两个命令：		<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/problem1.png"></p>
<p>​		执行成功后，再次使用su命令切换用户，发现一切正常。</p>
<h4 id="9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64"><a href="#9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64" class="headerlink" title="9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)"></a>9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/yum%E6%97%B6%E7%9A%84%E5%91%BD%E4%BB%A4.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一步</span></span><br><span class="line">sudo sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二步</span></span><br><span class="line">sudo sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">鸣谢：https://blog.csdn.net/kitesxian/article/details/142356833</span></span><br></pre></td></tr></table></figure>

<h4 id="9-3-Linux解压并部署Tomcat"><a href="#9-3-Linux解压并部署Tomcat" class="headerlink" title="9.3 Linux解压并部署Tomcat"></a>9.3 Linux解压并部署Tomcat</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[tomcat@node1 ~]$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</span><br><span class="line">--2024-09-23 18:59:24--  https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</span><br><span class="line">正在解析主机 mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.15.130, 2402:f000:1:400::2</span><br><span class="line">正在连接 mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)|101.6.15.130|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 404 Not Found</span><br><span class="line">2024-09-23 18:59:24 错误 404：Not Found。</span><br></pre></td></tr></table></figure>

<p>上官网复制连接放进去</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java API 和字符串</title>
    <url>/2024/02/03/Java%E5%9F%BA%E7%A1%80-API%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>**API(**Application Programming Interface):应用程序编程接口</p>
<p>简单理解：API就是别人已经写好的东西，我们不需要自己编写，直接使用即可.</p>
<p>Java API:指的就是JDK中提供得各种功能得Java类，这些类将底层的实现封装起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。</p>
<p>API帮助文档：帮助开发人员更好的使用API和查询API的一个工具</p>
<p>链接：<a href="https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei">https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei</a><br>提取码：rqei </p>
<p>如何使用帮助文档：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io包：读取文件的内容，或者把数据写到文件中去</span><br><span class="line">java.lang包：</span><br></pre></td></tr></table></figure>

<p><strong>字符串：</strong>JAVA不会字符串，开发就会凉一半</p>
<p>String：定义在java.lang.String包内，代表字符串，Java程序中的所有字符串(“abc”)文字都为此类的对象。</p>
<p>​		字符串的内容是不会发生改变的，它的对象在创建后不能被更改</p>
<p><em>创建String对象的两种方式</em>：</p>
<p>1.<strong>直接赋值</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>2.<strong>使用new关键字使用不同的构造方法去创建字符串对象</strong>:</p>
<table>
<thead>
<tr>
<th align="center">构造方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public String（）</td>
<td align="center">创建空白字符串，不含任何内容<br>String s0 &#x3D; new String( );</td>
</tr>
<tr>
<td align="center">public String(String original)</td>
<td align="center">根据传入的字符串，创建字符串对象<br>String s1 &#x3D; new String(“abc”)</td>
</tr>
<tr>
<td align="center">public String(char[ ] chs)</td>
<td align="center">根据传入字符数组，创建字符串对象<br>char[] chs &#x3D; {‘a’,’b’,’c’,’d’}<br>String s2 &#x3D; new String(chs)</td>
</tr>
<tr>
<td align="center">public String(byte[ ] chs)</td>
<td align="center">根据传入字节数组，创建字符串对象<br>byte[] bytes&#x3D; {97,98,99,100}<br>String s3 &#x3D; new String(bytes)</td>
</tr>
</tbody></table>
<p>字符串-字符数组-字符串：(应用场景:修改字符串的内容)</p>
<p>字节数组-字符串：(应用场景：网络中传输的数据其实都是字节信息)</p>
<p><em>字符串在内存中是如何创建的</em></p>
<p>StringTable(<strong>字符串常量池</strong>)：直接赋值的方式获取的字符串放在串次中，串池在<strong>堆内存</strong>中</p>
<p>当时有双引号直接赋值时，系统会坚持该字符串在串池中是否存在，不存在，创建新的，<strong>存在，复用。</strong></p>
<p>Java的常用方法1-<strong>字符串的比较</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1==s2);<span class="comment">//这种比较可以吗？</span></span><br></pre></td></tr></table></figure>

<p><em>&#x3D;&#x3D;号比较的原理？</em>（String属于引用数据类型）</p>
<p>基本数据类型：&#x3D;&#x3D;号比较基本数据类型比较的是<strong>数据值</strong></p>
<p>引用数据类型：&#x3D;&#x3D;号比较引用数据类型比较的是<strong>地址值</strong></p>
<p><em>字符串的比较？</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//串池中存在该字符串，复用，地址值相同</span></span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line"><span class="comment">//----------------------------------------------------------</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里面的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//记录堆里面的地址</span></span><br><span class="line">System.out.println(s1==s2);</span><br></pre></td></tr></table></figure>

<p>字符串比较：</p>
<p><strong>boolean equals方法(要比较的字符串)</strong> &#x2F;&#x2F;完全一样的结果才是true，否则为false.</p>
<p><strong>boolean equalsIgnoreCase(要比较的字符串)</strong>  &#x2F;&#x2F;忽略(<strong>英文状态下的</strong>)大小写的比较,适用于验证码校验</p>
<p><strong>&#x2F;&#x2F;键盘录入得到的字符串是new出来的</strong>，只有想比较字符串的内容，就必须要用String里面的方法。</p>
<p>Java常用的方法2-<strong>遍历字符串</strong></p>
<table>
<thead>
<tr>
<th>public char charAt(int index):根据索引返回字符</th>
</tr>
</thead>
<tbody><tr>
<td><strong>public int length():返回此字符串的长度，字符串的长度：字符串对象.length()</strong></td>
</tr>
</tbody></table>
<p>Java常用的方法3-<strong>字符串拼接和反转</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String newStr=<span class="string">&quot;&quot;</span>;<span class="comment">//-------------------------------拼接--------------</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> L-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            newStr=newStr+c;----------------------思想--------------</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br></pre></td></tr></table></figure>

<p>Java常用的方法4-<strong>字符串的截取</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex,<span class="type">int</span> endIndex)</span>   <span class="comment">//截取---包头不包围，包左不包右</span></span><br><span class="line">    <span class="comment">//只有返回值才是截取的小串，对原来的字符串没有任何影响，字符串本身不能发生变化。</span></span><br><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex)</span>  <span class="comment">//截取到末尾</span></span><br></pre></td></tr></table></figure>

<p> Java常用的方法5-<strong>新旧值替换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">replace</span><span class="params">(旧值,新值)</span><span class="comment">//替换</span></span><br><span class="line"><span class="comment">//注意点：只有返回值才是替换之后的结果</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>endNode的使用</title>
    <url>/2024/09/08/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>1.endnode的下载和安装：</p>
<p>​	<a href="https://mp.weixin.qq.com/s/dVgeXShxAsyfyVfzJkREMw">EndNote21.4安装教程 (qq.com)</a></p>
<p>2.导入文献</p>
<p>​	2.1数据库导入</p>
<p>​	<strong>PubMed</strong>(<a href="https://pubmed.ncbi.nlm.nih.gov/">PubMed (nih.gov)</a>)是文摘型数据库，也就意味着PubMed的强项是<strong>检索</strong>，这与全文数据库是不同的，点击create file会生成一个nbib文件。</p>
<p>​	nbib文件导入endNode的方式：</p>
<p>​		(1):直接双击文件，文件就会自动导入到endNode.</p>
<p>​                (2):通过文献过滤器导入，File-&gt;Import-&gt;File(&#x2F;import⬇),选择导入文件，导入选择选择其他过滤器-&gt;PubMed(NLM).</p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/pubmed%E4%BD%BF%E7%94%A8.png" alt=" "></p>
<p>​	<strong>web of science</strong>(<a href="https://webofscience.clarivate.cn/wos/alldb/basic-search">Document Search - All Databases (clarivate.cn)</a>),输入关键词点击搜索，勾选你需要的文献，点击导出(export)–EndNode desktop,生成一个ciw文件，双击即可导入文件。</p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/web-of-science.png"></p>
<p>​	<strong>Google Scholar学术导入</strong>，在谷歌学术进行检索，点击引用–EndNote格式–会下载一个enw文件，双击即可导入(选择….XML这个选项)，批量导出需要先收藏–我的图书馆–全部导出。</p>
<p>​	<strong>知网导入</strong>，勾选文献–导出与分析–EndNote格式–点击导出–生成TXT文件；点击Import⬇.</p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%9F%A5%E7%BD%91.png"></p>
<p>​			    《《<em>文献标题和期刊在一起的问题》》：</em>这是EndNote Import过滤器的问题，方法为Edit–Import Filters–Open Filter Manager–找到EndNote Import这个过滤器–点击编辑Edit–左侧的Templates–文件类型选择Journal Article–将Journal一行前的标签%B改成%J–关闭–是–重命名–重新导入–过滤器选择刚才修改的。</p>
<p>​			    《《<em>补充缺失信息</em>》》：因为某些原因，可能有些文件会缺失一些信息，按CTRL批量选择缺失信息的文献—鼠标右键—Find Reference Updates—Update All Files–Y.(只对英文文献有效，中文缺失双击手动添加)。</p>
<p>​	<strong>PDF导入</strong>，通过识别PDF的DOI号，从而提取文献信息，不建议导入中文文献论文，从中文数据库中直接导入。</p>
<p>​			    《《PDF导入英文文献信息缺失》》：主要是没检测到DOI号，方法：复制文件标题到浏览器搜索—复制DOI—-双击文献下拉到<strong>DOI</strong>–左上角查找全文更新—Update  Files</p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/PDF.png"></p>
<p>​			    《《导入文件夹所有PDF》》:File–import–文件夹</p>
<p>3.管理文献</p>
<p>​	<strong>3.1 分组</strong>    对导入的文件可以对其进行分组，只能有二级分类；在我的分组里点击–创建组，然后将同类型文献批量拖拽进组内.</p>
<p>​	**3.2 文献去重 ** 从同一个研究主题，往往会从不同数据库导入文献，会涉及到文献重复，点击All Reference—Reference(导航栏)—Find Duplicates—cancle–在左侧会新增一个重复文献文件夹—里面的文献数量就代表重复数量2倍，有灰色阴影的文献就是重复的文献—-鼠标右键单击Move Reference to Trash</p>
<p>​	<strong>3.3 文献排序</strong>  </p>
<p>​		查找全文：全选文献—右键查找全文–查找全文–出现回形针表示能找到</p>
<p>​		查找全文对于中文文献是不适用的，对于没有中文文献和没有查找到全文的英文文献，可以先将PDF下载到本地，这篇文献就会被链接到一个全文，该PDF文件会被自动存储到数据库文件夹中(删除后无影响)</p>
<p>​	<strong>3.4 对文献做笔记</strong></p>
<p>​		1,2步骤后 然后调出reserch Notes，保存。</p>
<p>​		<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%AC%94%E8%AE%B0.png"></p>
<p>4.引用文献</p>
<p>​	<strong>预览样式</strong>：在引用文献前，可以在EndNote预览参考文献样式</p>
<p>​	<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%88%E6%A0%B7%E5%BC%8F.png"></p>
<p>​	<strong>添加样式：</strong><a href="https://endnote.com/downloads/styles/?wpv_aux_current_post_id=12829&wpv_view_count=12764-TCPID12829">Output styles - EndNote</a></p>
<p>​		下载后粘贴到endnote下载位置的Style中</p>
<p>​	<strong>引入到word中</strong>：在word中EndNote(导航栏)—选择好style—在EndNote里选择好要导入的文件—在word里Insert Citation—Insert  selected Citation.</p>
<p>​	<strong>去除参考文献域代码</strong>：域代码去除就无法恢复（Ctrl+A–Ctrl+Shift+F9）</p>
<p>​	<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%9F%9F%E4%BB%A3%E7%A0%81.png"></p>
<p>​	<strong>更改作者数：</strong></p>
<p>​	<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B0.png"></p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B02.png"></p>
<p>​	<strong>引用网页文献的问题</strong>：</p>
<p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%BD%91%E9%A1%B5%E6%96%87%E7%8C%AE.png"></p>
]]></content>
      <categories>
        <category>科研软件</category>
      </categories>
      <tags>
        <tag>科研软件</tag>
      </tags>
  </entry>
  <entry>
    <title>好好学习  天天向上</title>
    <url>/2024/01/08/first-blog/</url>
    <content><![CDATA[<h1 id="This-is-my-first-blog-路上只我一个人，背着手踱着。这一片天地好像是我的-我也像超出了平常旳自己，到了另一世界里。我爱热闹，也爱冷静-爱群居，也爱独处。像今晚上，一个人在这苍茫旳月下，什么都可以想，什么都可以不想，便觉是个自由的人。白天里一定要做的事，一定要说的话，现在都可不理。这是独处的妙处，我且受用这无边的荷香月色好了。曲曲折折的荷塘上面，弥望旳是田田的叶子。叶子出水很高，像亭亭旳舞女旳裙。层层的叶子中间，零星地点缀着些白花，有袅娜-niao-nuo-地开着旳，有羞涩地打着朵儿旳-正如一粒粒的明珠，又如碧天里的星星，又如刚出浴的美人。微风过处，送来缕缕清香，仿佛远处高楼上渺茫的歌声似的。这时候叶子与花也有一丝的颤动，像闪电般，霎时传过荷塘的那边去了。叶子本是肩并肩密密地挨着，这便宛然有了一道凝碧的波痕。叶子底下是脉脉-mo-的流水，遮住了，不能见一些颜色-而叶子却更见风致了。"><a href="#This-is-my-first-blog-路上只我一个人，背着手踱着。这一片天地好像是我的-我也像超出了平常旳自己，到了另一世界里。我爱热闹，也爱冷静-爱群居，也爱独处。像今晚上，一个人在这苍茫旳月下，什么都可以想，什么都可以不想，便觉是个自由的人。白天里一定要做的事，一定要说的话，现在都可不理。这是独处的妙处，我且受用这无边的荷香月色好了。曲曲折折的荷塘上面，弥望旳是田田的叶子。叶子出水很高，像亭亭旳舞女旳裙。层层的叶子中间，零星地点缀着些白花，有袅娜-niao-nuo-地开着旳，有羞涩地打着朵儿旳-正如一粒粒的明珠，又如碧天里的星星，又如刚出浴的美人。微风过处，送来缕缕清香，仿佛远处高楼上渺茫的歌声似的。这时候叶子与花也有一丝的颤动，像闪电般，霎时传过荷塘的那边去了。叶子本是肩并肩密密地挨着，这便宛然有了一道凝碧的波痕。叶子底下是脉脉-mo-的流水，遮住了，不能见一些颜色-而叶子却更见风致了。" class="headerlink" title="This is my first blog 路上只我一个人，背着手踱着。这一片天地好像是我的;我也像超出了平常旳自己，到了另一世界里。我爱热闹，也爱冷静;爱群居，也爱独处。像今晚上，一个人在这苍茫旳月下，什么都可以想，什么都可以不想，便觉是个自由的人。白天里一定要做的事，一定要说的话，现在都可不理。这是独处的妙处，我且受用这无边的荷香月色好了。曲曲折折的荷塘上面，弥望旳是田田的叶子。叶子出水很高，像亭亭旳舞女旳裙。层层的叶子中间，零星地点缀着些白花，有袅娜(niǎo,nuó)地开着旳，有羞涩地打着朵儿旳;正如一粒粒的明珠，又如碧天里的星星，又如刚出浴的美人。微风过处，送来缕缕清香，仿佛远处高楼上渺茫的歌声似的。这时候叶子与花也有一丝的颤动，像闪电般，霎时传过荷塘的那边去了。叶子本是肩并肩密密地挨着，这便宛然有了一道凝碧的波痕。叶子底下是脉脉(mò)的流水，遮住了，不能见一些颜色;而叶子却更见风致了。"></a>This is my first blog 路上只我一个人，背着手踱着。这一片天地好像是我的;我也像超出了平常旳自己，到了另一世界里。我爱热闹，也爱冷静;爱群居，也爱独处。像今晚上，一个人在这苍茫旳月下，什么都可以想，什么都可以不想，便觉是个自由的人。白天里一定要做的事，一定要说的话，现在都可不理。这是独处的妙处，我且受用这无边的荷香月色好了。曲曲折折的荷塘上面，弥望旳是田田的叶子。叶子出水很高，像亭亭旳舞女旳裙。层层的叶子中间，零星地点缀着些白花，有袅娜(niǎo,nuó)地开着旳，有羞涩地打着朵儿旳;正如一粒粒的明珠，又如碧天里的星星，又如刚出浴的美人。微风过处，送来缕缕清香，仿佛远处高楼上渺茫的歌声似的。这时候叶子与花也有一丝的颤动，像闪电般，霎时传过荷塘的那边去了。叶子本是肩并肩密密地挨着，这便宛然有了一道凝碧的波痕。叶子底下是脉脉(mò)的流水，遮住了，不能见一些颜色;而叶子却更见风致了。</h1><h2 id="welcome-to-you"><a href="#welcome-to-you" class="headerlink" title="welcome to you!"></a>welcome to you!</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>&lt; !–more–&gt;</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>idea插件集合</title>
    <url>/2024/01/25/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>idea插件集合:</p>
<p>1:<strong>一秒生成标准JavaBean–插件PTG</strong></p>
<ol>
<li>电脑连接外网</li>
<li>idea-file-settings-Plugins-Marketplace-搜索ptg-install</li>
<li>idea右键-选择Ptg To JavaBean</li>
</ol>
<p><img src="/images/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/%E6%8F%92%E4%BB%B61.png"></p>
]]></content>
      <categories>
        <category>插件库</category>
      </categories>
      <tags>
        <tag>插件库</tag>
      </tags>
  </entry>
  <entry>
    <title>Linu上部署各类软件</title>
    <url>/2024/09/23/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="实战章节：在Linux上部署各类软件"><a href="#实战章节：在Linux上部署各类软件" class="headerlink" title="实战章节：在Linux上部署各类软件"></a>实战章节：在Linux上部署各类软件</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么学习各类软件在Linux上的部署"><a href="#为什么学习各类软件在Linux上的部署" class="headerlink" title="为什么学习各类软件在Linux上的部署"></a>为什么学习各类软件在Linux上的部署</h2><p>在前面，我们学习了许多的Linux命令和高级技巧，这些知识点比较零散，同学们跟随着课程的内容进行练习虽然可以基础掌握这些命令和技巧的使用，但是并没有一些具体的实操能够串联起来这些知识点。</p>
<p>所以，现在我们设计了各类软件在Linux上部署安装的实战章节，可以让同学们：</p>
<ul>
<li>对前面学习的各类操作命令进行复习和练习，从而深度掌握它们</li>
<li>本章节中演示部署的软件，包含了IT行业各类岗位中所必须使用的，如：Java后台、大数据开发、运维开发、测试、AI等。无论学习Linux后从事什么岗位，这些内容都会给你带来帮助</li>
</ul>
<blockquote>
<p>对于零基础学员，实战课程中所讲解的软件大概率多数大家并不了解。</p>
<p>所以，课程仅涉及到安装部署，不对软件的使用做详细说明。</p>
<p>同学们在这个过程中，可能会遇到各种各样的错误，<code>不要怕</code>，解决它，将会给你带来极大的提升。</p>
</blockquote>
<h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>对于本部分的内容学习，我们设计两个目标：</p>
<ul>
<li><p>对于零基础或未从业的学员，不要求深入理解所安装部署的软件是什么，仅仅能够跟随课程成功的将其部署安装并运行成功即可</p>
<p>在这个过程中，主要锻炼大家对Linux操作系统的熟练度，此乃零基础未从业学员的第一学习目标</p>
</li>
<li><p>对于有基础或已从业的学员，本章节讲解的软件涵盖了大多数IT从业者所能接触到的，特别是大数据开发、后端开发两个主流方向，可以作为参考资料，以便在工作中有所帮助。</p>
</li>
</ul>
<p>本章节内的各类软件安装，&#x3D;&#x3D;不强制要求全部学习&#x3D;&#x3D;</p>
<ol>
<li>零基础学员，建议全部学习，作为前面学习内容的总结和实战</li>
<li>IT从业者、有经验学员，可以按需选择，选择工作中需要用到的进行学习</li>
</ol>
<blockquote>
<p>章节内包含的软件并非100%涵盖了IT开发领域中所需要的内容。</p>
<p>如果您对某些软件的安装有强烈需求，且课程中没有提供教程，可以私信B站：”黑马大数据曹老师”，老师会酌情根据时间安排补充上去哦。</p>
</blockquote>
<h2 id="为什么不使用PPT而是使用文档进行授课"><a href="#为什么不使用PPT而是使用文档进行授课" class="headerlink" title="为什么不使用PPT而是使用文档进行授课"></a>为什么不使用PPT而是使用文档进行授课</h2><p>从现在开始，将要进入到Linux的实操阶段，在这个阶段我们将会涉及到非常多的软件部署等操作，涉及到：</p>
<ul>
<li>各类命令的使用</li>
<li>各种过程的结果</li>
<li>复杂的流程步骤</li>
<li>等</li>
</ul>
<p>这些信息的展示，并不适合于使用PPT作为载体进行授课，所以从现在开始我们将使用操作文档的模式为大家进行讲解。</p>
<blockquote>
<p>使用文档模式还有一个好处，除了学习视频以外，拿到课程中使用的操作文档，同样可以作为重要的参考手册进行使用。</p>
<p>一举两得</p>
</blockquote>
<h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol>
<li>实战章节要求同学们&#x3D;&#x3D;务必全部学习前面的知识点&#x3D;&#x3D;，即：初识Linux、Linux基础命令、Linux权限管理、Linux高阶技巧这4个章节，请勿跳过前面的章节学习实战章节。</li>
<li>实战章节中会开启多台虚拟机，请尽量确保电脑的内存在：8GB（包含8GB）以上。如内存不足可以扩充内存条或购买阿里云、UCloud等云服务器临时使用（1个月多台低配服务器几十块左右）</li>
</ol>
<blockquote>
<p>对于云平台上购买服务器，可以参阅最后的章节（云服务）</p>
</blockquote>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。</p>
<p>一个合格的程序员要有良好的信息收集能力哦</p>
<h1 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p>
<p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p>
<p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p>
<p>本次课程分为2个版本进行安装：</p>
<ul>
<li>MySQL 5.7版本安装</li>
<li>MySQL 8.x版本安装</li>
</ul>
<blockquote>
<p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p>
</blockquote>
<h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p>
<p>对于SQL语句我们并未涉及，所以可以跟随教程的内容，复制粘贴即可</p>
<p>如对MySQL感兴趣，可以学习BiliBili黑马程序员视频：<a href="https://www.bilibili.com/video/BV1iF411z7Pu">2022新版黑马程序员MySQL知识精讲+mysql实战案例_零基础mysql数据库入门到高级全套教程</a></p>
<blockquote>
<p>如有时间，建议可以在学习完Linux系统之后，学习一下MySQL数据库</p>
<p>无论从事什么方面的开发，Java后端、大数据、AI、前端、Linux运维等，都会要求掌握MySQL数据库的</p>
<p>可以说，MySQL是IT开发从业者必备的技能了。</p>
</blockquote>
<h2 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h2><blockquote>
<p>注意：安装操作需要root权限</p>
</blockquote>
<p>MySQL的安装我们可以通过前面学习的yum命令进行。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>配置yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182514.png" alt="image-20221012182514865"></p>
<blockquote>
<p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：</p>
<ul>
<li>导入MySQL仓库的密钥</li>
<li>配置MySQLQ的yum仓库</li>
</ul>
</blockquote>
</li>
<li><p>使用yum安装MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182556.png" alt="image-20221012182555420"></p>
</li>
<li><p>安装完成后，启动MySQL并配置开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld		# 启动</span><br><span class="line">systemctl enable mysqld		# 开机自启</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p>
</blockquote>
</li>
<li><p>检查MySQL的运行状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182716.png" alt="image-20221012182716598"></p>
</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p>
<ol>
<li><p>获取MySQL的初始密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182744.png" alt="image-20221012182744115"></p>
</li>
<li><p>登陆MySQL数据库系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182806.png" alt="image-20221012182805966"></p>
</li>
<li><p>修改root用户密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>[扩展]，配置root的简单密码</p>
<blockquote>
<p>我们可以给root设置简单密码，如123456.</p>
<p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>;	 # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>[扩展]，配置root运行远程登录</p>
<blockquote>
<p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p>
<p>请注意，允许root远程登录会带来安全风险</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出MySQL控制台页面</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查端口</p>
<p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012183746.png" alt="image-20221012183746802"></p>
</li>
</ol>
<p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p>
<h2 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h2><blockquote>
<p>注意：安装操作需要root权限</p>
</blockquote>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>配置yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用yum安装MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，启动MySQL并配置开机自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld		# 启动</span><br><span class="line">systemctl enable mysqld		# 开机自启</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p>
</blockquote>
</li>
<li><p>检查MySQL的运行状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>主要修改root密码和允许root远程登录</p>
<ol>
<li><p>获取MySQL的初始密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录MySQL数据库系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改root密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>[扩展]，配置root的简单密码</p>
<blockquote>
<p>我们可以给root设置简单密码，如123456.</p>
<p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;		# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;		# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure>


</li>
<li><p>允许root远程登录，并设置远程登录密码</p>
<blockquote>
<p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p>
<p>请注意，允许root远程登录会带来安全风险</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出MySQL控制台页面</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查端口</p>
<p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012192303.png" alt="image-20221012192303607"></p>
</li>
</ol>
<p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p>
<h2 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h2><blockquote>
<p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p>
<p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p>
</blockquote>
<p>安装操作需root权限，你可以：</p>
<ol>
<li><p>通过 sudo su -，切换到root用户</p>
<blockquote>
<p>课程中选择这种方式操作</p>
</blockquote>
</li>
<li><p>或在每一个命令前，加上sudo，用来临时提升权限</p>
</li>
</ol>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>下载apt仓库文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094103.png" alt="image-20221016094103315"></p>
</li>
<li><p>配置apt仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure>

<p>弹出框中选择：<code>ubuntu bionic</code> （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094142.png" alt="image-20221016094142343"></p>
<p>弹出框中选择：<code>MySQL Server &amp; Cluster</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094216.png" alt="image-20221016094216377"></p>
<p>弹出框中选择：<code>mysql-5.7</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094254.png" alt="image-20221016094254397"></p>
<p>最后选择：<code>ok</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094306.png" alt="image-20221016094306917"></p>
</li>
<li><p>更新apt仓库的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否成功配置MySQL5.7的仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094546.png" alt="image-20221016094546943"></p>
<p>看到如图所示字样，即成功</p>
</li>
<li><p>安装MySQL5.7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure>

<p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094941.png" alt="image-20221016094941439"></p>
<p>再次输入root密码确认</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094954.png" alt="image-20221016094954505"></p>
</li>
<li><p>启动MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql start			# 启动</span><br><span class="line">/etc/init.d/mysql stop			# 停止</span><br><span class="line">/etc/init.d/mysql status		# 查看状态</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095259.png" alt="image-20221016095259172"></p>
</li>
<li><p>对MySQL进行初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>

<ol>
<li><p>输入密码：</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095458.png" alt="image-20221016095458755"></p>
</li>
<li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095537.png" alt="image-20221016095537716"></p>
</li>
<li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095621.png" alt="image-20221016095621386"></p>
</li>
<li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101232.png" alt="image-20221016101232827"></p>
</li>
<li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101324.png" alt="image-20221016101324577"></p>
</li>
<li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101404.png" alt="image-20221016101404392"></p>
</li>
<li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101442.png" alt="image-20221016101442459"></p>
</li>
</ol>
</li>
<li><p>登陆MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101524.png" alt="image-20221016101524498"></p>
</li>
</ol>
<p>至此，在Ubuntu上安装MySQL5.7版本成功。</p>
<h2 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h2><blockquote>
<p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p>
<p>所以直接可以通过apt安装即可</p>
</blockquote>
<blockquote>
<p>注意，课程是以WSL获得的Ubuntu操作系统环境。</p>
<p>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是&#x3D;&#x3D;完全一致的&#x3D;&#x3D;</p>
</blockquote>
<p>安装操作需root权限，你可以：</p>
<ol>
<li><p>通过 sudo su -，切换到root用户</p>
<blockquote>
<p>课程中选择这种方式操作</p>
</blockquote>
</li>
<li><p>或在每一个命令前，加上sudo，用来临时提升权限</p>
</li>
</ol>
<h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新apt仓库信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql start			# 启动</span><br><span class="line">/etc/init.d/mysql stop			# 停止</span><br><span class="line">/etc/init.d/mysql status		# 查看状态</span><br></pre></td></tr></table></figure>
</li>
<li><p>登陆MySQL设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出MySQL控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>对MySQL进行初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure>

<ol>
<li><p>输入密码：</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095458.png" alt="image-20221016095458755"></p>
</li>
<li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095537.png" alt="image-20221016095537716"></p>
</li>
<li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095621.png" alt="image-20221016095621386"></p>
</li>
<li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101232.png" alt="image-20221016101232827"></p>
</li>
<li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101324.png" alt="image-20221016101324577"></p>
</li>
<li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101404.png" alt="image-20221016101404392"></p>
</li>
<li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101442.png" alt="image-20221016101442459"></p>
</li>
</ol>
</li>
<li><p>重新登陆MySQL（用更改后的密码）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016110414.png" alt="image-20221016110414182"></p>
</li>
</ol>
<p>至此，在Ubuntu上安装MySQL5.7版本成功。</p>
<h1 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p>
<p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p>
<blockquote>
<p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p>
</blockquote>
<h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><p>Tomcat的安装非常简单，主要分为2部分：</p>
<ol>
<li>安装JDK环境</li>
<li>解压并安装Tomcat</li>
</ol>
<blockquote>
<p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p>
<p>课程中使用的JDK版本是：JDK8u351版本</p>
</blockquote>
<h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ol>
<li><p>下载JDK软件</p>
<p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p>
<p>在页面下方找到：</p>
<img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163411.png" alt="image-20221017163411651" style="zoom: 67%;" />

<p>下载<code>jdk-8u351-linux-x64.tar.gz</code></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163440.png" alt="image-20221017163440491"></p>
<p>&#x3D;&#x3D;在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）&#x3D;&#x3D;</p>
</li>
<li><p>登陆Linux系统，切换到root用户</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163607.png"></p>
</li>
<li><p>通过FinalShell，上传下载好的JDK安装包</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163706.png" alt="image-20221017163706026"></p>
</li>
<li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：&#x2F;export&#x2F;server 内</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server </span><br></pre></td></tr></table></figure>
</li>
<li><p>解压缩JDK安装文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置JDK的软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME&#x2F;bin文件夹加入PATH环境变量中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>生效环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置java执行程序的软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行验证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote>
<p>Tomcat建议使用非Root用户安装并启动</p>
<p>可以创建一个用户：tomcat用以部署</p>
</blockquote>
<ol>
<li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p>
<blockquote>
<p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p>
<p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p>
<p>放行有2种操作方式：</p>
<ol>
<li>关闭防火墙</li>
<li>配置防火墙规则，放行端口</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭防火墙</span><br><span class="line">systemctl disable firewalld		# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line"><span class="meta prompt_">		# </span><span class="language-bash">--add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span></span><br><span class="line">firewall-cmd --reload								# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p>
<p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p>
</blockquote>
</li>
<li><p>以root用户操作，创建tomcat用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载Tomcat安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可</p>
<p>或者使用课程资料中提供的安装包</p>
</blockquote>
</li>
<li><p>解压Tomcat安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Tomcat软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改tomcat安装目录权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到tomcat用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>tomcat启动在8080端口，可以检查是否正常启动成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017223814.png" alt="image-20221017223814737"></p>
</li>
<li><p>打开浏览器，输入：</p>
<p><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></p>
<p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017223915.png" alt="image-20221017223915498"></p>
</li>
</ol>
<p>至此，Tomcat安装配置完成。</p>
<h1 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p>
<p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p>
<p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p>
<h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p>
<blockquote>
<p>安装Nginx的操作需要root身份</p>
</blockquote>
<ol>
<li><p>安装yum依赖程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动添加，nginx的yum仓库</p>
<p>yum程序使用的仓库配置文件，存放在：<code>/etc/yum.repo.d</code>内。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过如上操作，我们手动添加了nginx的yum仓库</p>
</blockquote>
</li>
<li><p>通过yum安装最新稳定版的nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx		# 启动</span><br><span class="line">systemctl stop nginx		# 停止</span><br><span class="line">systemctl status nginx		# 运行状态</span><br><span class="line">systemctl enable nginx		# 开机自启</span><br><span class="line">systemctl disable nginx		# 关闭开机自启</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置防火墙放行</p>
<p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭</span><br><span class="line">systemctl disable firewalld		# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent		# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload							# 重新加载防火墙规则</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</p>
<p><a href="http://192.168.88.130/">http://192.168.88.130</a> 或 <a href="http://centos/">http://centos</a></p>
<blockquote>
<p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p>
<p>显示的指定端口也是可以的比如：</p>
<ul>
<li><strong><a href="http://192.168.88.130/">http://192.168.88.130:80</a></strong></li>
<li><a href="http://centos/">http://centos:80</a></li>
</ul>
</blockquote>
</li>
</ol>
<p>至此，Nginx安装配置完成。</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/18/20221018143113.png" alt="image-20221018143113053"></p>
<h1 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p>
<p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p>
<h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p>
</blockquote>
<ol>
<li><p>准备yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装RabbitMQ</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server		# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server		# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server			# 启动</span><br><span class="line">systemctl stop rabbitmq-server			# 关闭</span><br><span class="line">systemctl status rabbitmq-server		# 查看状态</span><br></pre></td></tr></table></figure>
</li>
<li><p>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭</span><br><span class="line">systemctl disable firewalld		# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent		# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent		# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent		# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload								# 重新加载防火墙规则</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动RabbitMQ的WEB管理控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加admin用户，并赋予权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure>


</li>
<li><p>浏览器打开管理控制台</p>
<p><a href="http://192.168.88.130:15672/">http://192.168.88.130:15672</a></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/18/20221018154824.png" alt="image-20221018154823983"></p>
</li>
</ol>
<p>至此，RabbitMQ已经安装完成了。</p>
<h1 id="Redis安装部署【简单】"><a href="#Redis安装部署【简单】" class="headerlink" title="Redis安装部署【简单】"></a>Redis安装部署【简单】</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p>
<p>redis的特点就是：<code>快</code>，可以基于内存存储数据并提供超低延迟、超快的检索速度</p>
<p>一般用于在系统中提供快速缓存的能力。</p>
<h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>配置<code>EPEL</code>仓库</p>
<blockquote>
<p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：redis</span></span><br><span class="line">systemctl enable redis		# 开机自启</span><br><span class="line">systemctl disable redis		# 关闭开机自启</span><br><span class="line">systemctl start redis		# 启动</span><br><span class="line">systemctl stop redis		# 关闭</span><br><span class="line">systemctl status redis		# 查看状态</span><br></pre></td></tr></table></figure>
</li>
<li><p>放行防火墙，redis使用端口6379</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld		# 关闭</span><br><span class="line">systemctl disable firewalld		# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行6379端口</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent		# 放行tcp规则下的6379端口，永久生效</span><br><span class="line">firewall-cmd --reload	</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入redis服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行redis-cli</span></span><br><span class="line">[root@centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set mykey hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
</ol>
<p>至此，redis安装完成。</p>
<h1 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p>
<p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p>
<p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p>
<p>很多服务中的搜索功能，都是基于es来实现的。</p>
<h2 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>添加yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装es</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置es</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动es</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025085432.png" alt="image-20221025085432335"></p>
</li>
</ol>
<h1 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p>
<p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p>
<p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h3><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p>
<p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p>
<ol>
<li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行<code>init 0</code>来快速关机）</p>
</li>
<li><p>新建文件夹</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104157.png" alt="image-20221025104157628"></p>
<p>文件夹起名为：<code>虚拟机集群</code></p>
</li>
<li><p>克隆</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104131.png" alt="image-20221025104131303"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104312.png" alt="image-20221025104312091"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104329.png" alt="image-20221025104329109"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104345.png" alt="image-20221025104345484"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104414.png" alt="image-20221025104414576"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104427.png" alt="image-20221025104427160"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104432.png" alt="image-20221025104432927"></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104446.png" alt="image-20221025104446044"></p>
</li>
<li><p>同样的操作克隆出：node2和node3</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104825.png" alt="image-20221025104825204"></p>
</li>
<li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>
</li>
<li><p>同样的操作启动node2和node3,</p>
<p>修改node2主机名为node2，设置ip为192.168.88.132</p>
<p>修改node2主机名为node3，设置ip为192.168.88.133</p>
</li>
<li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p>
<blockquote>
<p>为了简单起见，建议配置root用户登录</p>
</blockquote>
</li>
</ol>
<h3 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h3><ol>
<li><p>在Windows系统中修改hosts文件，填入如下内容：</p>
<blockquote>
<p>如果同学们使用MacOS系统，请：</p>
<ol>
<li>sudo su -，切换到root</li>
<li>修改&#x2F;etc&#x2F;hosts文件</li>
</ol>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>在3台Linux的&#x2F;etc&#x2F;hosts文件中，填入如下内容（&#x3D;&#x3D;3台都要添加&#x3D;&#x3D;）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>SSH服务是一种用于远程登录的安全认证协议。</p>
<p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p>
<p>SSH服务支持：</p>
<ol>
<li>通过账户+密码的认证方式来做用户认证</li>
<li>通过账户+秘钥文件的方式做用户认证</li>
</ol>
<p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p>
<p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p>
<p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p>
<h4 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h4><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p>
<ol>
<li><p>在每一台机器都执行：<code>ssh-keygen -t rsa -b 4096</code>，一路回车到底即可</p>
</li>
<li><p>在每一台机器都执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</p>
</li>
</ol>
<h3 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h3><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为&#x3D;&#x3D;每一台&#x3D;&#x3D;机器都配置JDK环境。</p>
<p>JDK配置参阅：<code>Tomcat</code>安装部署环节。</p>
<h3 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h3><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p>
<p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>



<p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p>
<p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p>
<p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p>
<p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure>





<h3 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h3><p>为了避免后续出现问题，在完成上述设置后，为&#x3D;&#x3D;每一台虚拟机&#x3D;&#x3D;都制作快照，留待使用。</p>
<h2 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h2><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p>
<p>为了更加方面的互相传输，我们补充一个命令：scp</p>
<p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p>
<p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p>
<p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p>
<p>语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure>











<h1 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p>
<p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p>
<h2 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h2><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p>
<ol>
<li><p>首先，要确保已经完成了<code>集群化环境前置准备</code>环节的全部内容</p>
</li>
<li><p>【node1上操作】下载Zookeeper安装包，并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1上操作】创建软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1上操作】修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1上操作】配置<code>myid</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node2和node3上操作】，创建文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1上操作】将Zookeeper 复制到node2和node3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node2上操作】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node3上操作】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start		# 启动Zookeeper</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1上操作】验证Zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>至此Zookeeper安装完成</p>
<h1 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>Kafka是一款<code>分布式的、去中心化的、高吞吐低延迟、订阅模式</code>的消息队列系统。</p>
<p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p>
<p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p>
<p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p>
<h2 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p>
<blockquote>
<p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p>
</blockquote>
</li>
<li><p>【在node1操作】下载并上传Kafka的安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node1操作】解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /export/server			# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node1操作】将node1的kafka复制到node2和node3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node2操作】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>
</li>
<li><p>【在node3操作】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动kafka</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证Kafka启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure>

<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025174522.png" alt="image-20221025174522487"></p>
</li>
</ol>
<h2 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h2><ol>
<li>创建测试主题</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行测试，请在FinalShell中打开2个node1的终端页面</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>





<h1 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p>
<p>Hadoop HDFS 提供分布式海量数据存储能力</p>
<p>Hadoop YARN 提供分布式集群资源管理能力</p>
<p>Hadoop MapReduce 提供分布式海量数据计算能力</p>
<h3 id="前置要求-1"><a href="#前置要求-1" class="headerlink" title="前置要求"></a>前置要求</h3><ul>
<li>请确保完成了集群化环境前置准备章节的内容</li>
<li>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</li>
</ul>
<h3 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h3><p>Hadoop生态体系中总共会出现如下进程角色：</p>
<ol>
<li>Hadoop HDFS的管理角色：Namenode进程（<code>仅需1个即可（管理者一个就够）</code>）</li>
<li>Hadoop HDFS的工作角色：Datanode进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li>
<li>Hadoop YARN的管理角色：ResourceManager进程（<code>仅需1个即可（管理者一个就够）</code>）</li>
<li>Hadoop YARN的工作角色：NodeManager进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li>
<li>Hadoop 历史记录服务器角色：HistoryServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li>
<li>Hadoop 代理服务器角色：WebProxyServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li>
<li>Zookeeper的进程：QuorumPeerMain进程（<code>仅需1个即可（Zookeeper的工作者，越多越好）</code>）</li>
</ol>
<h3 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h3><p>角色分配如下：</p>
<ol>
<li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li>
<li>node2:Datanode、NodeManager、QuorumPeerMain</li>
<li>node3:Datanode、NodeManager、QuorumPeerMain</li>
</ol>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026202935.png" alt="image-20221026202935745"></p>
<h2 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h2><h3 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h3><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p>
<p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p>
<p>请在VMware中，对：</p>
<ol>
<li>node1设置4GB或以上内存</li>
<li>node2和node3设置2GB或以上内存</li>
</ol>
<blockquote>
<p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p>
<p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p>
</blockquote>
<h3 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h3><p>略</p>
<h3 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h3><ol>
<li><p>下载Hadoop安装包、解压、配置软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件：<code>hadoop-env.sh</code></p>
<blockquote>
<p>Hadoop的配置文件要修改的地方很多，请细心</p>
</blockquote>
<p>cd 进入到&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop，文件夹中，配置文件都在这里</p>
<p>修改hadoop-env.sh文件</p>
<blockquote>
<p>此文件是配置一些Hadoop用到的环境变量</p>
<p>这些是临时变量，在Hadoop运行时有用</p>
<p>如果要永久生效，需要写到&#x2F;etc&#x2F;profile中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件：<code>core-site.xml</code></p>
<p>如下，清空文件，填入如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：<code>hdfs-site.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：<code>mapred-env.sh</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：<code>mapred-site.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：<code>yarn-env.sh</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置：<code>yarn-site.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改workers文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>分发hadoop到其它机器</p>
</li>
</ol>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure>

<ol start="11">
<li><p>在node2、node3执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建所需目录</p>
<ul>
<li><p>在node1执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure>
</li>
<li><p>在node2执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure>
</li>
<li><p>在node3执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置环境变量</p>
<p>在node1、node2、node3修改&#x2F;etc&#x2F;profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>执行<code>source /etc/profile</code>生效</p>
</li>
<li><p>格式化NameNode，在node1执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hadoop这个命令来自于：$HADOOP_HOME&#x2F;bin中的程序</p>
<p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p>
</blockquote>
</li>
<li><p>启动hadoop的hdfs集群，在node1执行即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>start-dfs.sh这个命令来自于：$HADOOP_HOME&#x2F;sbin中的程序</p>
<p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p>
</blockquote>
</li>
<li><p>启动hadoop的yarn集群，在node1执行即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动历史服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动web代理服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ol>
<li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p>
</li>
<li><p>验证HDFS，浏览器打开：<a href="http://node1:9870/">http://node1:9870</a></p>
<p>创建文件test.txt，随意填入内容，并执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证YARN，浏览器打开：<a href="http://node1:8088/">http://node1:8088</a></p>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h1><h2 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h2><p>HBase 是一种<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>、可扩展、支持海量数据存储的 NoSQL 数据库。</p>
<p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p>
<p>不过和Redis设计方向不同</p>
<ul>
<li>Redis设计为少量数据，超快检索</li>
<li>HBase设计为海量数据，快速检索</li>
</ul>
<p>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</p>
<h2 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</p>
<ul>
<li>集群化软件前置准备（JDK）</li>
<li>Zookeeper</li>
<li>Hadoop</li>
<li>这些环节的软件安装</li>
</ul>
</li>
<li><p>【node1执行】下载HBase安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-env.sh</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-site.xml</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件的全部内容替换成如下内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper的地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper快照的存储位置 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/export/server/apache-zookeeper-3.6.0-bin/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】，修改配置文件，修改<code>conf/regionservers</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】，分发hbase到其它机器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node2、node3执行】，配置软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1、node2、node3执行】，配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】启动HBase</p>
<blockquote>
<p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于我们配置了环境变量export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin</p>
<p>start-hbase.sh即在$HBASE_HOME&#x2F;bin内，所以可以无论当前目录在哪，均可直接执行</p>
</blockquote>
</li>
<li><p>验证HBase</p>
<p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p>
</li>
<li><p>简单测试使用HBase</p>
<p>【node1执行】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h1><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p>
<p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p>
<h2 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h2><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p>
<p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p>
<p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p>
<p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p>
<h2 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>【node1执行】下载并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】修改配置文件名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】修改配置文件，<code>spark-env.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】修改配置文件，<code>slaves</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】分发</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node2、node3执行】设置软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1执行】启动Spark集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Spark监控页面，浏览器打开：<a href="http://node1:8081/">http://node1:8081</a></p>
</li>
<li><p>【node1执行】提交测试任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h1><h2 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p>
<p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p>
<h2 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h2><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p>
<p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p>
<p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p>
<p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p>
<p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p>
<h2 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>【node1操作】下载安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1操作】修改配置文件，<code>conf/flink-conf.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line"><span class="attr">taskmanager.memory.preallocate:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line"><span class="attr">jobmanager.web.port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1操作】，修改配置文件，<code>conf/slaves</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1操作】分发Flink安装包到其它机器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node2、node3操作】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure>
</li>
<li><p>【node1操作】，启动Flink</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证Flink启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交测试任务</p>
<p>【node1执行】</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h1><h2 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h2><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p>
<p>Zabbix 是一个&#x3D;&#x3D;企业级分布式开源监控解决方案&#x3D;&#x3D;。</p>
<p>Zabbix 软件能够&#x3D;&#x3D;监控&#x3D;&#x3D;众多网络参数和服务器的&#x3D;&#x3D;健康度、完整性&#x3D;&#x3D;。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p>
<h2 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p> 安装整体步骤:</p>
</blockquote>
<ol>
<li>准备Linux 服务器(虚拟机)</li>
<li>安装Mysql</li>
<li>安装zabbix( 包含 server  agent  web)</li>
<li>配置 mysql, 为zabbix创建表结构</li>
<li>配置zabbix server</li>
<li>启动并开启开机自启动</li>
</ol>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175324.png" alt="1574338996145"></p>
<h3 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h3><p>安装ZabbixServer需要先安装好<code>Mysql</code>数据库</p>
<p>课程使用<code>Mysql 5.7</code></p>
<p>安装步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4;	 # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure>





<h3 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h3><blockquote>
<p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。</p>
</blockquote>
<p>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&os_distribution=centos&os_version=7&db=mysql">https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql</a></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175330.png" alt="1571981197131"></p>
<p>选择对应的版本，然后再下面官网给出了具体的安装命令，使用<code>rpm</code>和<code>yum</code>来进行安装。</p>
<p>需要有网络。</p>
<p><code>以下内容来自官方页面</code></p>
<h4 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/installation/install_from_packages">documentation</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

<h4 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure>

<h4 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/appendix/install/db_scripts">documentation</a></p>
<blockquote>
<p>在Mysql中操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure>

<p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p>
<p>Import initial schema and data. You will be prompted to enter your newly created password.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure>

<h4 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h4><p>Edit file &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure>

<h4 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h4><p>Edit file <code>/etc/httpd/conf.d/zabbix.conf</code>, uncomment and set the right timezone for you.<code># php_value date.timezone Asia/Shanghai</code></p>
<p>Start Zabbix server and agent processes and make it start at system boot:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure>

<p>Now your Zabbix server is up and running!</p>
<h3 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h3><p><strong>打开:<code>http://192.168.88.131/zabbix</code></strong></p>
<p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175338.png" alt="1571993951841"></p>
<p><strong>点击下一步，会检查相应的设置是否都正常</strong></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175341.png" alt="1571994018126"></p>
<p>如果一切正常，点击下一步。</p>
<p><strong>配置DB连接</strong></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175344.png" alt="1571994069689"></p>
<p>按具体情况填写即可</p>
<p><strong>配置Server细节</strong></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175347.png" alt="1571994111921"></p>
<p>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫<code>ITHEIMA-TEST</code></p>
<p><strong>安装前总结预览</strong></p>
<p>检查确认没有问题就下一步</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175349.png" alt="1571994206902"></p>
<p><strong>配置完成</strong></p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175351.png" alt="1571994221531"></p>
<p><strong>初始管理员账户Admin密码zabbix</strong></p>
<p>输入账户密码后，就能进入zabbix页面了。</p>
<p>如下图：</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175354.png" alt="1571994287036"></p>
<p>现在是一个崭新的zabbix等待我们去探索。</p>
<h1 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h1><h2 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p><code>Grafana</code>支持两种部署形式</p>
<ol>
<li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li>
<li><code>Grafana</code>官方托管. 无需安装, 在线注册即可得到一个专属于自己的<code>Grafana</code>, 但是要花钱的. 是一种<code>SaaS</code>服务</li>
</ol>
<p>我们课程选择方式1</p>
<h3 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h3><p><code>Grafana</code>支持常见的绝大多数操作系统, 如<code>windows</code> <code>mac</code> <code>linux</code> 同时也支持部署在<code>docker</code>中.</p>
<p>大多数情况下, <code>Grafana</code>都是部署在<code>linux</code>服务器之上. 所以本课程也是基于<code>Linux</code>系统来讲解.</p>
<p>对<code>windows</code> <code>mac</code>系统 或 <code>docker</code>部署有兴趣的同学, 请参考:  <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p>
<p>我们部署<code>Grafana</code>可以使用<code>YUM</code>来进行部署.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure>



<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>grafana-server</code>具有许多配置选项，这些选项可以在<code>.ini</code>配置文件中指定，也可以使用环境变量指定。</p>
<blockquote>
<p> <strong>Note.</strong> <code>Grafana </code> needs to be restarted for any configuration changes to take effect. </p>
</blockquote>
<h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p><code>;</code>符号在<code>.ini</code>文件中全局表示注释 ()</p>
<h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p>
<ul>
<li>默认: <code>$WORKING_DIR/conf/defaults.ini</code></li>
<li>自定义:<code>$WORKING_DIR/conf/custom.ini</code></li>
<li>自定义配置文件路径可以被参数<code>--config</code>覆盖</li>
</ul>
<blockquote>
<p>对于<code>YUM</code> <code>RPM</code> 安装的方式, 配置文件在: <code>/etc/grafana/grafana.ini</code></p>
</blockquote>
<h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>SectionName</code>是方括号内的文本。一切都应为大写，<code>.</code>应替换为<code>_</code> 例如，给定以下配置设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure>

<p>Then you can override them using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span>	<span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure>



<h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p><code>Grafana</code>支持使用<code>Sqlite3</code> <code>Postgresql</code> <code>Mysql</code>这三种数据库作为其<code>元数据</code>的存储.</p>
<p>我们课程使用<code>Mysql</code>. 和<code>zabbix</code>的元数据mysql共用一个实例</p>
<p>只需要配置如下内容即可:</p>
<p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175713.png" alt="1573635500521"></p>
<p>并登陆mysql, 执行:</p>
<p><code>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p>
<p>创建<code>Grafana</code>使用的数据库作为元数据存储.</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure>





<p>浏览器打开：<a href="http://node1:3000/">http://node1:3000</a></p>
<p>默认账户密码：admin&#x2F;admin</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>分支语句-switch</title>
    <url>/2024/01/17/java-Switch%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="Switch的语句格式"><a href="#Switch的语句格式" class="headerlink" title="Switch的语句格式"></a>Switch的语句格式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;					<span class="comment">//	表达式的值==case的值</span></span><br><span class="line">	<span class="keyword">case</span> 值<span class="number">1</span>：					<span class="comment">//表达式：取值为byte,short,int,char,枚举(jdk5以后)，String(jdk7以后)</span></span><br><span class="line">		语句体<span class="number">1</span>;				   <span class="comment">// case后面的值只能表示字面量，不能是变量。</span></span><br><span class="line">        <span class="keyword">break</span>;					 <span class="comment">//当switch里面的内容得到一个结果，可以将switch赋值给一个变量</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>：</span><br><span class="line">		语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>default的位置和省略</p>
<p>位置：default位置随意，习惯写在最下面。</p>
<p>省略：default可以省略，语法不出差，但不建议。</p>
</li>
<li><p>case穿透</p>
<p>省略break会引起case穿透。</p>
<p>使用场景：多个case的语句体重复了，那么我们考虑利用case穿透去简化代码。</p>
</li>
<li><p>switch的新特性(jdk12)</p>
<p><strong>case 值1 -&gt;{</strong>	<em>&#x2F;&#x2F;消除了case穿透，大括号里面<strong>只有一行代码</strong>时，可以省略大括号</em></p>
<p><strong>}</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-包-final-权限修饰符-代码块</title>
    <url>/2024/02/23/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<p><strong>包：</strong></p>
<p>定义：包就是文件夹，用来管理各种不同功能的Java类，方便后期代码维护</p>
<p>规则：公司域名反写+包的作用名，需要全部英文小写，见名知意，com.itheima.domain</p>
<p>使用其他类的规则：</p>
<p>​	1.使用同一个包中的类时，不需要导包</p>
<p>​	2.使用java.lang包中的类时，不需要导包 </p>
<p>​	3.其他情况都需要导包</p>
<p>​	4.如果同时使用两个包中的同类名，需要用全类名 </p>
<p><strong>final:</strong></p>
<table>
<thead>
<tr>
<th>final修饰</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>方法</td>
<td>表明该方法是最终方法，不能被重写</td>
</tr>
<tr>
<td>类</td>
<td>表明该类是最终类，不能被继承</td>
</tr>
<tr>
<td>变量</td>
<td>叫做常量，只能被赋值一次</td>
</tr>
</tbody></table>
<p>常量：在实际开发中，常量一般作为系统的配置信息，方便维护，提高可读性</p>
<p>常量的命名规则：</p>
<p>​	单个单词：全部大写</p>
<p>​	多个单词：全部大写，单词之间用下划线隔开</p>
<p>细节：</p>
<p>final修饰的变量是基本类型：那么变量存储的数据值不能发生改变</p>
<p>final修饰的变量是引用类型：那么变量存储的地址值不能发生改变，对象内部的可以改变。</p>
<p><strong>权限修饰符：</strong></p>
<p>权限修饰符：是用来控制一个成员能够被访问的范围的。</p>
<p>可以修饰成员变量，方法，构造方法，内部类。</p>
<p>分类：有四种作用范围从小到大(private&lt;缺省&lt;protected&lt;public)</p>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">同一个类</th>
<th align="center">同一个包中其他类</th>
<th align="center">不同包下的子类</th>
<th align="center">不同包下的无关类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">private</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">空着不写</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<p>规则：实际开发中，一般只用private和public</p>
<p>成员变量私有</p>
<p>方法公开</p>
<p>特列：如果方法中的代码是抽取其他方法中共性代码，这个方法一般私有。</p>
<p><strong>代码块：</strong></p>
<p>局部代码块：写在方法里面的一对单独的{}，提前结束变量的生命周期。</p>
<p>构造代码块：写在成员位置的代码块，可以把多个构造方法中重复的代码抽取出来，在创建本类对象的时候会优先于构造方法执行。</p>
<p><strong>静态代码块</strong>：格式:static{}</p>
<p>​			特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次</p>
<p>​			使用场景：在类加载的时候，做一些数据初始化的时候使用。</p>
<p>​			应用场景：程序刚开始时进行数据的初始化</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK的安装与下载</title>
    <url>/2024/01/11/java%E5%9F%BA%E7%A1%80-JDK%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="JDK的安装与下载"><a href="#JDK的安装与下载" class="headerlink" title="JDK的安装与下载"></a>JDK的安装与下载</h1><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ol>
<li>网址 <a href="http://www.oracle.com/">www.oracle.com</a>  ,找到Products -&gt; Hardware and Software -&gt; Java-&gt;Download Java -&gt;Java archive（历史版本）&#x2F; Java Downloads(最新版本)-&gt;Windows系统下的 x64 Installer-&gt;点击下载</li>
</ol>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><ol>
<li><p>双击打开 点击下一步</p>
<p><img src="/../images/%E5%AE%89%E8%A3%85001.png"></p>
</li>
<li><p>选择更改安装路径(安装路径不要有中文，空格，和特殊符号)</p>
<p><img src="/../images/%E5%AE%89%E8%A3%85002.png"></p>
</li>
<li><p>安装成功,点击关闭</p>
<p><img src="/../images/%E5%AE%89%E8%A3%85003.png"></p>
</li>
<li><p>JDK的安装目录及解释</p>
<p><img src="/../images/%E5%AE%89%E8%A3%85004.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI图形化用户界面</title>
    <url>/2024/02/25/java%E5%9F%BA%E7%A1%80-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<p>GUI</p>
<p>​	JFrame:最外层的窗体</p>
<p>​	JMenuBar:最上层的菜单</p>
<p>​	JLabel:管理文字和图片的容器</p>
<p>​	IMageIcon</p>
<p>​	取消隐藏容器中居中的默认方式：setLayout(null)</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA的基础语法</title>
    <url>/2024/01/12/java%E5%9F%BA%E7%A1%80-JAVA%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JAVA的基础语法"><a href="#JAVA的基础语法" class="headerlink" title="JAVA的基础语法"></a>JAVA的基础语法</h1><ol>
<li><p>注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注释信息    --单行注释</span></span><br><span class="line"><span class="comment">/*注释信息*/</span>   --多行注释</span><br><span class="line"><span class="comment">/**注释信息**/</span> --文档注释</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字</p>
<p>关键字的字母全部<strong>小写</strong>，常用的代码编辑器，针对关键字<strong>有特殊的颜色标记</strong>，非常直观。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;  <span class="comment">//class:用于创建一个类，类是Java最基本的组成单元</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我爱你中国&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字面量</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">字面量类型</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数类型</td>
<td align="center">不带小数点的数字</td>
<td align="center">666，-88</td>
</tr>
<tr>
<td align="center">小数类型</td>
<td align="center">带小数点的数字</td>
<td align="center">13.14，52.1</td>
</tr>
<tr>
<td align="center">字符串类型</td>
<td align="center">用双引号括起来的内容</td>
<td align="center">“Hello”</td>
</tr>
<tr>
<td align="center">字符类型</td>
<td align="center">用单引号括起来的内容，内容只有一个</td>
<td align="center">‘A’,’0’,’我‘</td>
</tr>
<tr>
<td align="center">布尔类型</td>
<td align="center">布尔值，表示真假</td>
<td align="center">只有两个值：true,false</td>
</tr>
<tr>
<td align="center">空类型</td>
<td align="center">一个特殊的值，空值（不能直接打印，只能用字符串方式打印）</td>
<td align="center">null</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">‘\t’   (制表符)</td>
<td align="center">打印时，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个空格**(实现表格方式对齐)**，只跟\t前面的字符串有关系</td>
</tr>
<tr>
<td align="center">‘\r’</td>
<td align="center">在Windows 中表示换行且回到下一行的最开始位置。相当于Mac OS 里的 \r 的效果。<br/>      在Linux、unix 中只表示换行，但不会回到下一行的开始位置。</td>
</tr>
</tbody></table>
<ol start="4">
<li><p>变量</p>
<p>数据类型    变量名 &#x3D;  变量值</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK&amp;JRE&amp;JVM</title>
    <url>/2024/01/12/java%E5%9F%BA%E7%A1%80-JAVA%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E7%82%B9/</url>
    <content><![CDATA[<h1 id="JAVA语言的特点"><a href="#JAVA语言的特点" class="headerlink" title="JAVA语言的特点"></a>JAVA语言的特点</h1><ol>
<li>跨平台的原理：<ol>
<li>Java语言的跨平台是通过虚拟机(<strong>JVM</strong>)实现的</li>
<li>Java语言不是直接运行在操作系统里面的，而是运行在虚拟机中的</li>
<li>因此，针对于不同的操作系统，安装不同的虚拟机就可以了</li>
</ol>
</li>
<li><strong>JDK</strong> 和 <strong>JRE</strong><ol>
<li><strong>JDK</strong>(Java Development kit):Java开发工具包，由 <strong>JVM</strong>, <strong>核心类库</strong>，<strong>开发工具</strong>组成。</li>
<li><strong>JER</strong> (JAVA Runtime Environment):Java的运行环境，把<strong>JVM</strong>和核心类库以及<strong>运行时所用到的开发工具</strong>单独抽离出来所组成的。</li>
</ol>
</li>
</ol>
<p>​	 </p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>StringBuilder</title>
    <url>/2024/02/05/java%E5%9F%BA%E7%A1%80-StringBuilder/</url>
    <content><![CDATA[<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><strong>StringBuilder</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        s=s+<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据量较大时，字符串拼接耗时长</span></span><br></pre></td></tr></table></figure>

<p>1.为什么要学习StringBuilder?:<strong>提高字符串的操作效率</strong></p>
<p>   StringBuilder可以看成是一个容器，创建之后里面的<strong>内容是可变的</strong>,不像字符串一样是固定的。	</p>
<p>2.StringBuilder的构造方法</p>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public StringBuilder()</td>
<td align="center">创建一个空白可变字符，不含有任何内容</td>
</tr>
<tr>
<td align="center">public StringBuilder(String str)</td>
<td align="center">根据字符串的内容，来创建可变字符串对象</td>
</tr>
</tbody></table>
<p>3.StringBuilder常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder append(任意类型)</td>
<td>添加数据，并返回对象本身</td>
</tr>
<tr>
<td>public StringBuilder reverse()</td>
<td>反转容器中的内容</td>
</tr>
<tr>
<td>public int length()</td>
<td>返回长度(字符出现的个数)</td>
</tr>
<tr>
<td>public String toString()</td>
<td>通过toString()就可以实现把StringBuilder转换成String</td>
</tr>
</tbody></table>
<p><strong>StringBuilder是Java已经写好的类，Java在底层对它做了一些特殊处理，打印对象不是地址值而是属性值。</strong></p>
<p>链式编程：当我们在调用一个方法的时候，不需要用变量接收他的结果，可以继续调用其他方法。</p>
<p>使用StringBuilder的场景：</p>
<p>​	1.字符串的拼接</p>
<p>​	2.字符串的反转</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分支语句-if</title>
    <url>/2024/01/16/java%E5%9F%BA%E7%A1%80-if%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><ol>
<li><p>顺序结构</p>
<p>按照代码的先后顺序，从上往下依次执行的。</p>
</li>
<li><p>分支结构</p>
<p>if语句：</p>
<p>​     <strong>if-格式1</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">	语句体;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>if的注意点:</p>
<p>​      1.大括号的开头可以另起一行书写，但是建议写在第一行的末尾</p>
<p>​      2.在语句体中，如果只有一句代码，大括号可以省略不写。</p>
<p>​      3.如果对一个布尔类型的变量进行判断，不要用&#x3D;&#x3D;号。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;  <span class="comment">//判断的方式定义容易误写成赋值等号型，建议直接写布尔类型的变量。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;flag的值是true&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​      <strong>if-格式2:</strong>(二选一时使用)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">	语句体<span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	语句体<span class="number">2</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​     <strong>if-格式3</strong>:(多条件判断)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">	语句体<span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">	语句体<span class="number">2</span>;</span><br><span class="line"> &#125;</span><br><span class="line">.....</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">     语句体n+<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>StringJoiner</title>
    <url>/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/</url>
    <content><![CDATA[<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><p>拼接速度快，代码又简单的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    StringJoiner sj=<span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sj.add(arr[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造方法：</strong></p>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public StringJoiner(间隔符)</td>
<td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号。</td>
</tr>
<tr>
<td align="center">public StringJoiner(间隔符合，开始符号，结束符号)</td>
<td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号，开始符号，结束符号。</td>
</tr>
</tbody></table>
<p><strong>成员方法：</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringJoiner <strong>add(添加的内容)</strong></td>
<td>添加数据，并返回对象本身</td>
</tr>
<tr>
<td>public int <strong>length()</strong></td>
<td>返回长度(字符出现的个数)</td>
</tr>
<tr>
<td>public String <strong>toString()</strong></td>
<td>返回一个字符串(该字符串就是拼接之后的结果)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-static静态变量</title>
    <url>/2024/02/19/java%E5%9F%BA%E7%A1%80-static/</url>
    <content><![CDATA[<p><strong>static</strong>：表示静态，是Java中的一个修饰符，可以修饰成员方法，成员变量。</p>
<p>学生对象共享同一个老师</p>
<p>public static String treachName;</p>
<p>类名调用，对象调用均可</p>
<table>
<thead>
<tr>
<th>被static修饰的成员变量，叫做静态变量</th>
<th>被static修饰的成员方法，叫做静态方法</th>
</tr>
</thead>
<tbody><tr>
<td>特点：被这个类所有对象共享<br>调用方式:<br>               类名调用(推荐)<br>               对象名调用<br>静态变量是随着类的加载而加载的，优先于对象出现的<br><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219162328.png"></td>
<td>特点：多用在测试类和工具类，javabean类中很少会用。<br>调用方式:<br/>               类名调用(推荐)<br/>               对象名调用<br/><strong>工具类</strong>：帮助我们做一些事情，但是不描述任何事物的类<br>1.类名见名知意<br>2.私有化构造方法<br>3.方法都定义为静态的<br><strong>javabean类</strong>：用来描述一类事物的类。比如student，teacher.<br><strong>测试类</strong>：用来坚持其他类是否书写正确，带有main方法的类，是程序的入口</td>
</tr>
</tbody></table>
<p>那些属性可以被定义为静态—-具有共享性质的</p>
<p><strong>static的注意事项</strong></p>
<p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p>
<p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p>
<p>3.静态方法中<strong>没有</strong>this关键字</p>
<p><strong>this:表示当前方法调用者的地址值，这个this是由虚拟机赋值的</strong>，<strong>方法内调用成员变量的时候就可以区分不太的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">(Student <span class="built_in">this</span>)</span>&#123; <span class="comment">//Student this在非静态方法中是隐藏的</span></span><br><span class="line">	System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+teachernaem)<span class="comment">//this.name  this.age  this.teachername</span></span><br><span class="line">    <span class="comment">//调用其他方法</span></span><br><span class="line">    show2<span class="comment">//this.show2();</span></span><br><span class="line">&#125;</span><br><span class="line">s1.show1/s2.show2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为什么非静态方法设计没有this?</p>
<p>​	和某一个对象没有关系，共享思想。</p>
<p>静态(变量&#x2F;方法)随着类的加载而加载，非静态(变量&#x2F;方法)跟对象有关。</p>
<p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p>
<p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219220725.png"></p>
<p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221017.png"></p>
<p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p>
<p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221500.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>二维数组</title>
    <url>/2024/01/25/java%E5%9F%BA%E7%A1%80-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p><strong>应用场景</strong>:</p>
<p>需要把数据分组管理的时候，需要用到二维数组。</p>
<p><strong>初始化</strong>：</p>
<p><img src="/../images/%E5%88%9D%E5%A7%8B%E5%8C%96.png"></p>
<p>二维数组的内存图:</p>
<p><img src="/../images/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.jpg"></p>
<p>另外两种特殊的初始化:</p>
<p>（1）一位数组的长度灵活</p>
<p>​	int[ ] [ ] arr &#x3D; new int [2] [ ];</p>
<p>​	int[] arr1 &#x3D; {11,22};</p>
<p>​	int[] arr2 &#x3D; {44,55,66}; </p>
<p>（2）覆盖</p>
<p>​	int[ ] [ ] arr &#x3D; new int [2] [ 3];</p>
<p>​	int[] arr1 &#x3D; {11,22};</p>
<p>​	int[] arr2 &#x3D; {44,55,66}; </p>
<p>​	arr[0] &#x3D; arr1;</p>
<p>​	arr[1] &#x3D; arr2;</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>源码-反码-补码</title>
    <url>/2024/01/16/java%E5%9F%BA%E7%A1%80-%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码&#x2F;反码&#x2F;补码"></a>原码&#x2F;反码&#x2F;补码</h1><p>符号位：0正1负</p>
<p>计算机中数字的存储和计算都是以补码的形式进行的。</p>
<p><strong>原码</strong>：十进制数据的二进制表现形式，最左边的是符号位，0为正，1为负。</p>
<p>​	    利用原码对正数进行计算是不会有问题的，但是如果是<strong>负数计算，结果就会出错</strong>，实际运算的结果，跟我们预期的结果是相反的。</p>
<p><strong>反码</strong>：为了解决原码不能计算负数的问题而出现的。</p>
<p>计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0；</p>
<p>计算结果跨零时(-5+6&#x3D;0),有可能存在误差。因为在反码中0有两种表现形式，**+0**(0000 0000),-<strong>0</strong>(1111 1111)</p>
<p><strong>补码：</strong>屏蔽掉0的两种表现形式.使得+0和-0只有一种表现形式，实现方式是负数的反码加1.</p>
<p><img src="/../images/3-01.png" alt="原反补"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串相关类的底层原理</title>
    <url>/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="字符串相关类的底层原理："><a href="#字符串相关类的底层原理：" class="headerlink" title="字符串相关类的底层原理："></a>字符串相关类的底层原理：</h1><p><strong>1.字符串存储的内存原理</strong></p>
<p>​	直接赋值会复用字符串常量池</p>
<p>​	new出来不会复用，而是开辟一个新空间</p>
<p><strong>2.&#x3D;&#x3D;号比较的到底是什么？</strong></p>
<p>​	基本数据类型比较数据值</p>
<p>​	引用数据类型比较地址值</p>
<p><strong>3.字符串拼接的底层原理</strong></p>
<p>​	<strong>等号右边没有变量参与：</strong></p>
<p>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串次中的字符串。		</p>
<p>​	<strong>等号右边有变量参与：</strong></p>
<p>JDK8以前：系统底层会自动创建一个StringBuilder对象，然后再调用其append方法完成拼接。拼接后，再调用其toString方法转换为String类型，而toString方法的底层是直接new了一个字符串对象。</p>
<p>JDK8版本：系统会预估字符串拼接后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</p>
<p><strong>4.StringBuilder提高效率原理图</strong></p>
<p>所有要拼接的内容都会往String Builder中放，不会创建很多无用的空间，节约内存。</p>
<p>​	<img src="C:\Users\Administrator\Desktop\微信截图_20240207073607.png"></p>
<p><strong>5.StringBuilder源码分析</strong></p>
<p>默认创建一个长度为16的字节数组，添加的内容长度小于16，直接存，添加的内容大于16会扩容(原来的内容*2+2)，如果扩容之后还不够，以实际长度为准。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的CMD命令</title>
    <url>/2024/01/11/java%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E7%9A%84CMD%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="1-常用的CMD命令"><a href="#1-常用的CMD命令" class="headerlink" title="1. 常用的CMD命令"></a>1. 常用的CMD命令</h1><ol>
<li><p>Ctrl+R打开CMD命令窗口，<strong>同时可以按住ctrl键不松，拖动滚轮放大或缩小CMD窗口大小</strong></p>
</li>
<li><p><em>盘符名称+冒号</em> (C:,D:,E:),表示切换到指定盘符</p>
</li>
<li><p><em>dir</em> 查看当前路径下的内容，就是该目录列表(显示所有的文件和文件夹，<strong>包含隐藏的文件和文件夹</strong>)</p>
</li>
<li><p><em>cd 目录</em>  ， <strong>进入单极目录</strong>，(目录名可以写出部分内容，按住tab键关联出目录名称)</p>
</li>
<li><p><em>cd..</em> 回退到上一级目录，<strong>单级回退</strong></p>
</li>
<li><p>cd 目录1\目录2…     <strong>进入多级目录</strong></p>
</li>
<li><p>cd \    回退到盘符目录,<strong>多级回退</strong></p>
</li>
<li><p>cls 清屏(Clear screen)</p>
</li>
<li><p>exit  退出命令提示符窗口</p>
<h1 id="2-命令窗口打开应用程序"><a href="#2-命令窗口打开应用程序" class="headerlink" title="2. 命令窗口打开应用程序"></a>2. 命令窗口打开应用程序</h1></li>
<li><p>方法一: 进入应用程序所处的文件夹，输入程序的名称(qq.exe)</p>
</li>
<li><p>方法二: 把程序的路径记录在电脑的某个地方(<strong>环境变量</strong>)</p>
</li>
</ol>
<ul>
<li>环境变量的配置方式：<ul>
<li>打开<em>此电脑</em>-&gt;右键选择<em>属性</em>-&gt;左侧边栏选择<em>高级系统设置</em>-&gt;打开<em>系统属性</em>对话框-&gt;在<em>高级</em>选项卡中选择“<em>环境变量</em>”-&gt;选择系统变量(s)中的Path-&gt;.编辑路径信息</li>
<li>配置环境变量的作用：用于实现任意目录下打开指定文件。</li>
</ul>
</li>
</ul>
<p>​		</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的下载安装&amp;相关设置</title>
    <url>/2024/01/15/java%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="IDEA的下载与安装"><a href="#IDEA的下载与安装" class="headerlink" title="IDEA的下载与安装"></a>IDEA的下载与安装</h1><ol>
<li>下载安装</li>
</ol>
<p>把代码编写，编译，执行，调试等多种功能综合在一起。</p>
<p><a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></p>
<p>拼多多买个授权码。</p>
<ol start="2">
<li>结构介绍</li>
</ol>
<p>IDEA的项目结构：</p>
<p>​	项目(project)：以微信项目为例，整个微信可以看作一个项目。</p>
<p>​		模块(module)：微信的四大功能键(微信，通讯录，发现，我)，是相互独立的四个模块。</p>
<p>​			包(package)：文件夹，在模块里新建很多的包，把相同功能的代码放在同一个包中方便管理。</p>
<p>​       			类 (class)：在类里面编写代码</p>
<ol start="3">
<li><p>扩展设置</p>
<p>修改主题：file-&gt;Settings-&gt;Appearance&amp;Behavior(Appearance)-&gt;Theme。</p>
<p>设置字体：file-&gt;Settings-&gt;Editor-&gt;Font-&gt;可以设置这个字体，大小。</p>
<p>设置注释的颜色：file-&gt;Settings-&gt;Editor-&gt;Color Scheme-&gt;Language Defaults-&gt;Comments-&gt;单行注释(Line comment)&#x2F;多行注释(Block comment)的设置-&gt;Foreground进行设置。</p>
<p>自动导包的设置：file-&gt;Settings-&gt;Editor-&gt;General-&gt;Auto Import-&gt;Java下的两个带？的复选框选中。</p>
<p>自动提示不区分大小写设置:file-&gt;Settings-&gt;Editor-&gt;General-&gt;Code Completion-&gt;取消Match case的勾。</p>
</li>
<li><p>项目和模块操作</p>
<p>类的相关操作：</p>
<p>​	新建类：右键指定包然后新建类</p>
<p>​	删除类：右键指定类然后delete</p>
<p>​	修改类:   右键指定类-&gt;Refactor-&gt;Rename,文件名类名同时修改</p>
<p>模块的操作：</p>
<p>​	新建模块：</p>
<p>​	删除模块：</p>
<p>​	修改模块：</p>
<p>​	导入模块：</p>
<p>项目的操作：</p>
<p>​	关闭项目：File-&gt;Close Project</p>
<p>​	新建项目:  Empty Project</p>
<p>​	打开项目：</p>
<p>​	修改项目：</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2024/01/18/java%E5%9F%BA%E7%A1%80-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5(for&amp;while)/</url>
    <content><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化语句只执行一次，判断语句为true，循环继续，判断语句为false，循环结束。</p>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">	循环体语句;</span><br><span class="line">	条件控制语句;</span><br><span class="line">&#125;</span><br><span class="line">循环下面的其他语句;</span><br></pre></td></tr></table></figure>

<h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><pre><code>1. 运行规则都是一样的
1. for循环中，控制循环的变量，因为归属for循环的语法结构中 在for循环结束中，就不能再次被访问到了。**（已知循环次数或者范围）**
1. while循环中，控制循环的变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。**(不知道循环次数和范围，只知道循环的结束条件 )**
</code></pre>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>方法的相关介绍</title>
    <url>/2024/01/21/java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li><p>什么是方法</p>
<p>方法：程序中最小的执行单元。</p>
<p>场景：重复的代码，具有 独立功能的代码可以抽取到方法中。</p>
<p>作用：提高代码的复用性&amp;提高代码的可维护性。</p>
</li>
<li><p>方法的格式</p>
<p>方法不调用就执行；</p>
<p>方法间是平级关系，不能互相嵌套定义；</p>
<p>方法的编写顺序和执行顺序无关(与调用顺序有关)；</p>
<p>方法的返回值类型是void，表示该方法没有返回值，如果要编写return，后面不能跟具体的数据。</p>
<p>return语句的下面，不能编写代码，因为永远执行不到，属于无效代码。</p>
<p>​	方法没有返回值：可以省略不写，如果书写，表示结束方法。</p>
<p>​	方法有返回值：必须要写，表示结束方法<strong>和</strong>返回结果。</p>
<p>方法的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.最简单的方法定义和调用格式</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">    方法体(就是打包起来的代码)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//掉头</span></span><br><span class="line">方法名();</span><br><span class="line"><span class="comment">//2带参的方法定义和调用格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数<span class="number">1</span>,参数<span class="number">2</span>,.....)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line">方法名(实参)</span><br><span class="line"><span class="comment">//方法调用时，参数的数量与类型必须与方法定义中小括号里面的变量一一对应，否则程序会报错</span></span><br><span class="line"><span class="comment">//3.带返回值方法的定义和调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">    直接调用：方法名(实参);</span><br><span class="line">    赋值调用：整数类型 变量名 = 方法名(实参);</span><br><span class="line">    输出调用：System.out.println(方法名(实参));</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法的重载</p>
<p>概念：在<strong>同一个类</strong>中，定义了多个<strong>同名的方法</strong>，这些同名的方法具有<strong>同种的功能</strong>，每一个方法具有<strong>不同的参数类型</strong>或<strong>参数个数</strong>(个数，类型，顺序)，这些同名的方法，就构成了重载关系，与返回值无关。</p>
</li>
<li><p>方法的内存</p>
<p>方法被调用之后就会进栈执行</p>
<p><strong>基本数据类型&amp;引用数据类型</strong>：</p>
<p>​	基本数据类型变量中存储的是真实的数据。（数据值是存储在自己的空间中）</p>
<p>​	只要是new出来的都是引用数据类型(数组)  （数据值存储在其他空间，自己空间存储的是地址值）</p>
<p><img src="/../images/Screenshot_20240122_195710.jpg"></p>
</li>
</ol>
<p>​	<strong>方法传递基本数据类型的内存原理</strong></p>
<p>​	传递基本数据类型(4类8种)时，传递的是真实的数据，形参的改变，不影响实际参数的值。</p>
<p>​	传递引用数据类型(int[] arr)时，传递的是地址值，形参的改变 ，影响的是地址的值。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA的数据类型-标识符-键盘录入</title>
    <url>/2024/01/14/java%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&amp;%E6%A0%87%E8%AF%86%E7%AC%A6&amp;%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5/</url>
    <content><![CDATA[<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h1><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="left">关键字</th>
<th align="left">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数</td>
<td align="left">byte<br/>short<br/>int<br/>long</td>
<td align="left">-128~127(byte)</td>
</tr>
<tr>
<td align="center">浮点数</td>
<td align="left">float<br/>double</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">字符</td>
<td align="left">char</td>
<td align="left"></td>
</tr>
<tr>
<td align="center">布尔</td>
<td align="left">boolean</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>如果要定义long类型的变量，在数据值的后面需要加一个L作为后缀。float类型变量，数据值也需要加一个F作为后缀。</p>
<p>整数和小数取值范围大小关系：double&gt;float&gt;long&gt;int&gt; short&gt;byte</p>
<h1 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h1><p>定义：自定义的类，方法，变量的名字。</p>
<p>规则： </p>
<p>   硬性规则:</p>
<p>​		由数字，字母，下划线(_)和美元$符组成，但是<strong>不能以数字开头</strong>，不能是关键字，<strong>区分大小写</strong>。(关键字是全部小写的)</p>
<p>   软性建议:	</p>
<p>​		小驼峰命名法: <strong>方法</strong>，<strong>变量</strong></p>
<p>​				标识符是一个单词的时候，全部小写，例如:name.</p>
<p>​				标识符由对个单词组成的时候，第一个单词首字母小写，其他单词首字母大写,例如：firstName.</p>
<p>​		大驼峰命名法: <strong>类名</strong></p>
<p>​				标识符是一个单词的时候，首字母大写，例如：Student.</p>
<p>​				标识符由多个单词组成的时候，每个单词的首字母大写，例如：GoodStudent.</p>
<h1 id="3-键盘录入"><a href="#3-键盘录入" class="headerlink" title="3.键盘录入"></a>3.键盘录入</h1><p>Scanner类: 接收键盘输入的<strong>整数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//步骤一：导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//步骤二：创建对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//步骤三：接收数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();   <span class="comment">//除了i可以修改，其他的均不能修改</span></span><br></pre></td></tr></table></figure>

<p>多次录入–不知道录入次数(例如猜随机数)、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;		</span><br><span class="line">            Scanner sc= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;输入你要猜的数字:&quot;</span>);</span><br><span class="line">            <span class="type">int</span> number2= sc.nextInt();</span><br><span class="line">            <span class="comment">//3.判断两个数字给出不同的提示</span></span><br><span class="line">            <span class="comment">//猜的数字大了，提示大了</span></span><br><span class="line">            <span class="comment">//猜的数字小了，提示小了</span></span><br><span class="line">            <span class="comment">//猜的数字正确，提示对了</span></span><br><span class="line">            <span class="keyword">if</span> (number1&lt;number2)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜数大了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number1&gt;number2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜数小了&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数字相等&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>第一套体系：</p>
<p>​	nextInt( ):接收整数</p>
<p>​	nextDouble( ):接收小数</p>
<p>​	next( ):接收字符串</p>
<p>​        特点：遇到空格，制表符，回车就停止接收，这些符号后的数据本次就不会接收(空格后的内容进入内存用于下一次接收)。</p>
<p>第二套体系：</p>
<p>​	nextLine( ):接收字符串</p>
<p>​	特点:可以接收空格，制表符，遇到回车才停止接收数据。</p>
<p>弊端:先用nextInt,再用nextLine会导致下面的nextLine接收不到数据。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>无限循环和跳转控制语句</title>
    <url>/2024/01/19/java%E5%9F%BA%E7%A1%80-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h1><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);<span class="comment">//常用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>无限循环的下面不能在写其他代码了</p>
<h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><p>在循环的过程中，跳转到其他语句上执行</p>
<p>break:结束整个循环。</p>
<p>continue:结束本次循环，继续下次循环。</p>
<p>&lt;补充:&gt;return:其实跟循环没有什么关系，跟方法有关，表示1结束方法，2返回结果。如果方法执行到了return，那么整个方法全部结束，里面的循环也随之结束。 </p>
<p><img src="/../images/005.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组相关介绍</title>
    <url>/2024/01/20/java%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0&amp;%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h1><p>数组是指一种容器，可以用来存储<strong>同种类型</strong>的多个值，数组容器再存储数据的时候，需要结合隐式转换考虑。</p>
<p><strong>定义</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式1:</span></span><br><span class="line">数据类型 [ ] 数组名</span><br><span class="line"><span class="comment">//格式2:</span></span><br><span class="line">数据类型 数组名[ ]</span><br></pre></td></tr></table></figure>

<p><strong>初始化</strong>：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</p>
<ol>
<li><p>静态初始化： 数据类型[ ] 数组名 &#x3D; new 数据类型[ ]{元素1，元素2，元素3…};</p>
<p><strong>简写样式： 数据类型[ ] 数组名 &#x3D; {元素1，元素2，元素3…};</strong></p>
</li>
<li><p>动态初始化:初始化时只指定数组长度，由系统为数组分配初始值。</p>
<p><strong>格式:数据类型[ ] 数组名 &#x3D; new 数据类型[数组长度]；</strong></p>
<p>在创建的时候，由我们自己指定数组的长度，有虚拟机给出默认的初始化值。</p>
<p>数组默认初始化值的规律:</p>
<p>​	整数类型的默认初始值为0</p>
<p>​	小数类型的默认初始值为0.0</p>
<p>​	字符类型的默认初始值为’&#x2F;u0000’空格</p>
<p>​	布尔类型的默认初始值为false</p>
<p>​	引用数据类型的默认初始值为null</p>
</li>
<li><p>动态初始化和静态初始化的区别</p>
<table>
<thead>
<tr>
<th align="center">动态初始化</th>
<th align="center">静态初始化</th>
</tr>
</thead>
<tbody><tr>
<td align="center">只明确元素个数，不明确具体数值，推荐使用动态初始化</td>
<td align="center">需求中已经明确了要操作的具体数据，直接静态初始化即可</td>
</tr>
</tbody></table>
</li>
</ol>
<h1 id="2-数组的地址值和元素访问"><a href="#2-数组的地址值和元素访问" class="headerlink" title="2.数组的地址值和元素访问"></a>2.数组的地址值和元素访问</h1><p><strong>地址值</strong>：表示数组在内存中的位置([I@4eec7777)</p>
<p>​		[ :表示当前是一个数组</p>
<p>​		I :表示当前数组里面的元素都是int类型</p>
<p>​	       @:表示一个间隔符号。固定格式</p>
<p>​               4eec7777:数组真正的地址值(16进制)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[I@<span class="number">4</span>eec7777</span><br></pre></td></tr></table></figure>

<p><strong>数组元素访问</strong>:</p>
<p>​		格式: 数组名[索引]，数组的索引<strong>从0开始</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h1 id="3-数组的遍历"><a href="#3-数组的遍历" class="headerlink" title="3.数组的遍历"></a>3.数组的遍历</h1><p>数组遍历:将数组中所有的内容取出来，取出来之后可以进行打印，判断，求和…………</p>
<p>遍历是指取出数据的整个过程，不要局限的理解为，遍历就是打印。</p>
<p>获取数组的长度:<strong>数组名.length</strong></p>
<p>拓展：Idea中自动地快速生成数组的遍历方式：数组名.fori回车</p>
<h1 id="4-数值中常见问题"><a href="#4-数值中常见问题" class="headerlink" title="4.数值中常见问题"></a>4.数值中常见问题</h1><p>1.索引越界问题**(最小索引:0,最大索引:数组长度-1)**</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">50</span> out of bounds <span class="keyword">for</span> length <span class="number">50</span></span><br><span class="line">	<span class="built_in">at</span> com.itheima.array.ArrayDemo07.main(ArrayDemo07.java:<span class="number">10</span>)</span><br><span class="line">// Exception(异常),ArrayIndexOutOfBoundsException(数组索引超出范围异常)--访问了不存在的索引</span><br></pre></td></tr></table></figure>

<h1 id="5-数组的内存图"><a href="#5-数组的内存图" class="headerlink" title="5.数组的内存图"></a>5.数组的内存图</h1><table>
<thead>
<tr>
<th align="left">JAVA内存空间</th>
</tr>
</thead>
<tbody><tr>
<td align="left">栈：方法运行时使用的内存，比如main方法运行，进行方法栈中执行。</td>
</tr>
<tr>
<td align="left">堆：存储对象或者数组，new来创建的，都存储在堆内存</td>
</tr>
<tr>
<td align="left">方法区：存储可以运行的class文件</td>
</tr>
<tr>
<td align="left">本地方法栈：JVM在使用操作系统功能时使用，与开发无关</td>
</tr>
<tr>
<td align="left">寄存器：给CPU使用，和开发无关</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>无限循环和跳转控制语句</title>
    <url>/2024/01/22/java%E5%9F%BA%E7%A1%80-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%92%8C%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h1><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);<span class="comment">//常用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>无限循环的下面不能在写其他代码了</p>
<h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><p>在循环的过程中，跳转到其他语句上执行</p>
<p>break:结束整个循环。</p>
<p>continue:结束本次循环，继续下次循环。</p>
<p>&lt;补充:&gt;return:其实跟循环没有什么关系，跟方法有关，表示1结束方法，2返回结果。如果方法执行到了return，那么整个方法全部结束，里面的循环也随之结束。 </p>
<p><img src="/../images/005.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>环境变量的配置</title>
    <url>/2024/01/12/java%E5%9F%BA%E7%A1%80-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h1><ol>
<li><h5 id="java已经自动配置好了java-javac-javaw-jshell-有且仅有这四种，想要配置其他的环境变量需要手动配置（C-Program-Files-Common-Files-Oracle-Java-javapath）"><a href="#java已经自动配置好了java-javac-javaw-jshell-有且仅有这四种，想要配置其他的环境变量需要手动配置（C-Program-Files-Common-Files-Oracle-Java-javapath）" class="headerlink" title="java已经自动配置好了java,javac,javaw,jshell,有且仅有这四种，想要配置其他的环境变量需要手动配置（C:\Program Files\Common Files\Oracle\Java\javapath）"></a>java已经自动配置好了java,javac,javaw,jshell,有且仅有这四种，想要配置其他的环境变量需要手动配置（C:\Program Files\Common Files\Oracle\Java\javapath）</h5><p><img src="/../images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F004.png"></p>
</li>
<li><p>手动配置</p>
<ol>
<li><p>法1：在Path里直接添加到java的路径(bin之前的路径)</p>
<p><img src="/../images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F001.png"></p>
</li>
<li><p>法2-01：新建变量名 JAVA_HOME和变量值java的路径(bin之前的路径)</p>
<p><img src="/../images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F002.png"></p>
</li>
</ol>
</li>
</ol>
<p>​		法2-02： 引用JAVA_HOME变量</p>
<p>​		<img src="/../images/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F003.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>生成随机数Random</title>
    <url>/2024/01/20/java%E5%9F%BA%E7%A1%80-%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0Random/</url>
    <content><![CDATA[<h1 id="生成随机数Random"><a href="#生成随机数Random" class="headerlink" title="生成随机数Random"></a>生成随机数Random</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导包---Random这个类在哪里?</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random<span class="comment">//导包的动作必须出现在类定义的上边</span></span><br><span class="line"><span class="comment">//2.创建对象---表示我要开始用Random这个类了</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();<span class="comment">//这个格式里面，只有r是变量名，可以变，其他的都不允许变</span></span><br><span class="line"><span class="comment">//3.生成随机数--真正开始干活了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围)<span class="comment">//这个格式里面，只有number是变量名，可以变，其他的都不允许变</span></span><br></pre></td></tr></table></figure>

<p><em>在3.小括号中，书写的是生成随机数的范围，这个范围<strong>一定是从0开始</strong>，到这个数减1结束(包头不包尾，包左不包右)</em></p>
<p><em>生成任意数到<strong>任意数之间</strong>的随机数:</em><br>    1.让这个范围头尾都减去一个值，让这个范围从0开始<br>    2.尾巴＋1<br>    3.最终结果，再加上第一步减去的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成7~15之间的值</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> number= r.nextInt(<span class="number">9</span>)+<span class="number">7</span>;</span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>编译和运行</title>
    <url>/2024/01/12/java%E5%9F%BA%E7%A1%80-%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h1><ol>
<li><p>编译和运行的应用程序</p>
<p><img src="/../images/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C001.png"></p>
</li>
<li><p>如何操作</p>
<p><img src="/../images/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C002.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>跳出多重循环</title>
    <url>/2024/02/11/java%E5%9F%BA%E7%A1%80-%E8%B7%B3%E5%87%BA%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>loop:while (true) {<br>Scanner sc &#x3D; new Scanner(System.in);<br>System.out.println(“请输入您的选择:”);<br>String result &#x3D; sc.next();<br>switch (result){<br>    case “5”-&gt; {<br>                    System.out.println(“退出”);<br>                    break loop;<br>                }<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">停止虚拟机运行</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">while (true) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入您的选择:&quot;);</span><br><span class="line">String result = sc.next();</span><br><span class="line">switch (result)&#123;</span><br><span class="line">	case &quot;5&quot;-&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;退出&quot;);</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的运算符</title>
    <url>/2024/01/15/java%E5%9F%BA%E7%A1%80-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol>
<li><p>算术运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">除(取商)</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
</tr>
</tbody></table>
<p>** 如果在计算的时候有小数参与，结果有可能不精确。</p>
<p>** &#x2F; 运算，整数参与运算，结果只能得到整数；小数参与运算，结果有可能不精确。</p>
<p>** %运算的应用场景：A是否可以被B整除；A是否为偶数(A%2)；</p>
<p><em>隐式转换</em>：取值范围<strong>小</strong>的数据<strong>转换成</strong>取值范围<strong>大</strong>的数据。（byte&lt;short&lt;int&lt;long&lt;float&lt;double）</p>
<p>​		   byte,short,char三种类型的数据在运算的时候，都会<strong>自动先提升为int</strong>,然后再进行运算</p>
<p><em>强制转换</em>：取值范围<strong>大</strong>的数据<strong>转换成</strong>取值范围<strong>小</strong>的数据。格式：目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据</p>
<p>** ：有可能会导致数据不准确；</p>
<p><em>字符串相加</em>：当“+”操作中出现字符串时，这个“+”是字符串连接符，而不是算术运算符。会将前后的数据进行拼接，并产生一个新的字符串。(连续加时从左到右逐个执行)</p>
<p><em>字符相加</em>：当字符+字符(字符+数字)时，会把字符通过<strong>ASCII码表</strong>查询到对应的数字再进行计算。</p>
</li>
<li><p>自增自减运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">++</td>
<td align="center">加</td>
<td align="center">变量的值加1</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">减</td>
<td align="center">变量的值减1</td>
</tr>
</tbody></table>
<p>单独成行时：++，–无论是放在变量的前面还是后面，单独写一行结果都是一样的。</p>
<p>参与运算时：先用后加，先加后用；</p>
</li>
<li><p>赋值运算符</p>
<p>&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;。</p>
<p>(扩展的赋值运算符底层隐藏了强制类型转换，不用再强转了)</p>
</li>
<li><p>关系运算符</p>
<p>&#x3D;&#x3D;，!&#x3D;， &gt;,  &gt;&#x3D;  ,  &lt;  ,&lt;&#x3D;</p>
<p>（关系运算符的结果都是布尔类型，要么true，要么false）</p>
</li>
<li><p>逻辑运算符</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;</strong></td>
<td align="center">逻辑与</td>
<td align="center">并且 ，两边都为真，结果才为真</td>
</tr>
<tr>
<td align="center"><strong>|</strong></td>
<td align="center">逻辑或</td>
<td align="center">或则，两边都为假，结果才是假</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">逻辑异或</td>
<td align="center">相同为false，不同为true</td>
</tr>
<tr>
<td align="center"><strong>!</strong></td>
<td align="center">逻辑非</td>
<td align="center">取反</td>
</tr>
</tbody></table>
<p>短路逻辑运算符：&amp;&amp;  ||</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>短路与</td>
<td>结果和&amp;相同，但是有短路效果</td>
</tr>
<tr>
<td>||</td>
<td>短路或</td>
<td>结果和|相同，但是有短路效果</td>
</tr>
</tbody></table>
<p>&amp; | ，无论左边true false ，右边都要执行。</p>
<p>&amp;&amp; ||，如果左边能确定整个表达式的结果，右边不执行。</p>
<p>&amp;&amp;：左边为false，右边不管是真是假，整个表达式的结果一定为false</p>
<p>||： 左边为true，右边不管是真是假，整个表达式的结果一定为true</p>
</li>
<li><p>三元运算符</p>
<p>格式：关系表达式 ？表达式1：表达式2</p>
<p>结果必须被使用，赋值给变量或者直接打印出来。</p>
</li>
<li><p>运算符的优先级</p>
<p>()优先于所有</p>
</li>
</ol>
<p>​       </p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>集合ArrayList</title>
    <url>/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/</url>
    <content><![CDATA[<h1 id="集合ArrayList"><a href="#集合ArrayList" class="headerlink" title="集合ArrayList"></a>集合ArrayList</h1><p>长度可变的容器(自动扩容)</p>
<p>集合不能<strong>直接</strong>存基本数据类型–》包装类</p>
<ol>
<li><p>为什么要有集合?</p>
<p>ArrayList:</p>
<p>构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;泛型&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;可省略&gt;();</span><br><span class="line"><span class="comment">//此时我们创建的是ArrayList的对象，而ArrayList是Java已经写好的一个类，这个类在底层做了一些处理打印对象不是地址值，而是集合中存储数据的内容，在展示的时候会拿[]把所有的数据进行包裹。</span></span><br></pre></td></tr></table></figure>

<p>成员方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E,e)</td>
<td>添加元素，返回值表示是否添加成功</td>
</tr>
<tr>
<td>boolean remove(E,e)</td>
<td>删除指定元素，返回值表示是否删除成功</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>删除指定索引的元素，返回被删除元素</td>
</tr>
<tr>
<td>E set(int index,E,e)</td>
<td>修改指定索引下的元素，返回原来的元素</td>
</tr>
<tr>
<td>E get(int index)</td>
<td>获取指定索引的元素</td>
</tr>
<tr>
<td>int size()</td>
<td>集合的长度，也就是集合中元素的个数</td>
</tr>
</tbody></table>
</li>
<li><p>泛型：限定集合中存储数据的类型，集合不能<strong>直接存储</strong>基本数据类型，可以存储引用数据类型。</p>
</li>
<li><p>基本数据类型对应的包装类</p>
<table>
<thead>
<tr>
<th align="center">byte</th>
<th align="center">Byte</th>
</tr>
</thead>
<tbody><tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center"><strong>Character</strong></td>
</tr>
<tr>
<td align="center">int</td>
<td align="center"><strong>Integer</strong></td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
</li>
<li><p>集合返回多个对象</p>
<p>技巧：如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回(集合&#x2F;数组)</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2024/01/25/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>面向对象</p>
<p>​	面向对象介绍:</p>
<p>​		面向:拿，找。</p>
<p>​		对象:能干活的东西。</p>
<p>​		面向对象编程:拿东西过来做对应的事情。</p>
<ol>
<li><p><strong>设计对象并使用</strong></p>
<ol>
<li><p>类和对象</p>
<p>类(设计图):是对象共同特征的描述(类名首字母建议大写，需要见名知意，驼峰命名)；</p>
<p>对象:是真实存在的具体东西(在Java中，必须先设计类，才能获得对象)</p>
<p><strong>如何得到对象:</strong>	</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    <span class="number">1.</span>成员变量(代表属性的，一般是名词)<span class="comment">//完整定义格式:修饰符 数据类型 变量名称= 初始化值;一般无需指定初始化值(创建对象后									再赋值),存在默认值，修饰符一般不写</span></span><br><span class="line">    <span class="number">2.</span>成员方法(代表行为的，一般是动词)</span><br><span class="line">&#125;</span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名( );</span><br></pre></td></tr></table></figure>

<p><strong>如何使用对象:</strong></p>
<p>​	访问属性:对象名.成员变量</p>
<p>​	访问行为:对象名.方法名(…)</p>
<p><strong>类的注意事项</strong>:</p>
<p>开发中的设计</p>
<ol>
<li><p>用来描述一类事物的类，专业就叫:<strong>javabean类</strong>。在javabean类中，是不写main方法的</p>
</li>
<li><p>在以前，编写main方法的类，叫做<strong>测试类</strong>。可以在测试类中创建javabean类的对象并进行赋值调用。</p>
</li>
<li><p>一个<strong>Java文件</strong>中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名，实际开发中建议还是一个文件定义一个class类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>封装</strong></p>
<p>告诉我们，如何正确设计对象的属性和方法。</p>
<p>原则:对象代表什么，就得封装对应的数据，并提供数据对应的行为。（　张三　杀　李四（生死状态））</p>
<p><strong>private</strong>关键字:是一个权限修饰符,可以修饰成员(成员变量和成员方法).	 	</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.数据安全问题(p.age=-99)</span></span><br><span class="line"> 被<span class="keyword">private</span>修饰的成员只能在本类中才能访问**(*解决了数据安全问题*).</span><br><span class="line">     <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//2.实现正确的数据可以赋值,错误的无法赋值-通过get set方法赋值,过滤通道</span></span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被其他的类调用和访问</span></span><br><span class="line"><span class="comment">//在测试类中调用赋值</span></span><br><span class="line">GirlFriend gf1=<span class="keyword">new</span> <span class="title class_">GirlFriend</span>();</span><br><span class="line">gf1.setName(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">gf1.setAge(<span class="number">19</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> gf1.getName();</span><br><span class="line"><span class="type">int</span> age=gf1.getAge();</span><br></pre></td></tr></table></figure>

<p><strong>this关键字</strong>:</p>
<p>成员变量(方法外,类里面)和局部变量(方法里).<strong>就近原则</strong>,想用成员变量需加this.</p>
<p>this关键字的作用可以区别成员变量和局部变量.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>构造方法:</strong></p>
<p>格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    修饰符 类名(参数) &#123;</span><br><span class="line">        方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//空参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123; <span class="comment">//创建对象调用实参构造:Student s = new Student(&quot;AA&quot;,19);</span></span><br><span class="line">        <span class="comment">//全参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br><span class="line"><span class="comment">//全参构造,在方法里面就可以给所有的成员变量赋值,不用再用set方法进行赋值了,简化代码.</span></span><br><span class="line"><span class="comment">//空参的构造方法,利用空参构造创建对象,成员变量默认初始化值.,</span></span><br><span class="line"><span class="comment">//如果我们自己没写任何构造方法,那么虚拟机会给我们加一个空参构造方法;如果已经定义了带参构造方法,系统将不会提供默认的无参构造方法.</span></span><br><span class="line"><span class="comment">//构造方法的重载,带参构造方法和无参构造方法,两者方法名相同,但是参数不同,这叫做构造方法的重载.</span></span><br><span class="line"><span class="comment">//执行时机:构造方法不能手动调用,在创建对象的时候由虚拟机调用,每创建一次对象就调用一次构造方法.</span></span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br></pre></td></tr></table></figure>

<p>特点:方法名和类名相同,大小写也要一致;</p>
<p>​	没有返回值类型,连void都没有;</p>
<p>​	没有具体的返回值(不能由return带回结果数据);</p>
<p>作用:在创建对象的时候由<strong>虚拟机自动调用</strong>构造方法给成员变量进行初始化(赋值)的.</p>
<p>建议:实际开发中,空参构造和有参构造都会写上,因为有时不完全知道属性值</p>
</li>
<li><p><strong>标准JavaBean</strong></p>
<ol>
<li>类名需要见名知意,驼峰命名</li>
<li>成员变量使用private修饰</li>
<li>提供至少两个构造方法(无参构造方法&amp;全参构造方法)</li>
<li>成员方法:提供每一个私有化的成员变量对应的setXxx()&#x2F;getXxx()方法,如果还有其他行为,也需要写上</li>
</ol>
</li>
<li><p><strong>对象内存图</strong></p>
<p>方法区:字节码文件加载时进入的内存</p>
<p>栈内存:方法运行时所进入的内存，变量也在这里</p>
<p>堆内存:new出来的东西会在这块内存中开辟空间并产生地址</p>
<p><strong>一个对象的内存图</strong>:</p>
<p>Student s &#x3D; new Student();</p>
<p>​	1.加载class文件(方法区临时存储main()方法，虚拟机调用main()方法，main()方法加载进栈)</p>
<p>​	2.申明局部变量</p>
<p>​	3.在堆内存中开辟一个空间</p>
<p>​	4.默认初始化</p>
<p>​	5.显示初始化</p>
<p>​	6.构造方法的初始化</p>
<p>​	7.将堆内存中的地址值赋值给左边的局部变量</p>
<p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1.png"></p>
<p><strong>多个对象的内存图</strong>:</p>
<p>对个对象时class对象不用重新加载</p>
<p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A12.png"></p>
<p><strong>两个变量指向同一个对象内存图</strong>:</p>
<p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240127202759.png"></p>
<p><strong>this的内存原理</strong>:</p>
<p>作用：变量得就近原则，区分局部变量和成员变量。</p>
<p>本质：所在<strong>方法调用者的地址值</strong></p>
<p>​	</p>
<p><strong>基本数据类型和引用数据类型的区别</strong>:</p>
<pre><code> 基本数据类型：数据值是存储在自己的空间中(栈)，赋值给其他变量，也是赋得真实得值。
</code></pre>
<p>​	 引用数据类型：数据值 是存储在其他空间中，自己空间中存储得是地址值，赋值给其他变量，赋得是地址值</p>
<p><strong>局部变量和成员变量的区别</strong>:</p>
<p>​	成员变量：类中方法外的变量</p>
<p>​	局部变量：方法中的变量，（栈里面的局部变量没有默认值，是要给个初始化值才能用的）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-内部类</title>
    <url>/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p>内部类–是类的五大成员之一(属性，方法，构造方法，内部类)，在一个类的里面，在定义一个类。</p>
<p><strong>应用场景</strong>：</p>
<p>​	需求：写一个javabean类描述汽车</p>
<p>​	属性：汽车的品牌，车龄，颜色，发动机的品牌，使用年限。(汽车和发动机属于两个类，又有联系)</p>
<p>内部类表示的事物是外部类的一部分，内部类单独出现没有任何意义</p>
<p><strong>访问特点</strong>：</p>
<p>​	内部类可以直接访问外部类的成员，包括私有&#x2F;&#x2F;Outer.this.变量名</p>
<p>​	外部类要访问内部类的成员，必须创建对象</p>
<p><strong>成员内部类</strong>：</p>
<p>​	如何书写？：写在成员位置(类中方法外)，属于外部类的成员。</p>
<p>​				成员内部类可以被一些修饰符所修饰，比如：private(本类)，默认(本包)，protected(本包其他类，其他包的子类)，public(所有地方)，static(静态的)等。</p>
<p>​				在成员内部类里面，JDK16之前不能定义<strong>静态变量</strong>，JDK16开始才可以定义<strong>静态变量</strong>。</p>
<p>​	如何创建成员内部类的对象？：</p>
<p>​			 <strong>方式一</strong>：在外部类中编写方法，对外提供内部类的对象</p>
<p>​			&#x2F;&#x2F;使用场景：用在private修饰内部类的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> o.getInstance();<span class="comment">//获取内部类对象</span></span><br></pre></td></tr></table></figure>

<p>​			 <strong>方式二</strong>：直接创建格式：外部类名.内部类名  对象名 &#x3D; 外部类对象.内部类对象；范例：Outer.Inner oi &#x3D; new Outer().new Inner();	   &#x2F;&#x2F;使用场景：不是用private修饰内部类的</p>
<p><strong>静态内部类</strong>：静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建外部类的对象</p>
<p>​	<strong>创建静态内部类对象的格式</strong>：外部类名.内部类名  <em>对象</em>名 &#x3D;  new  外部类名.内部类名( );</p>
<p>​	<strong>调用非静态方法的格式</strong>：先创建对象，用<em>对象</em>调用</p>
<p>​	<strong>调用静态方法的格式</strong>：外部类名.内部类名.方法名();</p>
<p>​	静态内部类是一种特殊的成员内部类</p>
<p><strong>局部内部类</strong>：1.将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量，</p>
<p>​		       2.外界是无法直接使用，需要在方法内部创建对象并使用。</p>
<p>​		       3.该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p>
<p><strong>匿名内部类</strong>(重点)：本质就是隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="keyword">new</span> 类名或接口名()&#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//包含了继承或实现，方法重写，创建对象</span></span><br><span class="line"><span class="comment">//整体就是一个类的子类对象或者接口的实现类对象</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240225202806.png" alt="接口"></p>
<p>使用场景：当方法的参数是接口或类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-抽象类和抽象方法</title>
    <url>/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>抽象类：抽象方法所在的类叫做抽象类，子类必须强制重写，否则子类代码直接报错</p>
<p>定义格式：public abstract class 类名{}</p>
<p>抽象方法：将共性的行为抽取到父类之后，由于每一个子类执行的内容是不一样，所以，<strong>在父类中不能确定具体的方法体</strong>，该方法就可以定义为抽象方法。</p>
<p>定义格式：public abstract 返回值类型 方法名(参数列表)；alt+回车</p>
<p>注意事项：1.抽象类不能实例化-不能创建对象</p>
<p>​		   2.抽象类中不一定有抽象方法，但是抽象方法的类一定是抽象类</p>
<p>​		   3.可能有构造方法</p>
<p>​		   4.<strong>抽象类的子类</strong></p>
<p>​				<strong>要么重写抽象类中的所有抽象方法</strong>(推荐使用)</p>
<p>​				要么是抽象类</p>
<p>意义：强制子类必须按照统一格式书写</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶main()方法的进一步理解</title>
    <url>/2024/02/19/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6main()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public:被JVM(虚拟机)调用，访问权限足够大</span></span><br><span class="line"><span class="comment">static:被JVM调用，不用创建对象，直接类名访问，因为main()方法是静态的，所以测试类中其他方法也需要是静态的</span></span><br><span class="line"><span class="comment">void:被JVM调用，不需要给JVM返回值</span></span><br><span class="line"><span class="comment">main:一个通用的名称，虽然不是关键字，但是被JVM识别</span></span><br><span class="line"><span class="comment">String[] args:以前用于接收键盘录入数据的，现在没用。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-接口</title>
    <url>/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><strong>接口：</strong>就是一种规则，对行为的抽象。</p>
<p><img src="C:\Users\Administrator\Desktop\MyBlog\source\images\微信截图_20240223135234.png"></p>
<p><strong>如何定义</strong>：</p>
<p>​	接口用关键字interface来定义，<strong>public interface 接口名{ }</strong></p>
<p>​	<strong>接口不能实例化</strong></p>
<p>​	接口和类之间是实现关系，通过<strong>implements</strong>关键字表示，<strong>public class 类名 implements 接口名{}</strong></p>
<p>​	接口的子类称为实现类</p>
<p>​		<strong>要么重写接口中的所有抽象方法。</strong></p>
<p>​		要么是抽象类。</p>
<p><strong>注意点1</strong>：接口和类的实现关系，可以单实现，也可以多实现。<strong>pubic class 类名 implements 接口名1 ，接口名2{ }</strong></p>
<p><strong>注意到2</strong>：实现类还可以在继承一个类的同时实现多个接口。<strong>public class 类名 extends 父类 implements 接口名1，接口名2{}</strong></p>
<p><strong>如何使用：</strong></p>
<p>​	方法可以是抽象类，默认类，静态类</p>
<p><strong>成员特点：</strong></p>
<p>​	成员变量：接口中的成员变量只能是常量，默认修饰符：public static final</p>
<p>​	构造方法：没有，因为接口不能创建对象，而且接口当中也不需要给子类去赋值。</p>
<p>​	成员方法：只能是抽象方法，默认修饰符：public abstract</p>
<p>​			  JDK7以前：接口中只能定义抽象方法。</p>
<p>​			  JDK8的新特性：接口中可以定义有方法体的方法(<strong>默认，静态</strong>)。</p>
<p>​				<strong>默认</strong></p>
<p>​				作用：加新规则and代码不报错，解决接口升级问题</p>
<p>​				<strong>注意事项</strong>：默认方法不是抽象方法，所以不强制被重写，但是如果被重写，重写的时候去掉default关键字。</p>
<p>​						   public可以省略，default不能省略。</p>
<p>​						   如果实现了多个接口，<em>多个接口中</em>存在相同名字的默认方法，子类就必须对该方法进行重写。</p>
<p>​				<strong>静态</strong></p>
<p>​				作用：运行在接口中定义静态方法，需要用static修饰</p>
<p>​				接口中静态方法的定义格式：public static 返回值类型 方法名(参数列表){    }</p>
<p>​				<strong>注意事项</strong>：静态方法只能通过接口名调用，不能通过实现类名或者对象名调用。</p>
<p>​						   public可以省略，static不能省略。</p>
<p>​			  JDK9的新特性：接口中可以定义私有方法。</p>
<p>​				需求：抽取出来的<strong>重复代码</strong>无需被外界调用，可以设置为私有方法，此方法只为Inter接口提供服务，不需要外类访问。&#x2F;&#x2F;普通的私有方法，给默认方法服务，，静态的私有方法，给静态方法服务</p>
<p>​				格式1：private 返回值类型 方法名(参数列表){}</p>
<p>​				格式2：private static 返回值类型 方法名(参数列表){}</p>
<p><strong>接口和类之间的关系：</strong></p>
<p>​	类和类的关系：继承关系，只能单继承，不能多继承，但是可以多层继承</p>
<p>​	类和接口的关系：实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p>
<p>​	接口和接口的关系：继承关系，可以单继承，也可以多继承。</p>
<p><strong>接口的应用：</strong></p>
<p>​	1.接口代表规则，是行为的抽象。想要让哪一个类拥有一个行为，就让这个类实现对应的接口就可以了。</p>
<p>​	2.当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称为接口多态。</p>
<p><strong>适配器设计模式</strong>：</p>
<p>​	设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性，程序的重用性。简单来说，设计模式就是各种套路。</p>
<p>​	适配器设计模式：解决接口与接口实现类之间的矛盾问题</p>
<p>​			1.当接口中抽象方法较多，而你执行操作其他一个，这时在实现类，就需要重写全部方法，影响阅读和操作，可以新建一个抽象类来存储所有的重写方法(空实现，即方法体空着)，然后让实现类来继承这个类，这时实现类就可以任意重写某一个方法。</p>
<p>（为了避免其他类创建适配器类的对象，中间的适配器类用abstract进行修饰）</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-多态</title>
    <url>/2024/02/21/java%E7%BB%A7%E6%89%BF-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p><strong>多态</strong>：多种形态，即，同种类型的对象，表现出得不太形态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure>

<p>应用场景：多种权限的用户注册时。</p>
<p>表现形式：父类类型  对象名称 &#x3D; 子类对象；</p>
<p>多态的前提：1.有继承关系；</p>
<p>​		        2.有父类引用指向子类对象（Fu f &#x3D; new Zi();）</p>
<p>​			3.有方法重写；</p>
<p>多态的好处：使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。</p>
<p><strong>多态调用成员的特点：</strong></p>
<p>​	<strong>变量调用</strong>：编译看左边，运行也看左边</p>
<p>​	编译看左边:   javac编译代码的时候，会看左边的父类中有没有这个变量，如果有，编译成功，如果没有编译失败。</p>
<p>​	运行看左边：java运行代码时，实际获取的就是左边父类中成员变量的值。</p>
<p>​	<strong>方法调用</strong>：编译看左边，运行看右边<br>​	编译看左边：javac编译代码时侯，会看左边的父类中有没有这个方法，如果有，编译成功，如果没有编译失败</p>
<p>​	运行看右边：Java运行代码的时候，实际上运行的是子类中的方法</p>
<p>​	如何理解？</p>
<p>​		Animal   a  &#x3D;  new Dog();</p>
<p>​		成员变量：在子类对象中，会把父类的成员变量也继承下来。父：name,子：name</p>
<p>​		成员方法：如果子类对方法进行重写，那么在虚方法表中是会把父类的方法进行覆盖的。</p>
<p><strong>多态的优势和弊端：</strong></p>
<p>​	优势：</p>
<p>​	1. 在多态形式下，右边对象可以 实现解耦合，便于扩展和维护。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Student</span>();  <span class="comment">//Person p = new Teacher();</span></span><br><span class="line">p.work();<span class="comment">//业务逻辑发生改变时，后续代码无需修改</span></span><br></pre></td></tr></table></figure>

<p>​	2. <strong>定义方法时，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利</strong>。</p>
<p>​	弊端：</p>
<p>​		<strong>不能直接调用子类的特有功能</strong></p>
<p>​		原因:当调用成员方法的时候,编译看左边，运行看右边，那么在编译的时候会先检查左边的父类中有没有这个方法，如果没有直接报错.</p>
<p>​		解决方案:变回子类类型</p>
<p>​		转换时如果转成其他类型，就会报错&#x2F;&#x2F;Cat c &#x3D; (Cat) a;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d.lookhome();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//避免转换类型与真实对象类型不一致会报错的解决方案</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line">	<span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog) a;</span><br><span class="line">	d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line">	<span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat) a;</span><br><span class="line">	c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDK14新特性–判断和强转的合并.</p>
<p>先判断a是否为Dog类型，如果是，则强转为Dog类型，转换之后的变量名为d</p>
<p>如果不是，则不强转，结果直接为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line">	d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line">	c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象进阶-继承</title>
    <url>/2024/02/20/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p>封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为。</p>
<p><strong>继承</strong>：Java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起继承关系。</p>
<p>public class Student extends Person(){}</p>
<p>Student称为子类,Person称为父类</p>
<p>1.<strong>优点</strong>：</p>
<p>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性</p>
<p>子类可以在父类的基础上，增加其他的功能，使子类更强大。</p>
<p>子类可以得到父类的属性和行为，子类可以使用。</p>
<p><strong>什么时候用到继承？</strong>：当类与类之间，存在相同(共性)的内容，并满足子类是父类中的一种(学生是人的一种)，就可以考虑使用继承来优化代码。</p>
<p>2.<strong>方式</strong>：</p>
<p>1.自己设计</p>
<p>2.用别人的</p>
<p>3.<strong>特点</strong>：</p>
<p>​	Java只<strong>支持</strong>单继承：</p>
<p>​	<strong>不支持</strong>多继承：</p>
<p>​	<strong>支持</strong>多层继承：子类A继承父类B,父类B可以继承父类C(直接父类(BA,CB)，间接父类(CA))</p>
<p>​	<strong>每一个类都直接或间接的继承于Object</strong>(祖宗类)</p>
<p>4.<strong>子类到底能继承父类中的那些内容?:</strong>(继承和调用不一样)</p>
<table>
<thead>
<tr>
<th align="center">内容</th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">构造方法</td>
<td align="center">非私有(NO)</td>
<td align="center">private(NO)</td>
</tr>
<tr>
<td align="center">成员变量</td>
<td align="center">非私有(YES)</td>
<td align="center">private(YES)   get&#x2F;set方法去使用</td>
</tr>
<tr>
<td align="center">成员方法</td>
<td align="center">非私有(YES)&#x2F;&#x2F;虚方法表</td>
<td align="center">private（NO）</td>
</tr>
</tbody></table>
<p>违背了构造方法的规则：构造方法名与类名必须相同。</p>
<p>只有父类中的<strong>虚方法</strong>(*非private,非static,非final)*才能被子类继承，生成虚方法表传给子类</p>
<p><strong>5.内存分析工具的使用：</strong></p>
<p>控制台输入jps:类的地址</p>
<p>内存分析工具：控制台输入 jhsdb hsdb</p>
<p><strong>6.继承中的特点</strong></p>
<p>继承中:成员变量的访问特点</p>
<p>​	<strong>就近原则：谁离我近，我就用谁</strong>，先在局部位置找，然后本类位置找，父类成员位置找，逐级往上。</p>
<p>​	如果重名了怎么访问?:</p>
<p>​			从局部位置开始往上找，name</p>
<p>​			从本类成员位置开始往上找, this.name</p>
<p>​			从父类成员位置开始往上找, super.name</p>
<p>继承中:成员方法的访问特点</p>
<p>​	直接调用：谁离我近，我就用谁</p>
<p>​			先查看本类中是否有对应方法，有，就会调用子类的，如果没有，就会调用从父类中继承下来的对应方法</p>
<p>​	super调用: 直接访问父类</p>
<p>​			不会查看本类，直接查看父类中是否中是否有对应的方法</p>
<p>继承中:构造方法的特点</p>
<p>​	 父类中的构造方法不会 被子类继承。（构造方法名与类名不一致了）</p>
<p>​	子类中所有的构造方法默认先访问父类中的无参构造，在执行自己的</p>
<p>​	<strong>原因：</strong></p>
<p>​		子类在初始化的时候，又可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。</p>
<p>​		子类在初始化之前，一点要调用父类构造方法先完成父类数据空间的初始化</p>
<p>​	<strong>调用父类方法</strong>：</p>
<p>​		子类构造方法的第一行语句默认都是：super(),不写也存在，且必须在第一行</p>
<p>​		如果想调用父类的有参构造，必须手动写super进行调用</p>
<p><strong><em>方法</em>的重写</strong>：当父类的方法不能满足子类现在的需求时，需要进行方法重写</p>
<p>​			书写格式：在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法。</p>
<p>​			@Override重写注解–给虚拟机和程序员看的</p>
<p>​				1.@Override是放在重写后的方法上，校验子类重写时语法是否正确</p>
<p>​				2.加上注解后如果有红色波浪线，表示语法错误。</p>
<p>​				3.建议重写方法都加@Override注解，代码安全，优雅</p>
<p>​			要求：</p>
<p>​				1.重写方法的名称，形参列表必须与父类中的一致。</p>
<p>​				2.子类重写父类方法时，访问权限<strong>子类</strong>必须大于等于父类(空着不写&lt;protected&lt;public)。</p>
<p>​				3.子类重写父类方法时，返回值类型必须小于等于父类。</p>
<p>​				<strong>4.建立：重写的方法尽量和父类保持一致。</strong></p>
<p>​				<strong>5.只有被添加到虚方法表中的方法才能被重写。</strong></p>
<p><strong>7.this,super使用总结</strong></p>
<p>​	this:本类,理解为一个变量，表示当前方法调用在的地址值。</p>
<p>​	super:代表父类存储空间</p>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">访问成员变量</th>
<th align="center">访问成员方法</th>
<th align="center">访问构造方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">this</td>
<td align="center">this.成员变量<br>访问本类的成员变量</td>
<td align="center">this.成员方法(…..)<br/>访问本类成员方法</td>
<td align="center">this(…..)<br/>访问本类构造方法</td>
</tr>
<tr>
<td align="center">super</td>
<td align="center">super.成员变量<br/>访问父类成员变量</td>
<td align="center">super.成员方法(…..)<br/>访问父类的成员方法</td>
<td align="center">super(…….)<br/>访问父类构造方法</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数的计算</title>
    <url>/2024/01/18/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PalindromeNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求:给你一个整数x</span></span><br><span class="line">        <span class="comment">//如果x是一个回文整数，打印true，否则，返回false。</span></span><br><span class="line">        <span class="comment">//解释：回文数是指正序(从左向右)和倒序(从右向左)读都是一样的整数。</span></span><br><span class="line">        <span class="comment">//例如，121是回文，而123不是</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> reverse=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> origin=number;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="comment">//思路：翻转后的数字等于翻转前的数字</span></span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">            k=number%<span class="number">10</span>;</span><br><span class="line">            reverse=reverse*<span class="number">10</span>+k;</span><br><span class="line">            number/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (origin==reverse)&#123;</span><br><span class="line">            System.out.println(origin+<span class="string">&quot;是回文数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(origin+<span class="string">&quot;不是回文数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>大小写字母放进数组</title>
    <url>/2024/01/23/%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E6%94%BE%E8%BF%9B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="大小写字母都放进数组内"><a href="#大小写字母都放进数组内" class="headerlink" title="大小写字母都放进数组内"></a>大小写字母都放进数组内</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">52</span>];<span class="comment">//26+26=52</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number3</span> <span class="operator">=</span> r.nextInt(<span class="number">9</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; array.length / <span class="number">2</span>) &#123;</span><br><span class="line">                array[i] = (<span class="type">char</span>) (<span class="number">97</span> + i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                array[i] = (<span class="type">char</span>) (<span class="number">65</span> + j);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2024/09/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80-Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>—–  有自觉才有自由   —–</strong></p>
<p>大数据解决海量<em><strong>数据的存储</strong></em>(存不下)与<em><strong>计算</strong></em>(查询慢)的问题。</p>
<p>大数据：处理出有价值的数据</p>
<p>大数据分析的业务流程：</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
​		明确数据分析的目的和思路(搞清楚数据在哪，要做什么?)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​		 数据收集(读数据)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​                 数据处理：提取，清洗，转化，加载(Sqoop,kettle即对数据进行处理，过滤掉不需要的数据)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​                 数据分析：统计，建模，挖掘，（Hive,Spark,Flik即指标统计，根据需求算出结果，存储结果）</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​                 数据可视化(Superset,Echarts),将结果放入一个查询非常快的数据库，例如hbse,redis,MySQL</p>
</li>
<li><p><input disabled="" type="checkbox"> 
​                 报告撰写(如图所示，那个数据最明显)</p>
</li>
<li><p>Linux文件系统的特点：</p>
</li>
</ul>
<p>​	Linux文件系统没有盘符的概念，所以的文件入口是从根目录开始的，系统自带的文件不要修改和删除。</p>
<p>Linux命令：</p>
<h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><blockquote>
<ul>
<li><strong>cd : change directory,切换目录</strong></li>
</ul>
</blockquote>
<p>​		cd .. ：返回上一级目录</p>
<p>​        	cd -  :在临近的2个目录间切换</p>
<p>​		cd :  返回登陆者的<strong>家目录</strong></p>
<p>​		cd &#x2F; :切换到根目录</p>
<p>​		     ~:&#x2F;root</p>
<p>​		cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果     			     是root用户登陆的就回到&#x2F;root</p>
<h3 id="mkdir-make-directory-创建文件夹"><a href="#mkdir-make-directory-创建文件夹" class="headerlink" title="mkdir:  make directory,创建文件夹"></a><strong>mkdir:  make directory,创建文件夹</strong></h3><p>​		 mkdir test1:没有层级的创建文件夹test1,当前目录下创建。</p>
<p>​                 mkdir -p aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p>
<h3 id="rm-remove的缩写，默认删除文件-，可以删除文件夹-d"><a href="#rm-remove的缩写，默认删除文件-，可以删除文件夹-d" class="headerlink" title="rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)"></a><strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></h3><p>​		 rm a.txt : 删除文件会提示，以y开头都会被删除，其他都不会被删除。</p>
<p>​		 -r: 递归,先进入最里的一层，然后从里向外删除</p>
<p>​			rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p>
<p>​	         -f: force,强制</p>
<p>​			rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p>
<p>​			rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示。</p>
<h3 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch: 创建空文件"></a><strong>touch: 创建空文件</strong></h3><p>​		 touch a.txt  #在当前目录创建a.txt文件</p>
<p>​		 touch &#x2F;root&#x2F;a.txt  #在&#x2F;root目录创建a.txt文件</p>
<h3 id="mv-文件，目录的移动和重命名"><a href="#mv-文件，目录的移动和重命名" class="headerlink" title="mv:文件，目录的移动和重命名"></a>mv:文件，目录的移动和重命名</h3><p>​	<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p>
<p>​		 mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加0)。</p>
<p>​		 mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p>
<p>​			                     当test2不存在：重命名</p>
<p>​		 mv a.txt  test1 :移动文件到指定目录test1下面a</p>
<h3 id="cat-查看-整个文件-内容"><a href="#cat-查看-整个文件-内容" class="headerlink" title="cat : 查看 整个文件 内容"></a><strong>cat : 查看 整个<em>文件</em> 内容</strong></h3><p>​                  cat  a.txt :查看文件内容</p>
<h3 id="more-查看文件部分内容"><a href="#more-查看文件部分内容" class="headerlink" title="more :查看文件部分内容"></a><strong>more :查看文件部分内容</strong></h3><p>​		 enter：多查一行数据</p>
<p>​		 空 格 ： 查看新的一屏幕数据</p>
<h3 id="cp-copy-复制粘贴"><a href="#cp-copy-复制粘贴" class="headerlink" title="cp : copy , 复制粘贴"></a><strong>cp : copy , 复制粘贴</strong></h3><p>​		 cp a.txt  b.txt  </p>
<p>​		  a.txt 内容存在  b.txt 内容不存在—复制a内容到b里。</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp01.png"></p>
<p>​		 a.txt 内容存在  b.txt内容存在———将a的内容覆盖到b里。</p>
<p>​                 cp test1 test2 -r</p>
<p>​		当test2文件夹不存在：将test1下面的内容复制一份，写到test2目录下。</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-9.png"></p>
<p>​		当test2文件夹存在：将test1整个复制一份到test2目录中</p>
<p>​		        test1内容存在    test2内容为空。—复制test1整体复制到test2中</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-32.png"></p>
<p>​		         test1内容存在    test2内容存在. —-将test1整体到test2目录中</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-6.png"></p>
<p>​		cp a.txt test2 :复制a.txt并写入到 test2 目录中</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-24.png"></p>
<h3 id="ps-process-status-进程状态"><a href="#ps-process-status-进程状态" class="headerlink" title="ps: process status ,进程状态"></a><strong>ps: process status ,进程状态</strong></h3><p>​			ps -ef : 查看当前正在运行的进程</p>
<p>​	<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/ps-1.png"></p>
<p>​		UID：进程是谁执行的</p>
<p>​		PID:   进程的ID</p>
<p>​		PPID：进程的父ID</p>
<h3 id="kill-终止"><a href="#kill-终止" class="headerlink" title="kill : 终止"></a><strong>kill : 终止</strong></h3><p>​		kill 进程ID，终止进程，有时候不一定会终止进程。</p>
<p>​		kill -9 进程ID,一定能杀死进程。（9：kill,双杀）</p>
<p>​		kill -1:查看kill命令的所以信号。</p>
<h3 id="ifconfig-查看虚拟机的网络配置信息"><a href="#ifconfig-查看虚拟机的网络配置信息" class="headerlink" title="ifconfig: 查看虚拟机的网络配置信息"></a><strong>ifconfig: 查看虚拟机的网络配置信息</strong></h3><p>​		Windows：ipconfig</p>
<p>​	<strong>Linux命令(重点)</strong></p>
<p>​		命令格式： command -options paramaters</p>
<p>​		绝对路径：从根目录开始。</p>
<p>​		相对路径：从当前目录开始。</p>
<h3 id="ls-list简写，列出当前目录下的内容-文件-文件夹-。"><a href="#ls-list简写，列出当前目录下的内容-文件-文件夹-。" class="headerlink" title="ls : list简写，列出当前目录下的内容(文件+文件夹)。"></a><strong>ls : list简写，列出当前目录下的内容(文件+文件夹)。</strong></h3><p>​			ls &#x2F;root:查看指定目录&#x2F;root里面的内容。</p>
<p>​			<strong>-options:</strong></p>
<p>​				 ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all</p>
<p>​				 ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(简写ll)。</p>
<p>​				 ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p>
<h3 id="clear-命令用来清屏，可以使用ctrl-l来替换。"><a href="#clear-命令用来清屏，可以使用ctrl-l来替换。" class="headerlink" title="clear:命令用来清屏，可以使用ctrl+l来替换。"></a><strong>clear:命令用来清屏，可以使用ctrl+l来替换</strong>。</h3><h3 id="pwd-显示当前目录的绝对路径。"><a href="#pwd-显示当前目录的绝对路径。" class="headerlink" title="pwd:显示当前目录的绝对路径。"></a><strong>pwd:显示当前目录的绝对路径</strong>。</h3><h3 id="reboot-重启命令"><a href="#reboot-重启命令" class="headerlink" title="reboot:重启命令"></a><strong>reboot:重启命令</strong></h3><p>shutdown -h now:立刻关机(断电关机)</p>
<p>**halt:立刻关机(不断电关机)**<strong>cd: change directory,切换目录</strong></p>
<p>​			cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果     			     是root用户登陆的就回到&#x2F;root</p>
<h3 id="hostname-查看主机名称"><a href="#hostname-查看主机名称" class="headerlink" title="hostname: 查看主机名称"></a><strong>hostname: 查看主机名称</strong></h3><h3 id="tar：压缩，打包，解包，解压缩命令"><a href="#tar：压缩，打包，解包，解压缩命令" class="headerlink" title="tar：压缩，打包，解包，解压缩命令"></a><strong>tar：压缩，打包，解包，解压缩命令</strong></h3><p>​			options:</p>
<p>​				c:打包</p>
<p>​				v:看过程</p>
<p>​				f:打包成那个文件</p>
<p>​				z:打包成压缩格式的文件.gzip格式</p>
<p>​				x:解包，解压缩</p>
<p>​				-C：指定文件的解压位置	</p>
<p>打包：是指将一大堆文件或目录变成一个总的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf test1.tar  test1</span><br></pre></td></tr></table></figure>

<p>打压缩包：则是将一个大文件通过压缩算法变成一个小文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -czvf test1.tar.gz test1</span><br></pre></td></tr></table></figure>

<p>解包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf test1.tar -c /big59/test3</span><br></pre></td></tr></table></figure>

<p>解压缩包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzvf test1.tar.gz -C /big59/test2</span><br></pre></td></tr></table></figure>

<h3 id="grep-全文检索"><a href="#grep-全文检索" class="headerlink" title="grep:全文检索"></a><strong>grep:全文检索</strong></h3><p>​			grep hadoop a.txt: 在a.txt里面查找包含hadoop的内容。	</p>
<p>​			grep -ir hadoop &#x2F;root:不区分大小写，	</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/gerp-1.png"></p>
<p><strong>| :管道，将上一个命令的输出当成下一个命令的输入</strong></p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/%E7%AE%A1%E9%81%93.png"></p>
<h3 id="which-查看系统命令"><a href="#which-查看系统命令" class="headerlink" title="which-查看系统命令"></a><strong>which-查看系统命令</strong></h3><p>​			 查看执行命令的位置</p>
<p>​			 <img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/which.png"></p>
<h3 id="vi-vi编辑器"><a href="#vi-vi编辑器" class="headerlink" title="vi : vi编辑器"></a><strong>vi : vi编辑器</strong></h3><p>​			命令模式：vi  a.txt回车进入命令模式。</p>
<p>​			编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p>
<p>​			保持退出： 输入：进入末行模式，再输入wq保存退出。</p>
<p>​			<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/vi%E7%BC%96%E8%BE%91.png"></p>
<h3 id="用户创建命令：useradd-root超级管理员才可以添加用户"><a href="#用户创建命令：useradd-root超级管理员才可以添加用户" class="headerlink" title="用户创建命令：useradd(root超级管理员才可以添加用户)"></a><strong>用户创建命令：useradd</strong>(root超级管理员才可以添加用户)</h3><p>​			添加用户：useradd  用户名</p>
<p>​			设置密码：passwd   用户名</p>
<p>​			删除用户：userdel -r 用户名</p>
<p>​			切换用户：su  用户名</p>
<h3 id="chmod-权限管理"><a href="#chmod-权限管理" class="headerlink" title="chmod:权限管理"></a><strong>chmod:权限管理</strong></h3><p>​			角色：</p>
<p>​				创建者：一个文件或者文件夹的创建者(拥有者)，userid简称uid.</p>
<p>​				用户组：针对文件或者文件夹而言，默认与创建者同名，groupid简称gid&#x2F;g.</p>
<p>​				其他用户：创建者之外的用户，就是其他用户，other简称o.</p>
<p>​			权限：</p>
<p>​				第1列：文件属性(  - :文件，d:文件夹)</p>
<p>​				第2-4列：创建者对文件或者文件夹的权限</p>
<p>​				第5-7列：用户组的权限</p>
<p>​				第8-10列：其他用户的权限</p>
<p>​				权限的解读：</p>
<p>​					r :read ，读权限，r   4</p>
<p>​					w :write，写权限，w 2</p>
<p>​					x ：执行权限，x     1</p>
<p>​			权限操作：(文件和文件夹都可以进行权限操作)</p>
<p>​					chmod o**+**w a.txt:对其他用户添加一个写权限。</p>
<p>​					chmod g**-**r a.txt:给用户组删除读权限。</p>
<p>​					chmod o**&#x3D;**wx a.txt的其他用户赋予写和执行权限</p>
<p>​					数字权限的操作：</p>
<p>​					chmod 777 a.txt:给所以角色赋予所以权限</p>
]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>把整数中的每一位都添加到数组中</title>
    <url>/2024/01/23/%E6%8A%8A%E6%95%B4%E6%95%B0%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E9%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="把整数中的每一位都添加到数组中"><a href="#把整数中的每一位都添加到数组中" class="headerlink" title="把整数中的每一位都添加到数组中"></a>把整数中的每一位都添加到数组中</h1><p>反向推导：</p>
<ol>
<li><p>计算数组的长度(新建数组)-定义数组-把整数上的每一位都添加到数组上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getInts(<span class="type">int</span> number) &#123;</span><br><span class="line">        <span class="type">int</span> temp= number;</span><br><span class="line">        <span class="comment">//1.1求数字的长度充当数组的长度</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number !=<span class="number">0</span>)&#123;</span><br><span class="line">            number = number /<span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.2定义数组</span></span><br><span class="line">        <span class="type">int</span> [] array=<span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">        <span class="comment">//1.3得到每一位</span></span><br><span class="line">        <span class="type">int</span> index= array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> ge=temp%<span class="number">10</span>;</span><br><span class="line">            temp=temp/<span class="number">10</span>;</span><br><span class="line">            array[index]=ge;</span><br><span class="line">            index--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>day07-TestDemo06</p>
</li>
</ol>
]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>求质数计算中的标记思想</title>
    <url>/2024/01/20/%E6%A0%87%E8%AE%B0%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="标记思想"><a href="#标记思想" class="headerlink" title="标记思想"></a>标记思想</h1><p>定义一个布尔变量，表示标记</p>
<p>要在for循环外判断是否为质数，最初认为number是一个质数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.jump;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 键盘录入一个正整数x，判断该整数是否为一个质数</span></span><br><span class="line"><span class="comment">         * 质数的定义:一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;   <span class="comment">//***************************************************************</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;录入一个正整数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;number ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                flag=<span class="literal">false</span>;   <span class="comment">//****************************************************************</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;			<span class="comment">//******************************************************************</span></span><br><span class="line">            System.out.println(number+<span class="string">&quot;是质数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(number+<span class="string">&quot;不是质数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>比较最值时提高效率(数组)</title>
    <url>/2024/01/20/%E6%AF%94%E8%BE%83%E6%9C%80%E5%80%BC%E6%97%B6%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87(%E6%95%B0%E7%BB%84)/</url>
    <content><![CDATA[<h1 id="数组循环比较最值时提高效率"><a href="#数组循环比较最值时提高效率" class="headerlink" title="数组循环比较最值时提高效率"></a>数组循环比较最值时提高效率</h1><p>循环中开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低，为了提高效率，减少一次 循环的次数，循环开始的条件可以写1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> min=array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i]&lt;min)&#123;</span><br><span class="line">                min=array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(min);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>登录错误时的次数限制</title>
    <url>/2024/02/19/%E7%99%BB%E5%BD%95%E5%A4%B1%E8%AF%AF%E6%97%B6%E6%AC%A1%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>day12</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(list, username);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;<span class="comment">//集合中没有该用户名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名未注册，请先注册&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">vericode</span> <span class="operator">=</span> getVericode();</span><br><span class="line">        System.out.println(vericode);</span><br><span class="line">        System.out.println(<span class="string">&quot;请录入验证码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">againcode</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span> (vericode.equalsIgnoreCase(againcode)) &#123;<span class="comment">//验证码正确</span></span><br><span class="line">            System.out.println(<span class="string">&quot;验证码录入成功&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功登录&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新录入验证码:&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stuInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(username, password, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">boolean</span> result=checkstuInfo(list,stuInfo);</span><br><span class="line">    <span class="keyword">if</span> (result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功，可以使用你的学生管理系统了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败，用户名或密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前账号&quot;</span>+username+<span class="string">&quot;被锁定&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误，还剩下&quot;</span>+(<span class="number">2</span>-i)+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>生成验证码</title>
    <url>/2024/02/19/%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<h4 id="验证码规则："><a href="#验证码规则：" class="headerlink" title="验证码规则："></a>验证码规则：</h4><p>​	长度为5</p>
<p>​	由4位大写或者小写字母和1位数字组成，同一个字母可重复</p>
<p>​	数字可以出现在任意位置</p>
<p>比如：aQa1K</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getVericode</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//1.创建一个集合添加所有的大写和小写字母</span></span><br><span class="line">    	ArrayList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i));</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//2.要随机抽取4个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取随机索引</span></span><br><span class="line">            <span class="type">int</span> index=rd.nextInt(list.size());</span><br><span class="line">            <span class="comment">//利用索引获取字符</span></span><br><span class="line">            <span class="type">char</span> c=list.get(index);</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.生成1位随机数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> rd.nextInt(<span class="number">10</span>); <span class="comment">// 生成0到9之间的随机数字</span></span><br><span class="line">    	sb.append(number);</span><br><span class="line">    	<span class="comment">//4.将字符串变成字符数组，然后再新建一个新的字符串</span></span><br><span class="line">    	<span class="type">char</span>[] arr=sb.toString().toCharArray();</span><br><span class="line">    	<span class="comment">//拿着最后一个索引，跟随机索引进行交换</span></span><br><span class="line">    	<span class="type">int</span> randomIndex=rd.nextInt(arr.length);</span><br><span class="line">        <span class="comment">//最大索引指向的元素，跟随机索引指向的元素交换</span></span><br><span class="line">    	<span class="type">char</span> temp=arr[randomIndex];</span><br><span class="line">        arr[randomIndex]=arr[arr.length-<span class="number">1</span>];</span><br><span class="line">    	arr[arr.length-<span class="number">1</span>]=temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>标准数组格式</title>
    <url>/2024/01/21/%E8%BE%93%E5%87%BA%E6%A0%87%E5%87%86%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%EF%BC%9A%5B11,22,33,44,55%5D/</url>
    <content><![CDATA[<p>输出标准数组格式：[11,22,33,44,55]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==array.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(array[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>生成随机且不重复的数据</title>
    <url>/2024/01/24/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E4%B8%94%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>创建大小为 x的 int 的空数组；<br>调用 random 产生随机数字；<br>当产生的随机数和数组中的元素没有重复的时候，放进去，即可；</p>
<h1 id="1-判断随机数字在数组中是否存在"><a href="#1-判断随机数字在数组中是否存在" class="headerlink" title="1.判断随机数字在数组中是否存在"></a>1.判断随机数字在数组中是否存在</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contain</span><span class="params">(<span class="type">int</span> [] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i]==number)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-当产生的随机数和数组中的元素没有重复的时候，放入数组"><a href="#2-当产生的随机数和数组中的元素没有重复的时候，放入数组" class="headerlink" title="2.当产生的随机数和数组中的元素没有重复的时候，放入数组"></a>2.当产生的随机数和数组中的元素没有重复的时候，放入数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createNumber()&#123;</span><br><span class="line">    <span class="comment">//1.创建数组用于添加中奖号码，六个红球1个蓝球，数组长度为7</span></span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">    <span class="comment">//2.生成随机数字，红球的号码不能重复，蓝球的号码可以和红球重复</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>;) &#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">red</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>)+<span class="number">1</span>;<span class="comment">//红球号码从1-33中选择，且不能重复。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contain(arr, red);</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            arr[i]=red;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>超出范围重新录入</title>
    <url>/2024/01/23/%E8%A7%84%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="规定范围内录入数据"><a href="#规定范围内录入数据" class="headerlink" title="规定范围内录入数据"></a>规定范围内录入数据</h1><p>1.多位时(for循环和i++)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//输入规定范围的整数：0-100之间</span></span><br><span class="line">        <span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length;) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入评分:&quot;</span>);</span><br><span class="line">            <span class="type">int</span> score=sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (score&gt;=<span class="number">0</span>&amp;&amp;score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                scores[i]=score;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;超出范围，继续录入，当前的i为:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.一位时(while和break)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入蓝色球号:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> number = sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span> (number &gt;= <span class="number">1</span> &amp;&amp; number &lt;= <span class="number">16</span>) &#123;</span><br><span class="line">        newArr[newArr.length-<span class="number">1</span>] = number;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;蓝球码超出范围，重新输入:&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
  <entry>
    <title>金额转换思想</title>
    <url>/2024/02/04/%E9%87%91%E9%A2%9D%E8%BD%AC%E6%8D%A2%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="金额转换思想："><a href="#金额转换思想：" class="headerlink" title="金额转换思想："></a>金额转换思想：</h1><p>​	        2135</p>
<p>​	  				           转大写：(查表法)1.取各位上的数–2.大写(数组)值的数组索引是各位的数</p>
<p>​	    贰壹叁伍</p>
<p>​        				            前面补0：</p>
<p>​	零零零贰壹叁伍</p>
<p>​					            插入单位:</p>
<p>零佰零拾零万贰仟壹佰叁拾伍元</p>
<p><strong>一：转大写</strong></p>
<p>1.得到money里面的每一位数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.创建大写数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    String[] arr=&#123;<span class="string">&quot;零&quot;</span>,<span class="string">&quot;壹&quot;</span>,<span class="string">&quot;贰&quot;</span>,<span class="string">&quot;叁&quot;</span>,<span class="string">&quot;肆&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;陆&quot;</span>,<span class="string">&quot;柒&quot;</span>,<span class="string">&quot;捌&quot;</span>,<span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">	<span class="keyword">return</span> arr[number];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.每位上的数就是大写数组的索引</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strMoney=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    String capitalNumber=getCapitalNumber(ge);</span><br><span class="line">    <span class="comment">//反向拼接</span></span><br><span class="line">    strMoney=capitalNumber+strMoney;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二:前面补零(补齐7位)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ZeroCount=<span class="number">7</span>-strMoney.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ZeroCount;i++)&#123;</span><br><span class="line">    strMoney=<span class="string">&quot;零&quot;</span>+strMoney;<span class="comment">//字符串拼接,前拼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>三:插入单位</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义数组单位</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2.遍历strMoney，然后把大写数字和单位拼接到字符串中</span></span><br><span class="line">String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strMoney.length();i++)&#123;</span><br><span class="line">    <span class="type">char</span> c=strMoney.charAt(i);</span><br><span class="line">    result=result+c+arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>经典算法思想</category>
      </categories>
      <tags>
        <tag>算法思想</tag>
      </tags>
  </entry>
</search>
