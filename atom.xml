<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东瓶西镜</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="https://readmengk90.github.io/atom.xml" rel="self"/>
  
  <link href="https://readmengk90.github.io/"/>
  <updated>2024-02-25T14:31:28.937Z</updated>
  <id>https://readmengk90.github.io/</id>
  
  <author>
    <name>Amber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GUI图形化用户界面</title>
    <link href="https://readmengk90.github.io/2024/02/25/java%E7%BB%A7%E6%89%BF-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
    <id>https://readmengk90.github.io/2024/02/25/java%E7%BB%A7%E6%89%BF-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</id>
    <published>2024-02-25T14:31:28.876Z</published>
    <updated>2024-02-25T14:31:28.937Z</updated>
    
    <content type="html"><![CDATA[<p>GUI</p><p>JFrame:最外层的窗体</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;GUI&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-内部类</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2024-02-23T15:55:18.010Z</published>
    <updated>2024-02-25T13:05:30.243Z</updated>
    
    <content type="html"><![CDATA[<p>内部类–是类的五大成员之一(属性，方法，构造方法，内部类)，在一个类的里面，在定义一个类。</p><p><strong>应用场景</strong>：</p><p>​需求：写一个javabean类描述汽车</p><p>​属性：汽车的品牌，车龄，颜色，发动机的品牌，使用年限。(汽车和发动机属于两个类，又有联系)</p><p>内部类表示的事物是外部类的一部分，内部类单独出现没有任何意义</p><p><strong>访问特点</strong>：</p><p>​内部类可以直接访问外部类的成员，包括私有&#x2F;&#x2F;Outer.this.变量名</p><p>​外部类要访问内部类的成员，必须创建对象</p><p><strong>成员内部类</strong>：</p><p>​如何书写？：写在成员位置(类中方法外)，属于外部类的成员。</p><p>​成员内部类可以被一些修饰符所修饰，比如：private(本类)，默认(本包)，protected(本包其他类，其他包的子类)，public(所有地方)，static(静态的)等。</p><p>​在成员内部类里面，JDK16之前不能定义<strong>静态变量</strong>，JDK16开始才可以定义<strong>静态变量</strong>。</p><p>​如何创建成员内部类的对象？：</p><p>​ <strong>方式一</strong>：在外部类中编写方法，对外提供内部类的对象</p><p>​&#x2F;&#x2F;使用场景：用在private修饰内部类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> o.getInstance();<span class="comment">//获取内部类对象</span></span><br></pre></td></tr></table></figure><p>​ <strong>方式二</strong>：直接创建格式：外部类名.内部类名  对象名 &#x3D; 外部类对象.内部类对象；范例：Outer.Inner oi &#x3D; new Outer().new Inner();   &#x2F;&#x2F;使用场景：不是用private修饰内部类的</p><p><strong>静态内部类</strong>：静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建外部类的对象</p><p>​<strong>创建静态内部类对象的格式</strong>：外部类名.内部类名  <em>对象</em>名 &#x3D;  new  外部类名.内部类名( );</p><p>​<strong>调用非静态方法的格式</strong>：先创建对象，用<em>对象</em>调用</p><p>​<strong>调用静态方法的格式</strong>：外部类名.内部类名.方法名();</p><p>​静态内部类是一种特殊的成员内部类</p><p><strong>局部内部类</strong>：1.将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量，</p><p>​       2.外界是无法直接使用，需要在方法内部创建对象并使用。</p><p>​       3.该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p><p><strong>匿名内部类</strong>(重点)：本质就是隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="keyword">new</span> 类名或接口名()&#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//包含了继承或实现，方法重写，创建对象</span></span><br><span class="line"><span class="comment">//整体就是一个类的子类对象或者接口的实现类对象</span></span><br></pre></td></tr></table></figure><p><img src="/../images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240225202806.png" alt="接口"></p><p>使用场景：当方法的参数是接口或类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;内部类&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-接口</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8E%A5%E5%8F%A3/</id>
    <published>2024-02-23T05:53:28.788Z</published>
    <updated>2024-02-23T15:06:25.969Z</updated>
    
    <content type="html"><![CDATA[<p><strong>接口：</strong>就是一种规则，对行为的抽象。</p><p><img src="C:\Users\Administrator\Desktop\MyBlog\source\images\微信截图_20240223135234.png"></p><p><strong>如何定义</strong>：</p><p>​接口用关键字interface来定义，<strong>public interface 接口名{ }</strong></p><p>​<strong>接口不能实例化</strong></p><p>​接口和类之间是实现关系，通过<strong>implements</strong>关键字表示，<strong>public class 类名 implements 接口名{}</strong></p><p>​接口的子类称为实现类</p><p>​<strong>要么重写接口中的所有抽象方法。</strong></p><p>​要么是抽象类。</p><p><strong>注意点1</strong>：接口和类的实现关系，可以单实现，也可以多实现。<strong>pubic class 类名 implements 接口名1 ，接口名2{ }</strong></p><p><strong>注意到2</strong>：实现类还可以在继承一个类的同时实现多个接口。<strong>public class 类名 extends 父类 implements 接口名1，接口名2{}</strong></p><p><strong>如何使用：</strong></p><p>​方法可以是抽象类，默认类，静态类</p><p><strong>成员特点：</strong></p><p>​成员变量：接口中的成员变量只能是常量，默认修饰符：public static final</p><p>​构造方法：没有，因为接口不能创建对象，而且接口当中也不需要给子类去赋值。</p><p>​成员方法：只能是抽象方法，默认修饰符：public abstract</p><p>​  JDK7以前：接口中只能定义抽象方法。</p><p>​  JDK8的新特性：接口中可以定义有方法体的方法(<strong>默认，静态</strong>)。</p><p>​<strong>默认</strong></p><p>​作用：加新规则and代码不报错，解决接口升级问题</p><p>​<strong>注意事项</strong>：默认方法不是抽象方法，所以不强制被重写，但是如果被重写，重写的时候去掉default关键字。</p><p>​   public可以省略，default不能省略。</p><p>​   如果实现了多个接口，<em>多个接口中</em>存在相同名字的默认方法，子类就必须对该方法进行重写。</p><p>​<strong>静态</strong></p><p>​作用：运行在接口中定义静态方法，需要用static修饰</p><p>​接口中静态方法的定义格式：public static 返回值类型 方法名(参数列表){    }</p><p>​<strong>注意事项</strong>：静态方法只能通过接口名调用，不能通过实现类名或者对象名调用。</p><p>​   public可以省略，static不能省略。</p><p>​  JDK9的新特性：接口中可以定义私有方法。</p><p>​需求：抽取出来的<strong>重复代码</strong>无需被外界调用，可以设置为私有方法，此方法只为Inter接口提供服务，不需要外类访问。&#x2F;&#x2F;普通的私有方法，给默认方法服务，，静态的私有方法，给静态方法服务</p><p>​格式1：private 返回值类型 方法名(参数列表){}</p><p>​格式2：private static 返回值类型 方法名(参数列表){}</p><p><strong>接口和类之间的关系：</strong></p><p>​类和类的关系：继承关系，只能单继承，不能多继承，但是可以多层继承</p><p>​类和接口的关系：实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p><p>​接口和接口的关系：继承关系，可以单继承，也可以多继承。</p><p><strong>接口的应用：</strong></p><p>​1.接口代表规则，是行为的抽象。想要让哪一个类拥有一个行为，就让这个类实现对应的接口就可以了。</p><p>​2.当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称为接口多态。</p><p><strong>适配器设计模式</strong>：</p><p>​设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性，程序的重用性。简单来说，设计模式就是各种套路。</p><p>​适配器设计模式：解决接口与接口实现类之间的矛盾问题</p><p>​1.当接口中抽象方法较多，而你执行操作其他一个，这时在实现类，就需要重写全部方法，影响阅读和操作，可以新建一个抽象类来存储所有的重写方法(空实现，即方法体空着)，然后让实现类来继承这个类，这时实现类就可以任意重写某一个方法。</p><p>（为了避免其他类创建适配器类的对象，中间的适配器类用abstract进行修饰）</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;抽象类和抽象方法&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-抽象类和抽象方法</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2024-02-23T02:04:42.634Z</published>
    <updated>2024-02-23T03:25:43.451Z</updated>
    
    <content type="html"><![CDATA[<p>抽象类：抽象方法所在的类叫做抽象类，子类必须强制重写，否则子类代码直接报错</p><p>定义格式：public abstract class 类名{}</p><p>抽象方法：将共性的行为抽取到父类之后，由于每一个子类执行的内容是不一样，所以，<strong>在父类中不能确定具体的方法体</strong>，该方法就可以定义为抽象方法。</p><p>定义格式：public abstract 返回值类型 方法名(参数列表)；alt+回车</p><p>注意事项：1.抽象类不能实例化-不能创建对象</p><p>​   2.抽象类中不一定有抽象方法，但是抽象方法的类一定是抽象类</p><p>​   3.可能有构造方法</p><p>​   4.<strong>抽象类的子类</strong></p><p>​<strong>要么重写抽象类中的所有抽象方法</strong>(推荐使用)</p><p>​要么是抽象类</p><p>意义：强制子类必须按照统一格式书写</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;抽象类和抽象方法&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-包-final-权限修饰符-代码块</title>
    <link href="https://readmengk90.github.io/2024/02/23/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>https://readmengk90.github.io/2024/02/23/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97/</id>
    <published>2024-02-23T00:55:45.618Z</published>
    <updated>2024-02-23T00:55:45.673Z</updated>
    
    <content type="html"><![CDATA[<p><strong>包：</strong></p><p>定义：包就是文件夹，用来管理各种不同功能的Java类，方便后期代码维护</p><p>规则：公司域名反写+包的作用名，需要全部英文小写，见名知意，com.itheima.domain</p><p>使用其他类的规则：</p><p>​1.使用同一个包中的类时，不需要导包</p><p>​2.使用java.lang包中的类时，不需要导包 </p><p>​3.其他情况都需要导包</p><p>​4.如果同时使用两个包中的同类名，需要用全类名 </p><p><strong>final:</strong></p><table><thead><tr><th>final修饰</th><th></th></tr></thead><tbody><tr><td>方法</td><td>表明该方法是最终方法，不能被重写</td></tr><tr><td>类</td><td>表明该类是最终类，不能被继承</td></tr><tr><td>变量</td><td>叫做常量，只能被赋值一次</td></tr></tbody></table><p>常量：在实际开发中，常量一般作为系统的配置信息，方便维护，提高可读性</p><p>常量的命名规则：</p><p>​单个单词：全部大写</p><p>​多个单词：全部大写，单词之间用下划线隔开</p><p>细节：</p><p>final修饰的变量是基本类型：那么变量存储的数据值不能发生改变</p><p>final修饰的变量是引用类型：那么变量存储的地址值不能发生改变，对象内部的可以改变。</p><p><strong>权限修饰符：</strong></p><p>权限修饰符：是用来控制一个成员能够被访问的范围的。</p><p>可以修饰成员变量，方法，构造方法，内部类。</p><p>分类：有四种作用范围从小到大(private&lt;缺省&lt;protected&lt;public)</p><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类</th><th align="center">同一个包中其他类</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">空着不写</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>规则：实际开发中，一般只用private和public</p><p>成员变量私有</p><p>方法公开</p><p>特列：如果方法中的代码是抽取其他方法中共性代码，这个方法一般私有。</p><p><strong>代码块：</strong></p><p>局部代码块：写在方法里面的一对单独的{}，提前结束变量的生命周期。</p><p>构造代码块：写在成员位置的代码块，可以把多个构造方法中重复的代码抽取出来，在创建本类对象的时候会优先于构造方法执行。</p><p><strong>静态代码块</strong>：格式:static{}</p><p>​特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次</p><p>​使用场景：在类加载的时候，做一些数据初始化的时候使用。</p><p>​应用场景：程序刚开始时进行数据的初始化</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;包-final-权限修饰符-代码块&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-多态</title>
    <link href="https://readmengk90.github.io/2024/02/21/java%E7%BB%A7%E6%89%BF-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%A4%9A%E6%80%81/"/>
    <id>https://readmengk90.github.io/2024/02/21/java%E7%BB%A7%E6%89%BF-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%A4%9A%E6%80%81/</id>
    <published>2024-02-21T13:09:43.581Z</published>
    <updated>2024-02-22T02:16:30.528Z</updated>
    
    <content type="html"><![CDATA[<p><strong>多态</strong>：多种形态，即，同种类型的对象，表现出得不太形态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><p>应用场景：多种权限的用户注册时。</p><p>表现形式：父类类型  对象名称 &#x3D; 子类对象；</p><p>多态的前提：1.有继承关系；</p><p>​        2.有父类引用指向子类对象（Fu f &#x3D; new Zi();）</p><p>​3.有方法重写；</p><p>多态的好处：使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。</p><p><strong>多态调用成员的特点：</strong></p><p>​<strong>变量调用</strong>：编译看左边，运行也看左边</p><p>​编译看左边:   javac编译代码的时候，会看左边的父类中有没有这个变量，如果有，编译成功，如果没有编译失败。</p><p>​运行看左边：java运行代码时，实际获取的就是左边父类中成员变量的值。</p><p>​<strong>方法调用</strong>：编译看左边，运行看右边<br>​编译看左边：javac编译代码时侯，会看左边的父类中有没有这个方法，如果有，编译成功，如果没有编译失败</p><p>​运行看右边：Java运行代码的时候，实际上运行的是子类中的方法</p><p>​如何理解？</p><p>​Animal   a  &#x3D;  new Dog();</p><p>​成员变量：在子类对象中，会把父类的成员变量也继承下来。父：name,子：name</p><p>​成员方法：如果子类对方法进行重写，那么在虚方法表中是会把父类的方法进行覆盖的。</p><p><strong>多态的优势和弊端：</strong></p><p>​优势：</p><p>​1. 在多态形式下，右边对象可以 实现解耦合，便于扩展和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Student</span>();  <span class="comment">//Person p = new Teacher();</span></span><br><span class="line">p.work();<span class="comment">//业务逻辑发生改变时，后续代码无需修改</span></span><br></pre></td></tr></table></figure><p>​2. <strong>定义方法时，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利</strong>。</p><p>​弊端：</p><p>​<strong>不能直接调用子类的特有功能</strong></p><p>​原因:当调用成员方法的时候,编译看左边，运行看右边，那么在编译的时候会先检查左边的父类中有没有这个方法，如果没有直接报错.</p><p>​解决方案:变回子类类型</p><p>​转换时如果转成其他类型，就会报错&#x2F;&#x2F;Cat c &#x3D; (Cat) a;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d.lookhome();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免转换类型与真实对象类型不一致会报错的解决方案</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog) a;</span><br><span class="line">d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat) a;</span><br><span class="line">c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK14新特性–判断和强转的合并.</p><p>先判断a是否为Dog类型，如果是，则强转为Dog类型，转换之后的变量名为d</p><p>如果不是，则不强转，结果直接为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line">d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line">c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;多态&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-继承</title>
    <link href="https://readmengk90.github.io/2024/02/20/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/"/>
    <id>https://readmengk90.github.io/2024/02/20/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/</id>
    <published>2024-02-20T01:37:51.641Z</published>
    <updated>2024-02-20T13:50:13.877Z</updated>
    
    <content type="html"><![CDATA[<p>封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为。</p><p><strong>继承</strong>：Java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起继承关系。</p><p>public class Student extends Person(){}</p><p>Student称为子类,Person称为父类</p><p>1.<strong>优点</strong>：</p><p>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性</p><p>子类可以在父类的基础上，增加其他的功能，使子类更强大。</p><p>子类可以得到父类的属性和行为，子类可以使用。</p><p><strong>什么时候用到继承？</strong>：当类与类之间，存在相同(共性)的内容，并满足子类是父类中的一种(学生是人的一种)，就可以考虑使用继承来优化代码。</p><p>2.<strong>方式</strong>：</p><p>1.自己设计</p><p>2.用别人的</p><p>3.<strong>特点</strong>：</p><p>​Java只<strong>支持</strong>单继承：</p><p>​<strong>不支持</strong>多继承：</p><p>​<strong>支持</strong>多层继承：子类A继承父类B,父类B可以继承父类C(直接父类(BA,CB)，间接父类(CA))</p><p>​<strong>每一个类都直接或间接的继承于Object</strong>(祖宗类)</p><p>4.<strong>子类到底能继承父类中的那些内容?:</strong>(继承和调用不一样)</p><table><thead><tr><th align="center">内容</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">构造方法</td><td align="center">非私有(NO)</td><td align="center">private(NO)</td></tr><tr><td align="center">成员变量</td><td align="center">非私有(YES)</td><td align="center">private(YES)   get&#x2F;set方法去使用</td></tr><tr><td align="center">成员方法</td><td align="center">非私有(YES)&#x2F;&#x2F;虚方法表</td><td align="center">private（NO）</td></tr></tbody></table><p>违背了构造方法的规则：构造方法名与类名必须相同。</p><p>只有父类中的<strong>虚方法</strong>(*非private,非static,非final)*才能被子类继承，生成虚方法表传给子类</p><p><strong>5.内存分析工具的使用：</strong></p><p>控制台输入jps:类的地址</p><p>内存分析工具：控制台输入 jhsdb hsdb</p><p><strong>6.继承中的特点</strong></p><p>继承中:成员变量的访问特点</p><p>​<strong>就近原则：谁离我近，我就用谁</strong>，先在局部位置找，然后本类位置找，父类成员位置找，逐级往上。</p><p>​如果重名了怎么访问?:</p><p>​从局部位置开始往上找，name</p><p>​从本类成员位置开始往上找, this.name</p><p>​从父类成员位置开始往上找, super.name</p><p>继承中:成员方法的访问特点</p><p>​直接调用：谁离我近，我就用谁</p><p>​先查看本类中是否有对应方法，有，就会调用子类的，如果没有，就会调用从父类中继承下来的对应方法</p><p>​super调用: 直接访问父类</p><p>​不会查看本类，直接查看父类中是否中是否有对应的方法</p><p>继承中:构造方法的特点</p><p>​ 父类中的构造方法不会 被子类继承。（构造方法名与类名不一致了）</p><p>​子类中所有的构造方法默认先访问父类中的无参构造，在执行自己的</p><p>​<strong>原因：</strong></p><p>​子类在初始化的时候，又可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。</p><p>​子类在初始化之前，一点要调用父类构造方法先完成父类数据空间的初始化</p><p>​<strong>调用父类方法</strong>：</p><p>​子类构造方法的第一行语句默认都是：super(),不写也存在，且必须在第一行</p><p>​如果想调用父类的有参构造，必须手动写super进行调用</p><p><strong><em>方法</em>的重写</strong>：当父类的方法不能满足子类现在的需求时，需要进行方法重写</p><p>​书写格式：在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法。</p><p>​@Override重写注解–给虚拟机和程序员看的</p><p>​1.@Override是放在重写后的方法上，校验子类重写时语法是否正确</p><p>​2.加上注解后如果有红色波浪线，表示语法错误。</p><p>​3.建议重写方法都加@Override注解，代码安全，优雅</p><p>​要求：</p><p>​1.重写方法的名称，形参列表必须与父类中的一致。</p><p>​2.子类重写父类方法时，访问权限<strong>子类</strong>必须大于等于父类(空着不写&lt;protected&lt;public)。</p><p>​3.子类重写父类方法时，返回值类型必须小于等于父类。</p><p>​<strong>4.建立：重写的方法尽量和父类保持一致。</strong></p><p>​<strong>5.只有被添加到虚方法表中的方法才能被重写。</strong></p><p><strong>7.this,super使用总结</strong></p><p>​this:本类,理解为一个变量，表示当前方法调用在的地址值。</p><p>​super:代表父类存储空间</p><table><thead><tr><th align="center">关键字</th><th align="center">访问成员变量</th><th align="center">访问成员方法</th><th align="center">访问构造方法</th></tr></thead><tbody><tr><td align="center">this</td><td align="center">this.成员变量<br>访问本类的成员变量</td><td align="center">this.成员方法(…..)<br/>访问本类成员方法</td><td align="center">this(…..)<br/>访问本类构造方法</td></tr><tr><td align="center">super</td><td align="center">super.成员变量<br/>访问父类成员变量</td><td align="center">super.成员方法(…..)<br/>访问父类的成员方法</td><td align="center">super(…….)<br/>访问父类构造方法</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;继承&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶main()方法的进一步理解</title>
    <link href="https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6main()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
    <id>https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6main()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3/</id>
    <published>2024-02-19T14:34:13.952Z</published>
    <updated>2024-02-19T14:34:14.036Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public:被JVM(虚拟机)调用，访问权限足够大</span></span><br><span class="line"><span class="comment">static:被JVM调用，不用创建对象，直接类名访问，因为main()方法是静态的，所以测试类中其他方法也需要是静态的</span></span><br><span class="line"><span class="comment">void:被JVM调用，不需要给JVM返回值</span></span><br><span class="line"><span class="comment">main:一个通用的名称，虽然不是关键字，但是被JVM识别</span></span><br><span class="line"><span class="comment">String[] args:以前用于接收键盘录入数据的，现在没用。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;静态变量&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-static静态变量</title>
    <link href="https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-static/"/>
    <id>https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-static/</id>
    <published>2024-02-19T07:50:51.004Z</published>
    <updated>2024-02-19T14:16:30.191Z</updated>
    
    <content type="html"><![CDATA[<p><strong>static</strong>：表示静态，是Java中的一个修饰符，可以修饰成员方法，成员变量。</p><p>学生对象共享同一个老师</p><p>public static String treachName;</p><p>类名调用，对象调用均可</p><table><thead><tr><th>被static修饰的成员变量，叫做静态变量</th><th>被static修饰的成员方法，叫做静态方法</th></tr></thead><tbody><tr><td>特点：被这个类所有对象共享<br>调用方式:<br>               类名调用(推荐)<br>               对象名调用<br>静态变量是随着类的加载而加载的，优先于对象出现的<br><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219162328.png"></td><td>特点：多用在测试类和工具类，javabean类中很少会用。<br>调用方式:<br/>               类名调用(推荐)<br/>               对象名调用<br/><strong>工具类</strong>：帮助我们做一些事情，但是不描述任何事物的类<br>1.类名见名知意<br>2.私有化构造方法<br>3.方法都定义为静态的<br><strong>javabean类</strong>：用来描述一类事物的类。比如student，teacher.<br><strong>测试类</strong>：用来坚持其他类是否书写正确，带有main方法的类，是程序的入口</td></tr></tbody></table><p>那些属性可以被定义为静态—-具有共享性质的</p><p><strong>static的注意事项</strong></p><p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p><p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p><p>3.静态方法中<strong>没有</strong>this关键字</p><p><strong>this:表示当前方法调用者的地址值，这个this是由虚拟机赋值的</strong>，<strong>方法内调用成员变量的时候就可以区分不太的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">(Student <span class="built_in">this</span>)</span>&#123; <span class="comment">//Student this在非静态方法中是隐藏的</span></span><br><span class="line">System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+teachernaem)<span class="comment">//this.name  this.age  this.teachername</span></span><br><span class="line">    <span class="comment">//调用其他方法</span></span><br><span class="line">    show2<span class="comment">//this.show2();</span></span><br><span class="line">&#125;</span><br><span class="line">s1.show1/s2.show2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么非静态方法设计没有this?</p><p>​和某一个对象没有关系，共享思想。</p><p>静态(变量&#x2F;方法)随着类的加载而加载，非静态(变量&#x2F;方法)跟对象有关。</p><p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219220725.png"></p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221017.png"></p><p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221500.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;静态变量&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>登录错误时的次数限制</title>
    <link href="https://readmengk90.github.io/2024/02/19/%E7%99%BB%E5%BD%95%E5%A4%B1%E8%AF%AF%E6%97%B6%E6%AC%A1%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>https://readmengk90.github.io/2024/02/19/%E7%99%BB%E5%BD%95%E5%A4%B1%E8%AF%AF%E6%97%B6%E6%AC%A1%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6/</id>
    <published>2024-02-19T06:28:35.124Z</published>
    <updated>2024-02-19T07:14:45.605Z</updated>
    
    <content type="html"><![CDATA[<p>day12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(list, username);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;<span class="comment">//集合中没有该用户名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名未注册，请先注册&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">vericode</span> <span class="operator">=</span> getVericode();</span><br><span class="line">        System.out.println(vericode);</span><br><span class="line">        System.out.println(<span class="string">&quot;请录入验证码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">againcode</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span> (vericode.equalsIgnoreCase(againcode)) &#123;<span class="comment">//验证码正确</span></span><br><span class="line">            System.out.println(<span class="string">&quot;验证码录入成功&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功登录&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新录入验证码:&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stuInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(username, password, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">boolean</span> result=checkstuInfo(list,stuInfo);</span><br><span class="line">    <span class="keyword">if</span> (result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功，可以使用你的学生管理系统了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败，用户名或密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前账号&quot;</span>+username+<span class="string">&quot;被锁定&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误，还剩下&quot;</span>+(<span class="number">2</span>-i)+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;次数限制&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>生成验证码</title>
    <link href="https://readmengk90.github.io/2024/02/19/%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://readmengk90.github.io/2024/02/19/%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2024-02-19T05:40:15.169Z</published>
    <updated>2024-02-19T06:15:54.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="验证码规则："><a href="#验证码规则：" class="headerlink" title="验证码规则："></a>验证码规则：</h4><p>​长度为5</p><p>​由4位大写或者小写字母和1位数字组成，同一个字母可重复</p><p>​数字可以出现在任意位置</p><p>比如：aQa1K</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getVericode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建一个集合添加所有的大写和小写字母</span></span><br><span class="line">    ArrayList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i));</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//2.要随机抽取4个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取随机索引</span></span><br><span class="line">            <span class="type">int</span> index=rd.nextInt(list.size());</span><br><span class="line">            <span class="comment">//利用索引获取字符</span></span><br><span class="line">            <span class="type">char</span> c=list.get(index);</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.生成1位随机数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> rd.nextInt(<span class="number">10</span>); <span class="comment">// 生成0到9之间的随机数字</span></span><br><span class="line">    sb.append(number);</span><br><span class="line">    <span class="comment">//4.将字符串变成字符数组，然后再新建一个新的字符串</span></span><br><span class="line">    <span class="type">char</span>[] arr=sb.toString().toCharArray();</span><br><span class="line">    <span class="comment">//拿着最后一个索引，跟随机索引进行交换</span></span><br><span class="line">    <span class="type">int</span> randomIndex=rd.nextInt(arr.length);</span><br><span class="line">        <span class="comment">//最大索引指向的元素，跟随机索引指向的元素交换</span></span><br><span class="line">    <span class="type">char</span> temp=arr[randomIndex];</span><br><span class="line">        arr[randomIndex]=arr[arr.length-<span class="number">1</span>];</span><br><span class="line">    arr[arr.length-<span class="number">1</span>]=temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;验证码(数字+字母)&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>跳出多重循环</title>
    <link href="https://readmengk90.github.io/2024/02/11/java%E5%9F%BA%E7%A1%80-%E8%B7%B3%E5%87%BA%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF/"/>
    <id>https://readmengk90.github.io/2024/02/11/java%E5%9F%BA%E7%A1%80-%E8%B7%B3%E5%87%BA%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF/</id>
    <published>2024-02-11T12:14:32.134Z</published>
    <updated>2024-02-16T13:55:50.829Z</updated>
    
    <content type="html"><![CDATA[<p>loop:while (true) {<br>Scanner sc &#x3D; new Scanner(System.in);<br>System.out.println(“请输入您的选择:”);<br>String result &#x3D; sc.next();<br>switch (result){<br>    case “5”-&gt; {<br>                    System.out.println(“退出”);<br>                    break loop;<br>                }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">停止虚拟机运行</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">while (true) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入您的选择:&quot;);</span><br><span class="line">String result = sc.next();</span><br><span class="line">switch (result)&#123;</span><br><span class="line">case &quot;5&quot;-&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;退出&quot;);</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;跳出多重循环&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>集合ArrayList</title>
    <link href="https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/"/>
    <id>https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/</id>
    <published>2024-02-10T00:53:57.243Z</published>
    <updated>2024-02-11T15:16:47.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合ArrayList"><a href="#集合ArrayList" class="headerlink" title="集合ArrayList"></a>集合ArrayList</h1><p>长度可变的容器(自动扩容)</p><p>集合不能<strong>直接</strong>存基本数据类型–》包装类</p><ol><li><p>为什么要有集合?</p><p>ArrayList:</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;泛型&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;可省略&gt;();</span><br><span class="line"><span class="comment">//此时我们创建的是ArrayList的对象，而ArrayList是Java已经写好的一个类，这个类在底层做了一些处理打印对象不是地址值，而是集合中存储数据的内容，在展示的时候会拿[]把所有的数据进行包裹。</span></span><br></pre></td></tr></table></figure><p>成员方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E,e)</td><td>添加元素，返回值表示是否添加成功</td></tr><tr><td>boolean remove(E,e)</td><td>删除指定元素，返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回被删除元素</td></tr><tr><td>E set(int index,E,e)</td><td>修改指定索引下的元素，返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table></li><li><p>泛型：限定集合中存储数据的类型，集合不能<strong>直接存储</strong>基本数据类型，可以存储引用数据类型。</p></li><li><p>基本数据类型对应的包装类</p><table><thead><tr><th align="center">byte</th><th align="center">Byte</th></tr></thead><tbody><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">char</td><td align="center"><strong>Character</strong></td></tr><tr><td align="center">int</td><td align="center"><strong>Integer</strong></td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table></li><li><p>集合返回多个对象</p><p>技巧：如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回(集合&#x2F;数组)</p></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关类的底层原理</title>
    <link href="https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2024-02-07T00:34:09.426Z</published>
    <updated>2024-02-07T00:34:32.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串相关类的底层原理："><a href="#字符串相关类的底层原理：" class="headerlink" title="字符串相关类的底层原理："></a>字符串相关类的底层原理：</h1><p><strong>1.字符串存储的内存原理</strong></p><p>​直接赋值会复用字符串常量池</p><p>​new出来不会复用，而是开辟一个新空间</p><p><strong>2.&#x3D;&#x3D;号比较的到底是什么？</strong></p><p>​基本数据类型比较数据值</p><p>​引用数据类型比较地址值</p><p><strong>3.字符串拼接的底层原理</strong></p><p>​<strong>等号右边没有变量参与：</strong></p><p>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串次中的字符串。</p><p>​<strong>等号右边有变量参与：</strong></p><p>JDK8以前：系统底层会自动创建一个StringBuilder对象，然后再调用其append方法完成拼接。拼接后，再调用其toString方法转换为String类型，而toString方法的底层是直接new了一个字符串对象。</p><p>JDK8版本：系统会预估字符串拼接后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</p><p><strong>4.StringBuilder提高效率原理图</strong></p><p>所有要拼接的内容都会往String Builder中放，不会创建很多无用的空间，节约内存。</p><p>​<img src="C:\Users\Administrator\Desktop\微信截图_20240207073607.png"></p><p><strong>5.StringBuilder源码分析</strong></p><p>默认创建一个长度为16的字节数组，添加的内容长度小于16，直接存，添加的内容大于16会扩容(原来的内容*2+2)，如果扩容之后还不够，以实际长度为准。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StringJoiner</title>
    <link href="https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/"/>
    <id>https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/</id>
    <published>2024-02-06T13:18:34.058Z</published>
    <updated>2024-02-06T14:41:24.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><p>拼接速度快，代码又简单的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    StringJoiner sj=<span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sj.add(arr[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringJoiner(间隔符)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号。</td></tr><tr><td align="center">public StringJoiner(间隔符合，开始符号，结束符号)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号，开始符号，结束符号。</td></tr></tbody></table><p><strong>成员方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner <strong>add(添加的内容)</strong></td><td>添加数据，并返回对象本身</td></tr><tr><td>public int <strong>length()</strong></td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String <strong>toString()</strong></td><td>返回一个字符串(该字符串就是拼接之后的结果)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;StringBuilder的升级StringJoiner&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder</title>
    <link href="https://readmengk90.github.io/2024/02/05/java%E5%9F%BA%E7%A1%80-StringBuilder/"/>
    <id>https://readmengk90.github.io/2024/02/05/java%E5%9F%BA%E7%A1%80-StringBuilder/</id>
    <published>2024-02-05T15:34:25.941Z</published>
    <updated>2024-02-06T13:15:54.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><strong>StringBuilder</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        s=s+<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据量较大时，字符串拼接耗时长</span></span><br></pre></td></tr></table></figure><p>1.为什么要学习StringBuilder?:<strong>提高字符串的操作效率</strong></p><p>   StringBuilder可以看成是一个容器，创建之后里面的<strong>内容是可变的</strong>,不像字符串一样是固定的。</p><p>2.StringBuilder的构造方法</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringBuilder()</td><td align="center">创建一个空白可变字符，不含有任何内容</td></tr><tr><td align="center">public StringBuilder(String str)</td><td align="center">根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table><p>3.StringBuilder常用方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转换成String</td></tr></tbody></table><p><strong>StringBuilder是Java已经写好的类，Java在底层对它做了一些特殊处理，打印对象不是地址值而是属性值。</strong></p><p>链式编程：当我们在调用一个方法的时候，不需要用变量接收他的结果，可以继续调用其他方法。</p><p>使用StringBuilder的场景：</p><p>​1.字符串的拼接</p><p>​2.字符串的反转</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;StringBuilder&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>金额转换思想</title>
    <link href="https://readmengk90.github.io/2024/02/04/%E9%87%91%E9%A2%9D%E8%BD%AC%E6%8D%A2%E6%80%9D%E6%83%B3/"/>
    <id>https://readmengk90.github.io/2024/02/04/%E9%87%91%E9%A2%9D%E8%BD%AC%E6%8D%A2%E6%80%9D%E6%83%B3/</id>
    <published>2024-02-04T12:42:51.453Z</published>
    <updated>2024-02-05T01:39:45.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="金额转换思想："><a href="#金额转换思想：" class="headerlink" title="金额转换思想："></a>金额转换思想：</h1><p>​        2135</p><p>​             转大写：(查表法)1.取各位上的数–2.大写(数组)值的数组索引是各位的数</p><p>​    贰壹叁伍</p><p>​                    前面补0：</p><p>​零零零贰壹叁伍</p><p>​            插入单位:</p><p>零佰零拾零万贰仟壹佰叁拾伍元</p><p><strong>一：转大写</strong></p><p>1.得到money里面的每一位数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建大写数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    String[] arr=&#123;<span class="string">&quot;零&quot;</span>,<span class="string">&quot;壹&quot;</span>,<span class="string">&quot;贰&quot;</span>,<span class="string">&quot;叁&quot;</span>,<span class="string">&quot;肆&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;陆&quot;</span>,<span class="string">&quot;柒&quot;</span>,<span class="string">&quot;捌&quot;</span>,<span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> arr[number];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.每位上的数就是大写数组的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String strMoney=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    String capitalNumber=getCapitalNumber(ge);</span><br><span class="line">    <span class="comment">//反向拼接</span></span><br><span class="line">    strMoney=capitalNumber+strMoney;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二:前面补零(补齐7位)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ZeroCount=<span class="number">7</span>-strMoney.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ZeroCount;i++)&#123;</span><br><span class="line">    strMoney=<span class="string">&quot;零&quot;</span>+strMoney;<span class="comment">//字符串拼接,前拼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三:插入单位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组单位</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2.遍历strMoney，然后把大写数字和单位拼接到字符串中</span></span><br><span class="line">String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strMoney.length();i++)&#123;</span><br><span class="line">    <span class="type">char</span> c=strMoney.charAt(i);</span><br><span class="line">    result=result+c+arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;Java实现的数字中文大写（正写）转换&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Java API 和字符串</title>
    <link href="https://readmengk90.github.io/2024/02/03/Java%E5%9F%BA%E7%A1%80-API%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://readmengk90.github.io/2024/02/03/Java%E5%9F%BA%E7%A1%80-API%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-02-03T10:57:21.851Z</published>
    <updated>2024-02-08T02:41:28.509Z</updated>
    
    <content type="html"><![CDATA[<p>**API(**Application Programming Interface):应用程序编程接口</p><p>简单理解：API就是别人已经写好的东西，我们不需要自己编写，直接使用即可.</p><p>Java API:指的就是JDK中提供得各种功能得Java类，这些类将底层的实现封装起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。</p><p>API帮助文档：帮助开发人员更好的使用API和查询API的一个工具</p><p>链接：<a href="https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei">https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei</a><br>提取码：rqei </p><p>如何使用帮助文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.io包：读取文件的内容，或者把数据写到文件中去</span><br><span class="line">java.lang包：</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong>JAVA不会字符串，开发就会凉一半</p><p>String：定义在java.lang.String包内，代表字符串，Java程序中的所有字符串(“abc”)文字都为此类的对象。</p><p>​字符串的内容是不会发生改变的，它的对象在创建后不能被更改</p><p><em>创建String对象的两种方式</em>：</p><p>1.<strong>直接赋值</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.<strong>使用new关键字使用不同的构造方法去创建字符串对象</strong>:</p><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String（）</td><td align="center">创建空白字符串，不含任何内容<br>String s0 &#x3D; new String( );</td></tr><tr><td align="center">public String(String original)</td><td align="center">根据传入的字符串，创建字符串对象<br>String s1 &#x3D; new String(“abc”)</td></tr><tr><td align="center">public String(char[ ] chs)</td><td align="center">根据传入字符数组，创建字符串对象<br>char[] chs &#x3D; {‘a’,’b’,’c’,’d’}<br>String s2 &#x3D; new String(chs)</td></tr><tr><td align="center">public String(byte[ ] chs)</td><td align="center">根据传入字节数组，创建字符串对象<br>byte[] bytes&#x3D; {97,98,99,100}<br>String s3 &#x3D; new String(bytes)</td></tr></tbody></table><p>字符串-字符数组-字符串：(应用场景:修改字符串的内容)</p><p>字节数组-字符串：(应用场景：网络中传输的数据其实都是字节信息)</p><p><em>字符串在内存中是如何创建的</em></p><p>StringTable(<strong>字符串常量池</strong>)：直接赋值的方式获取的字符串放在串次中，串池在<strong>堆内存</strong>中</p><p>当时有双引号直接赋值时，系统会坚持该字符串在串池中是否存在，不存在，创建新的，<strong>存在，复用。</strong></p><p>Java的常用方法1-<strong>字符串的比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1==s2);<span class="comment">//这种比较可以吗？</span></span><br></pre></td></tr></table></figure><p><em>&#x3D;&#x3D;号比较的原理？</em>（String属于引用数据类型）</p><p>基本数据类型：&#x3D;&#x3D;号比较基本数据类型比较的是<strong>数据值</strong></p><p>引用数据类型：&#x3D;&#x3D;号比较引用数据类型比较的是<strong>地址值</strong></p><p><em>字符串的比较？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//串池中存在该字符串，复用，地址值相同</span></span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line"><span class="comment">//----------------------------------------------------------</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里面的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//记录堆里面的地址</span></span><br><span class="line">System.out.println(s1==s2);</span><br></pre></td></tr></table></figure><p>字符串比较：</p><p><strong>boolean equals方法(要比较的字符串)</strong> &#x2F;&#x2F;完全一样的结果才是true，否则为false.</p><p><strong>boolean equalsIgnoreCase(要比较的字符串)</strong>  &#x2F;&#x2F;忽略(<strong>英文状态下的</strong>)大小写的比较,适用于验证码校验</p><p><strong>&#x2F;&#x2F;键盘录入得到的字符串是new出来的</strong>，只有想比较字符串的内容，就必须要用String里面的方法。</p><p>Java常用的方法2-<strong>遍历字符串</strong></p><table><thead><tr><th>public char charAt(int index):根据索引返回字符</th></tr></thead><tbody><tr><td><strong>public int length():返回此字符串的长度，字符串的长度：字符串对象.length()</strong></td></tr></tbody></table><p>Java常用的方法3-<strong>字符串拼接和反转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String newStr=<span class="string">&quot;&quot;</span>;<span class="comment">//-------------------------------拼接--------------</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> L-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            newStr=newStr+c;----------------------思想--------------</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br></pre></td></tr></table></figure><p>Java常用的方法4-<strong>字符串的截取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex,<span class="type">int</span> endIndex)</span>   <span class="comment">//截取---包头不包围，包左不包右</span></span><br><span class="line">    <span class="comment">//只有返回值才是截取的小串，对原来的字符串没有任何影响，字符串本身不能发生变化。</span></span><br><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex)</span>  <span class="comment">//截取到末尾</span></span><br></pre></td></tr></table></figure><p> Java常用的方法5-<strong>新旧值替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">replace</span><span class="params">(旧值,新值)</span><span class="comment">//替换</span></span><br><span class="line"><span class="comment">//注意点：只有返回值才是替换之后的结果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;JavaAPI 和字符串&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>idea插件集合</title>
    <link href="https://readmengk90.github.io/2024/01/25/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/"/>
    <id>https://readmengk90.github.io/2024/01/25/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</id>
    <published>2024-01-25T15:36:38.404Z</published>
    <updated>2024-01-26T02:09:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>idea插件集合:</p><p>1:<strong>一秒生成标准JavaBean–插件PTG</strong></p><ol><li>电脑连接外网</li><li>idea-file-settings-Plugins-Marketplace-搜索ptg-install</li><li>idea右键-选择Ptg To JavaBean</li></ol><p><img src="/images/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/%E6%8F%92%E4%BB%B61.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;Idea的好插件&lt;/center&gt;</summary>
    
    
    
    <category term="插件库" scheme="https://readmengk90.github.io/categories/%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
    
    
    <category term="插件库" scheme="https://readmengk90.github.io/tags/%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2024-01-25T07:31:26.428Z</published>
    <updated>2024-01-27T13:13:02.827Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象</p><p>​面向对象介绍:</p><p>​面向:拿，找。</p><p>​对象:能干活的东西。</p><p>​面向对象编程:拿东西过来做对应的事情。</p><ol><li><p><strong>设计对象并使用</strong></p><ol><li><p>类和对象</p><p>类(设计图):是对象共同特征的描述(类名首字母建议大写，需要见名知意，驼峰命名)；</p><p>对象:是真实存在的具体东西(在Java中，必须先设计类，才能获得对象)</p><p><strong>如何得到对象:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    <span class="number">1.</span>成员变量(代表属性的，一般是名词)<span class="comment">//完整定义格式:修饰符 数据类型 变量名称= 初始化值;一般无需指定初始化值(创建对象后再赋值),存在默认值，修饰符一般不写</span></span><br><span class="line">    <span class="number">2.</span>成员方法(代表行为的，一般是动词)</span><br><span class="line">&#125;</span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名( );</span><br></pre></td></tr></table></figure><p><strong>如何使用对象:</strong></p><p>​访问属性:对象名.成员变量</p><p>​访问行为:对象名.方法名(…)</p><p><strong>类的注意事项</strong>:</p><p>开发中的设计</p><ol><li><p>用来描述一类事物的类，专业就叫:<strong>javabean类</strong>。在javabean类中，是不写main方法的</p></li><li><p>在以前，编写main方法的类，叫做<strong>测试类</strong>。可以在测试类中创建javabean类的对象并进行赋值调用。</p></li><li><p>一个<strong>Java文件</strong>中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名，实际开发中建议还是一个文件定义一个class类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p><strong>封装</strong></p><p>告诉我们，如何正确设计对象的属性和方法。</p><p>原则:对象代表什么，就得封装对应的数据，并提供数据对应的行为。（　张三　杀　李四（生死状态））</p><p><strong>private</strong>关键字:是一个权限修饰符,可以修饰成员(成员变量和成员方法). </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数据安全问题(p.age=-99)</span></span><br><span class="line"> 被<span class="keyword">private</span>修饰的成员只能在本类中才能访问**(*解决了数据安全问题*).</span><br><span class="line">     <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//2.实现正确的数据可以赋值,错误的无法赋值-通过get set方法赋值,过滤通道</span></span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被其他的类调用和访问</span></span><br><span class="line"><span class="comment">//在测试类中调用赋值</span></span><br><span class="line">GirlFriend gf1=<span class="keyword">new</span> <span class="title class_">GirlFriend</span>();</span><br><span class="line">gf1.setName(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">gf1.setAge(<span class="number">19</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> gf1.getName();</span><br><span class="line"><span class="type">int</span> age=gf1.getAge();</span><br></pre></td></tr></table></figure><p><strong>this关键字</strong>:</p><p>成员变量(方法外,类里面)和局部变量(方法里).<strong>就近原则</strong>,想用成员变量需加this.</p><p>this关键字的作用可以区别成员变量和局部变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造方法:</strong></p><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    修饰符 类名(参数) &#123;</span><br><span class="line">        方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//空参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123; <span class="comment">//创建对象调用实参构造:Student s = new Student(&quot;AA&quot;,19);</span></span><br><span class="line">        <span class="comment">//全参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br><span class="line"><span class="comment">//全参构造,在方法里面就可以给所有的成员变量赋值,不用再用set方法进行赋值了,简化代码.</span></span><br><span class="line"><span class="comment">//空参的构造方法,利用空参构造创建对象,成员变量默认初始化值.,</span></span><br><span class="line"><span class="comment">//如果我们自己没写任何构造方法,那么虚拟机会给我们加一个空参构造方法;如果已经定义了带参构造方法,系统将不会提供默认的无参构造方法.</span></span><br><span class="line"><span class="comment">//构造方法的重载,带参构造方法和无参构造方法,两者方法名相同,但是参数不同,这叫做构造方法的重载.</span></span><br><span class="line"><span class="comment">//执行时机:构造方法不能手动调用,在创建对象的时候由虚拟机调用,每创建一次对象就调用一次构造方法.</span></span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br></pre></td></tr></table></figure><p>特点:方法名和类名相同,大小写也要一致;</p><p>​没有返回值类型,连void都没有;</p><p>​没有具体的返回值(不能由return带回结果数据);</p><p>作用:在创建对象的时候由<strong>虚拟机自动调用</strong>构造方法给成员变量进行初始化(赋值)的.</p><p>建议:实际开发中,空参构造和有参构造都会写上,因为有时不完全知道属性值</p></li><li><p><strong>标准JavaBean</strong></p><ol><li>类名需要见名知意,驼峰命名</li><li>成员变量使用private修饰</li><li>提供至少两个构造方法(无参构造方法&amp;全参构造方法)</li><li>成员方法:提供每一个私有化的成员变量对应的setXxx()&#x2F;getXxx()方法,如果还有其他行为,也需要写上</li></ol></li><li><p><strong>对象内存图</strong></p><p>方法区:字节码文件加载时进入的内存</p><p>栈内存:方法运行时所进入的内存，变量也在这里</p><p>堆内存:new出来的东西会在这块内存中开辟空间并产生地址</p><p><strong>一个对象的内存图</strong>:</p><p>Student s &#x3D; new Student();</p><p>​1.加载class文件(方法区临时存储main()方法，虚拟机调用main()方法，main()方法加载进栈)</p><p>​2.申明局部变量</p><p>​3.在堆内存中开辟一个空间</p><p>​4.默认初始化</p><p>​5.显示初始化</p><p>​6.构造方法的初始化</p><p>​7.将堆内存中的地址值赋值给左边的局部变量</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1.png"></p><p><strong>多个对象的内存图</strong>:</p><p>对个对象时class对象不用重新加载</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A12.png"></p><p><strong>两个变量指向同一个对象内存图</strong>:</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240127202759.png"></p><p><strong>this的内存原理</strong>:</p><p>作用：变量得就近原则，区分局部变量和成员变量。</p><p>本质：所在<strong>方法调用者的地址值</strong></p><p>​</p><p><strong>基本数据类型和引用数据类型的区别</strong>:</p><pre><code> 基本数据类型：数据值是存储在自己的空间中(栈)，赋值给其他变量，也是赋得真实得值。</code></pre><p>​ 引用数据类型：数据值 是存储在其他空间中，自己空间中存储得是地址值，赋值给其他变量，赋得是地址值</p><p><strong>局部变量和成员变量的区别</strong>:</p><p>​成员变量：类中方法外的变量</p><p>​局部变量：方法中的变量，（栈里面的局部变量没有默认值，是要给个初始化值才能用的）</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;设计对象并使用&amp;封装&amp;内存图&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
</feed>
