<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东瓶西镜</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="https://readmengk90.github.io/atom.xml" rel="self"/>
  
  <link href="https://readmengk90.github.io/"/>
  <updated>2024-02-10T13:12:22.029Z</updated>
  <id>https://readmengk90.github.io/</id>
  
  <author>
    <name>Amber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集合ArrayList</title>
    <link href="https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/"/>
    <id>https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/</id>
    <published>2024-02-10T00:53:57.243Z</published>
    <updated>2024-02-10T13:12:22.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合ArrayList"><a href="#集合ArrayList" class="headerlink" title="集合ArrayList"></a>集合ArrayList</h1><p>长度可变的容器(自动扩容)</p><p>集合不能<strong>直接</strong>存基本数据类型–》包装类</p><ol><li><p>为什么要有集合?</p><p>ArrayList:</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;泛型&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;可省略&gt;();</span><br><span class="line"><span class="comment">//此时我们创建的是ArrayList的对象，而ArrayList是Java已经写好的一个类，这个类在底层做了一些处理打印对象不是地址值，而是集合中存储数据的内容，在展示的时候会拿[]把所有的数据进行包裹。</span></span><br></pre></td></tr></table></figure><p>成员方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E,e)</td><td>添加元素，返回值表示是否添加成功</td></tr><tr><td>boolean remove(E,e)</td><td>删除指定元素，返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回被删除元素</td></tr><tr><td>E set(int index,E,e)</td><td>修改指定索引下的元素，返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table></li><li><p>泛型：限定集合中存储数据的类型，集合不能<strong>直接存储</strong>基本数据类型，可以存储引用数据类型。</p></li><li><p>基本数据类型对应的包装类</p><table><thead><tr><th align="center">byte</th><th align="center">Byte</th></tr></thead><tbody><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">char</td><td align="center"><strong>Character</strong></td></tr><tr><td align="center">int</td><td align="center"><strong>Integer</strong></td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table></li><li><p>集合返回多个对象</p><p>技巧：如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回(集合&#x2F;数组)</p></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关类的底层原理</title>
    <link href="https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2024-02-07T00:34:09.426Z</published>
    <updated>2024-02-07T00:34:32.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串相关类的底层原理："><a href="#字符串相关类的底层原理：" class="headerlink" title="字符串相关类的底层原理："></a>字符串相关类的底层原理：</h1><p><strong>1.字符串存储的内存原理</strong></p><p>​直接赋值会复用字符串常量池</p><p>​new出来不会复用，而是开辟一个新空间</p><p><strong>2.&#x3D;&#x3D;号比较的到底是什么？</strong></p><p>​基本数据类型比较数据值</p><p>​引用数据类型比较地址值</p><p><strong>3.字符串拼接的底层原理</strong></p><p>​<strong>等号右边没有变量参与：</strong></p><p>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串次中的字符串。</p><p>​<strong>等号右边有变量参与：</strong></p><p>JDK8以前：系统底层会自动创建一个StringBuilder对象，然后再调用其append方法完成拼接。拼接后，再调用其toString方法转换为String类型，而toString方法的底层是直接new了一个字符串对象。</p><p>JDK8版本：系统会预估字符串拼接后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</p><p><strong>4.StringBuilder提高效率原理图</strong></p><p>所有要拼接的内容都会往String Builder中放，不会创建很多无用的空间，节约内存。</p><p>​<img src="C:\Users\Administrator\Desktop\微信截图_20240207073607.png"></p><p><strong>5.StringBuilder源码分析</strong></p><p>默认创建一个长度为16的字节数组，添加的内容长度小于16，直接存，添加的内容大于16会扩容(原来的内容*2+2)，如果扩容之后还不够，以实际长度为准。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StringJoiner</title>
    <link href="https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/"/>
    <id>https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/</id>
    <published>2024-02-06T13:18:34.058Z</published>
    <updated>2024-02-06T14:41:24.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><p>拼接速度快，代码又简单的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    StringJoiner sj=<span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sj.add(arr[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringJoiner(间隔符)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号。</td></tr><tr><td align="center">public StringJoiner(间隔符合，开始符号，结束符号)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号，开始符号，结束符号。</td></tr></tbody></table><p><strong>成员方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner <strong>add(添加的内容)</strong></td><td>添加数据，并返回对象本身</td></tr><tr><td>public int <strong>length()</strong></td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String <strong>toString()</strong></td><td>返回一个字符串(该字符串就是拼接之后的结果)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;StringBuilder的升级StringJoiner&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StringBuilder</title>
    <link href="https://readmengk90.github.io/2024/02/05/java%E5%9F%BA%E7%A1%80-StringBuilder/"/>
    <id>https://readmengk90.github.io/2024/02/05/java%E5%9F%BA%E7%A1%80-StringBuilder/</id>
    <published>2024-02-05T15:34:25.941Z</published>
    <updated>2024-02-06T13:15:54.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><strong>StringBuilder</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    String s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        s=s+<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据量较大时，字符串拼接耗时长</span></span><br></pre></td></tr></table></figure><p>1.为什么要学习StringBuilder?:<strong>提高字符串的操作效率</strong></p><p>   StringBuilder可以看成是一个容器，创建之后里面的<strong>内容是可变的</strong>,不像字符串一样是固定的。</p><p>2.StringBuilder的构造方法</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringBuilder()</td><td align="center">创建一个空白可变字符，不含有任何内容</td></tr><tr><td align="center">public StringBuilder(String str)</td><td align="center">根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table><p>3.StringBuilder常用方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转换成String</td></tr></tbody></table><p><strong>StringBuilder是Java已经写好的类，Java在底层对它做了一些特殊处理，打印对象不是地址值而是属性值。</strong></p><p>链式编程：当我们在调用一个方法的时候，不需要用变量接收他的结果，可以继续调用其他方法。</p><p>使用StringBuilder的场景：</p><p>​1.字符串的拼接</p><p>​2.字符串的反转</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;StringBuilder&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>金额转换思想</title>
    <link href="https://readmengk90.github.io/2024/02/04/%E9%87%91%E9%A2%9D%E8%BD%AC%E6%8D%A2%E6%80%9D%E6%83%B3/"/>
    <id>https://readmengk90.github.io/2024/02/04/%E9%87%91%E9%A2%9D%E8%BD%AC%E6%8D%A2%E6%80%9D%E6%83%B3/</id>
    <published>2024-02-04T12:42:51.453Z</published>
    <updated>2024-02-05T01:39:45.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="金额转换思想："><a href="#金额转换思想：" class="headerlink" title="金额转换思想："></a>金额转换思想：</h1><p>​        2135</p><p>​             转大写：(查表法)1.取各位上的数–2.大写(数组)值的数组索引是各位的数</p><p>​    贰壹叁伍</p><p>​                    前面补0：</p><p>​零零零贰壹叁伍</p><p>​            插入单位:</p><p>零佰零拾零万贰仟壹佰叁拾伍元</p><p><strong>一：转大写</strong></p><p>1.得到money里面的每一位数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建大写数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    String[] arr=&#123;<span class="string">&quot;零&quot;</span>,<span class="string">&quot;壹&quot;</span>,<span class="string">&quot;贰&quot;</span>,<span class="string">&quot;叁&quot;</span>,<span class="string">&quot;肆&quot;</span>,<span class="string">&quot;伍&quot;</span>,<span class="string">&quot;陆&quot;</span>,<span class="string">&quot;柒&quot;</span>,<span class="string">&quot;捌&quot;</span>,<span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> arr[number];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.每位上的数就是大写数组的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String strMoney=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;<span class="comment">//159</span></span><br><span class="line">    <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">    <span class="type">int</span> ge=money%<span class="number">10</span>;</span><br><span class="line">    String capitalNumber=getCapitalNumber(ge);</span><br><span class="line">    <span class="comment">//反向拼接</span></span><br><span class="line">    strMoney=capitalNumber+strMoney;</span><br><span class="line">    <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">    money=money/<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">    <span class="keyword">if</span>(money==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二:前面补零(补齐7位)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ZeroCount=<span class="number">7</span>-strMoney.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ZeroCount;i++)&#123;</span><br><span class="line">    strMoney=<span class="string">&quot;零&quot;</span>+strMoney;<span class="comment">//字符串拼接,前拼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三:插入单位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组单位</span></span><br><span class="line">String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2.遍历strMoney，然后把大写数字和单位拼接到字符串中</span></span><br><span class="line">String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strMoney.length();i++)&#123;</span><br><span class="line">    <span class="type">char</span> c=strMoney.charAt(i);</span><br><span class="line">    result=result+c+arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;Java实现的数字中文大写（正写）转换&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Java API 和字符串</title>
    <link href="https://readmengk90.github.io/2024/02/03/Java%E5%9F%BA%E7%A1%80-API%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://readmengk90.github.io/2024/02/03/Java%E5%9F%BA%E7%A1%80-API%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-02-03T10:57:21.851Z</published>
    <updated>2024-02-08T02:41:28.509Z</updated>
    
    <content type="html"><![CDATA[<p>**API(**Application Programming Interface):应用程序编程接口</p><p>简单理解：API就是别人已经写好的东西，我们不需要自己编写，直接使用即可.</p><p>Java API:指的就是JDK中提供得各种功能得Java类，这些类将底层的实现封装起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。</p><p>API帮助文档：帮助开发人员更好的使用API和查询API的一个工具</p><p>链接：<a href="https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei">https://pan.baidu.com/s/1DXJGNchknR_VgQVxbqzQig?pwd=rqei</a><br>提取码：rqei </p><p>如何使用帮助文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.io包：读取文件的内容，或者把数据写到文件中去</span><br><span class="line">java.lang包：</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong>JAVA不会字符串，开发就会凉一半</p><p>String：定义在java.lang.String包内，代表字符串，Java程序中的所有字符串(“abc”)文字都为此类的对象。</p><p>​字符串的内容是不会发生改变的，它的对象在创建后不能被更改</p><p><em>创建String对象的两种方式</em>：</p><p>1.<strong>直接赋值</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.<strong>使用new关键字使用不同的构造方法去创建字符串对象</strong>:</p><table><thead><tr><th align="center">构造方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String（）</td><td align="center">创建空白字符串，不含任何内容<br>String s0 &#x3D; new String( );</td></tr><tr><td align="center">public String(String original)</td><td align="center">根据传入的字符串，创建字符串对象<br>String s1 &#x3D; new String(“abc”)</td></tr><tr><td align="center">public String(char[ ] chs)</td><td align="center">根据传入字符数组，创建字符串对象<br>char[] chs &#x3D; {‘a’,’b’,’c’,’d’}<br>String s2 &#x3D; new String(chs)</td></tr><tr><td align="center">public String(byte[ ] chs)</td><td align="center">根据传入字节数组，创建字符串对象<br>byte[] bytes&#x3D; {97,98,99,100}<br>String s3 &#x3D; new String(bytes)</td></tr></tbody></table><p>字符串-字符数组-字符串：(应用场景:修改字符串的内容)</p><p>字节数组-字符串：(应用场景：网络中传输的数据其实都是字节信息)</p><p><em>字符串在内存中是如何创建的</em></p><p>StringTable(<strong>字符串常量池</strong>)：直接赋值的方式获取的字符串放在串次中，串池在<strong>堆内存</strong>中</p><p>当时有双引号直接赋值时，系统会坚持该字符串在串池中是否存在，不存在，创建新的，<strong>存在，复用。</strong></p><p>Java的常用方法1-<strong>字符串的比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1==s2);<span class="comment">//这种比较可以吗？</span></span><br></pre></td></tr></table></figure><p><em>&#x3D;&#x3D;号比较的原理？</em>（String属于引用数据类型）</p><p>基本数据类型：&#x3D;&#x3D;号比较基本数据类型比较的是<strong>数据值</strong></p><p>引用数据类型：&#x3D;&#x3D;号比较引用数据类型比较的是<strong>地址值</strong></p><p><em>字符串的比较？</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//串池中存在该字符串，复用，地址值相同</span></span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line"><span class="comment">//----------------------------------------------------------</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//记录串池里面的地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//记录堆里面的地址</span></span><br><span class="line">System.out.println(s1==s2);</span><br></pre></td></tr></table></figure><p>字符串比较：</p><p><strong>boolean equals方法(要比较的字符串)</strong> &#x2F;&#x2F;完全一样的结果才是true，否则为false.</p><p><strong>boolean equalsIgnoreCase(要比较的字符串)</strong>  &#x2F;&#x2F;忽略(<strong>英文状态下的</strong>)大小写的比较,适用于验证码校验</p><p><strong>&#x2F;&#x2F;键盘录入得到的字符串是new出来的</strong>，只有想比较字符串的内容，就必须要用String里面的方法。</p><p>Java常用的方法2-<strong>遍历字符串</strong></p><table><thead><tr><th>public char charAt(int index):根据索引返回字符</th></tr></thead><tbody><tr><td><strong>public int length():返回此字符串的长度，字符串的长度：字符串对象.length()</strong></td></tr></tbody></table><p>Java常用的方法3-<strong>字符串拼接和反转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String newStr=<span class="string">&quot;&quot;</span>;<span class="comment">//-------------------------------拼接--------------</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> L-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            newStr=newStr+c;----------------------思想--------------</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br></pre></td></tr></table></figure><p>Java常用的方法4-<strong>字符串的截取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex,<span class="type">int</span> endIndex)</span>   <span class="comment">//截取---包头不包围，包左不包右</span></span><br><span class="line">    <span class="comment">//只有返回值才是截取的小串，对原来的字符串没有任何影响，字符串本身不能发生变化。</span></span><br><span class="line">String <span class="title function_">subString</span><span class="params">(<span class="type">int</span> beginIndex)</span>  <span class="comment">//截取到末尾</span></span><br></pre></td></tr></table></figure><p> Java常用的方法5-<strong>新旧值替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">replace</span><span class="params">(旧值,新值)</span><span class="comment">//替换</span></span><br><span class="line"><span class="comment">//注意点：只有返回值才是替换之后的结果</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;JavaAPI 和字符串&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>idea插件集合</title>
    <link href="https://readmengk90.github.io/2024/01/25/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/"/>
    <id>https://readmengk90.github.io/2024/01/25/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</id>
    <published>2024-01-25T15:36:38.404Z</published>
    <updated>2024-01-26T02:09:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>idea插件集合:</p><p>1:<strong>一秒生成标准JavaBean–插件PTG</strong></p><ol><li>电脑连接外网</li><li>idea-file-settings-Plugins-Marketplace-搜索ptg-install</li><li>idea右键-选择Ptg To JavaBean</li></ol><p><img src="/images/idea%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/%E6%8F%92%E4%BB%B61.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;Idea的好插件&lt;/center&gt;</summary>
    
    
    
    <category term="插件库" scheme="https://readmengk90.github.io/categories/%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
    
    
    <category term="插件库" scheme="https://readmengk90.github.io/tags/%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2024-01-25T07:31:26.428Z</published>
    <updated>2024-01-27T13:13:02.827Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象</p><p>​面向对象介绍:</p><p>​面向:拿，找。</p><p>​对象:能干活的东西。</p><p>​面向对象编程:拿东西过来做对应的事情。</p><ol><li><p><strong>设计对象并使用</strong></p><ol><li><p>类和对象</p><p>类(设计图):是对象共同特征的描述(类名首字母建议大写，需要见名知意，驼峰命名)；</p><p>对象:是真实存在的具体东西(在Java中，必须先设计类，才能获得对象)</p><p><strong>如何得到对象:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    <span class="number">1.</span>成员变量(代表属性的，一般是名词)<span class="comment">//完整定义格式:修饰符 数据类型 变量名称= 初始化值;一般无需指定初始化值(创建对象后再赋值),存在默认值，修饰符一般不写</span></span><br><span class="line">    <span class="number">2.</span>成员方法(代表行为的，一般是动词)</span><br><span class="line">&#125;</span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名( );</span><br></pre></td></tr></table></figure><p><strong>如何使用对象:</strong></p><p>​访问属性:对象名.成员变量</p><p>​访问行为:对象名.方法名(…)</p><p><strong>类的注意事项</strong>:</p><p>开发中的设计</p><ol><li><p>用来描述一类事物的类，专业就叫:<strong>javabean类</strong>。在javabean类中，是不写main方法的</p></li><li><p>在以前，编写main方法的类，叫做<strong>测试类</strong>。可以在测试类中创建javabean类的对象并进行赋值调用。</p></li><li><p>一个<strong>Java文件</strong>中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名，实际开发中建议还是一个文件定义一个class类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p><strong>封装</strong></p><p>告诉我们，如何正确设计对象的属性和方法。</p><p>原则:对象代表什么，就得封装对应的数据，并提供数据对应的行为。（　张三　杀　李四（生死状态））</p><p><strong>private</strong>关键字:是一个权限修饰符,可以修饰成员(成员变量和成员方法). </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数据安全问题(p.age=-99)</span></span><br><span class="line"> 被<span class="keyword">private</span>修饰的成员只能在本类中才能访问**(*解决了数据安全问题*).</span><br><span class="line">     <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//2.实现正确的数据可以赋值,错误的无法赋值-通过get set方法赋值,过滤通道</span></span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被其他的类调用和访问</span></span><br><span class="line"><span class="comment">//在测试类中调用赋值</span></span><br><span class="line">GirlFriend gf1=<span class="keyword">new</span> <span class="title class_">GirlFriend</span>();</span><br><span class="line">gf1.setName(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">gf1.setAge(<span class="number">19</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> gf1.getName();</span><br><span class="line"><span class="type">int</span> age=gf1.getAge();</span><br></pre></td></tr></table></figure><p><strong>this关键字</strong>:</p><p>成员变量(方法外,类里面)和局部变量(方法里).<strong>就近原则</strong>,想用成员变量需加this.</p><p>this关键字的作用可以区别成员变量和局部变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//set(赋值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;<span class="comment">//在所有的类中都可以使用它修饰的成员</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">18</span>&amp;&amp;a&lt;<span class="number">50</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非法数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get(获取)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造方法:</strong></p><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    修饰符 类名(参数) &#123;</span><br><span class="line">        方法体;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//空参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123; <span class="comment">//创建对象调用实参构造:Student s = new Student(&quot;AA&quot;,19);</span></span><br><span class="line">        <span class="comment">//全参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br><span class="line"><span class="comment">//全参构造,在方法里面就可以给所有的成员变量赋值,不用再用set方法进行赋值了,简化代码.</span></span><br><span class="line"><span class="comment">//空参的构造方法,利用空参构造创建对象,成员变量默认初始化值.,</span></span><br><span class="line"><span class="comment">//如果我们自己没写任何构造方法,那么虚拟机会给我们加一个空参构造方法;如果已经定义了带参构造方法,系统将不会提供默认的无参构造方法.</span></span><br><span class="line"><span class="comment">//构造方法的重载,带参构造方法和无参构造方法,两者方法名相同,但是参数不同,这叫做构造方法的重载.</span></span><br><span class="line"><span class="comment">//执行时机:构造方法不能手动调用,在创建对象的时候由虚拟机调用,每创建一次对象就调用一次构造方法.</span></span><br><span class="line"><span class="comment">//★★★★★★★★</span></span><br></pre></td></tr></table></figure><p>特点:方法名和类名相同,大小写也要一致;</p><p>​没有返回值类型,连void都没有;</p><p>​没有具体的返回值(不能由return带回结果数据);</p><p>作用:在创建对象的时候由<strong>虚拟机自动调用</strong>构造方法给成员变量进行初始化(赋值)的.</p><p>建议:实际开发中,空参构造和有参构造都会写上,因为有时不完全知道属性值</p></li><li><p><strong>标准JavaBean</strong></p><ol><li>类名需要见名知意,驼峰命名</li><li>成员变量使用private修饰</li><li>提供至少两个构造方法(无参构造方法&amp;全参构造方法)</li><li>成员方法:提供每一个私有化的成员变量对应的setXxx()&#x2F;getXxx()方法,如果还有其他行为,也需要写上</li></ol></li><li><p><strong>对象内存图</strong></p><p>方法区:字节码文件加载时进入的内存</p><p>栈内存:方法运行时所进入的内存，变量也在这里</p><p>堆内存:new出来的东西会在这块内存中开辟空间并产生地址</p><p><strong>一个对象的内存图</strong>:</p><p>Student s &#x3D; new Student();</p><p>​1.加载class文件(方法区临时存储main()方法，虚拟机调用main()方法，main()方法加载进栈)</p><p>​2.申明局部变量</p><p>​3.在堆内存中开辟一个空间</p><p>​4.默认初始化</p><p>​5.显示初始化</p><p>​6.构造方法的初始化</p><p>​7.将堆内存中的地址值赋值给左边的局部变量</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1.png"></p><p><strong>多个对象的内存图</strong>:</p><p>对个对象时class对象不用重新加载</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A12.png"></p><p><strong>两个变量指向同一个对象内存图</strong>:</p><p><img src="/images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240127202759.png"></p><p><strong>this的内存原理</strong>:</p><p>作用：变量得就近原则，区分局部变量和成员变量。</p><p>本质：所在<strong>方法调用者的地址值</strong></p><p>​</p><p><strong>基本数据类型和引用数据类型的区别</strong>:</p><pre><code> 基本数据类型：数据值是存储在自己的空间中(栈)，赋值给其他变量，也是赋得真实得值。</code></pre><p>​ 引用数据类型：数据值 是存储在其他空间中，自己空间中存储得是地址值，赋值给其他变量，赋得是地址值</p><p><strong>局部变量和成员变量的区别</strong>:</p><p>​成员变量：类中方法外的变量</p><p>​局部变量：方法中的变量，（栈里面的局部变量没有默认值，是要给个初始化值才能用的）</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;设计对象并使用&amp;封装&amp;内存图&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二维数组</title>
    <link href="https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>https://readmengk90.github.io/2024/01/25/java%E5%9F%BA%E7%A1%80-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</id>
    <published>2024-01-25T07:22:24.308Z</published>
    <updated>2024-01-26T02:13:44.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p><strong>应用场景</strong>:</p><p>需要把数据分组管理的时候，需要用到二维数组。</p><p><strong>初始化</strong>：</p><p><img src="/../images/%E5%88%9D%E5%A7%8B%E5%8C%96.png"></p><p>二维数组的内存图:</p><p><img src="/../images/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.jpg"></p><p>另外两种特殊的初始化:</p><p>（1）一位数组的长度灵活</p><p>​int[ ] [ ] arr &#x3D; new int [2] [ ];</p><p>​int[] arr1 &#x3D; {11,22};</p><p>​int[] arr2 &#x3D; {44,55,66}; </p><p>（2）覆盖</p><p>​int[ ] [ ] arr &#x3D; new int [2] [ 3];</p><p>​int[] arr1 &#x3D; {11,22};</p><p>​int[] arr2 &#x3D; {44,55,66}; </p><p>​arr[0] &#x3D; arr1;</p><p>​arr[1] &#x3D; arr2;</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;应用场景&amp;初始化&amp;内存图&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>生成随机且不重复的数据</title>
    <link href="https://readmengk90.github.io/2024/01/24/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E4%B8%94%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>https://readmengk90.github.io/2024/01/24/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E4%B8%94%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/</id>
    <published>2024-01-24T12:56:40.268Z</published>
    <updated>2024-01-25T12:15:30.692Z</updated>
    
    <content type="html"><![CDATA[<p>创建大小为 x的 int 的空数组；<br>调用 random 产生随机数字；<br>当产生的随机数和数组中的元素没有重复的时候，放进去，即可；</p><h1 id="1-判断随机数字在数组中是否存在"><a href="#1-判断随机数字在数组中是否存在" class="headerlink" title="1.判断随机数字在数组中是否存在"></a>1.判断随机数字在数组中是否存在</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contain</span><span class="params">(<span class="type">int</span> [] arr,<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i]==number)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-当产生的随机数和数组中的元素没有重复的时候，放入数组"><a href="#2-当产生的随机数和数组中的元素没有重复的时候，放入数组" class="headerlink" title="2.当产生的随机数和数组中的元素没有重复的时候，放入数组"></a>2.当产生的随机数和数组中的元素没有重复的时候，放入数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createNumber()&#123;</span><br><span class="line">    <span class="comment">//1.创建数组用于添加中奖号码，六个红球1个蓝球，数组长度为7</span></span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">    <span class="comment">//2.生成随机数字，红球的号码不能重复，蓝球的号码可以和红球重复</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>;) &#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">red</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>)+<span class="number">1</span>;<span class="comment">//红球号码从1-33中选择，且不能重复。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contain(arr, red);</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            arr[i]=red;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;数字在数组中是否存在&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>把整数中的每一位都添加到数组中</title>
    <link href="https://readmengk90.github.io/2024/01/23/%E6%8A%8A%E6%95%B4%E6%95%B0%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E9%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD/"/>
    <id>https://readmengk90.github.io/2024/01/23/%E6%8A%8A%E6%95%B4%E6%95%B0%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E4%BD%8D%E9%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD/</id>
    <published>2024-01-23T14:00:58.967Z</published>
    <updated>2024-01-25T12:16:45.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="把整数中的每一位都添加到数组中"><a href="#把整数中的每一位都添加到数组中" class="headerlink" title="把整数中的每一位都添加到数组中"></a>把整数中的每一位都添加到数组中</h1><p>反向推导：</p><ol><li><p>计算数组的长度(新建数组)-定义数组-把整数上的每一位都添加到数组上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getInts(<span class="type">int</span> number) &#123;</span><br><span class="line">        <span class="type">int</span> temp= number;</span><br><span class="line">        <span class="comment">//1.1求数字的长度充当数组的长度</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number !=<span class="number">0</span>)&#123;</span><br><span class="line">            number = number /<span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.2定义数组</span></span><br><span class="line">        <span class="type">int</span> [] array=<span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">        <span class="comment">//1.3得到每一位</span></span><br><span class="line">        <span class="type">int</span> index= array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> ge=temp%<span class="number">10</span>;</span><br><span class="line">            temp=temp/<span class="number">10</span>;</span><br><span class="line">            array[index]=ge;</span><br><span class="line">            index--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>day07-TestDemo06</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;把整数中的每一位都添加到数组中&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>超出范围重新录入</title>
    <link href="https://readmengk90.github.io/2024/01/23/%E8%A7%84%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <id>https://readmengk90.github.io/2024/01/23/%E8%A7%84%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE/</id>
    <published>2024-01-23T11:43:52.767Z</published>
    <updated>2024-01-25T12:15:52.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="规定范围内录入数据"><a href="#规定范围内录入数据" class="headerlink" title="规定范围内录入数据"></a>规定范围内录入数据</h1><p>1.多位时(for循环和i++)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//输入规定范围的整数：0-100之间</span></span><br><span class="line">        <span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length;) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入评分:&quot;</span>);</span><br><span class="line">            <span class="type">int</span> score=sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (score&gt;=<span class="number">0</span>&amp;&amp;score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                scores[i]=score;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;超出范围，继续录入，当前的i为:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.一位时(while和break)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入蓝色球号:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> number = sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span> (number &gt;= <span class="number">1</span> &amp;&amp; number &lt;= <span class="number">16</span>) &#123;</span><br><span class="line">        newArr[newArr.length-<span class="number">1</span>] = number;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;蓝球码超出范围，重新输入:&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;规定范围内录入数据，当超出范围后，仍能输出&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>大小写字母放进数组</title>
    <link href="https://readmengk90.github.io/2024/01/23/%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E6%94%BE%E8%BF%9B%E6%95%B0%E7%BB%84/"/>
    <id>https://readmengk90.github.io/2024/01/23/%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E6%94%BE%E8%BF%9B%E6%95%B0%E7%BB%84/</id>
    <published>2024-01-23T07:29:16.866Z</published>
    <updated>2024-01-25T12:16:19.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大小写字母都放进数组内"><a href="#大小写字母都放进数组内" class="headerlink" title="大小写字母都放进数组内"></a>大小写字母都放进数组内</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">52</span>];<span class="comment">//26+26=52</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number3</span> <span class="operator">=</span> r.nextInt(<span class="number">9</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; array.length / <span class="number">2</span>) &#123;</span><br><span class="line">                array[i] = (<span class="type">char</span>) (<span class="number">97</span> + i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                array[i] = (<span class="type">char</span>) (<span class="number">65</span> + j);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;大小写字母都放进数组&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>快捷键的妙用</title>
    <link href="https://readmengk90.github.io/2024/01/22/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>https://readmengk90.github.io/2024/01/22/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E5%A6%99%E7%94%A8/</id>
    <published>2024-01-22T15:51:38.388Z</published>
    <updated>2024-02-07T06:45:19.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Idea快捷键的妙用"><a href="#Idea快捷键的妙用" class="headerlink" title="Idea快捷键的妙用"></a>Idea快捷键的妙用</h1><p>Ctrl+alt+M:自动抽取方法 </p><p>​编写程序时发现有重复代码，可以使用快捷键自动抽取方法，提高效率。</p><p>Ctrl+alt+L:代码格式化</p><p>​编写完成一段代码后养成格式化的习惯。</p><p>Ctrl+alt+v:自动补全代码快捷键</p><p>CTRL+&#x2F;：单行注释</p><p>CTRL+ALT+&#x2F;:多行注释</p><p>选择变量+shift+F6:变量的批量修改</p><p>Ctrl + Alt + T： 对选中的代码弹出环绕选项弹出层(while,if….)</p><p>Alt+Insert:选择get和set方法</p><p>Ctrl+B:点击方法，跟进原码,选中要进入的方法，使用快捷键直接进入</p><p>Insert:书写代码是错误碰到insert键，会出现闪速黑色正方形块，影响书写。再次点击insert键可恢复</p><p>Ctrll+N:搜索类快捷键</p><p>alt+回车(enter):选中变量，alt+回车，左右进行切割</p><p>代码 上 &#x2F;下移 ：Shift+Alt +方向上键&#x2F;下键</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;Idea快捷键的妙用&lt;/center&gt;</summary>
    
    
    
    <category term="快捷方式" scheme="https://readmengk90.github.io/categories/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="快捷方式" scheme="https://readmengk90.github.io/tags/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>无限循环和跳转控制语句</title>
    <link href="https://readmengk90.github.io/2024/01/22/java%E5%9F%BA%E7%A1%80-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%92%8C%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://readmengk90.github.io/2024/01/22/java%E5%9F%BA%E7%A1%80-%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%92%8C%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</id>
    <published>2024-01-22T02:24:51.798Z</published>
    <updated>2024-01-22T11:39:49.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h1><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;学习&quot;</span>);<span class="comment">//常用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>无限循环的下面不能在写其他代码了</p><h1 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h1><p>在循环的过程中，跳转到其他语句上执行</p><p>break:结束整个循环。</p><p>continue:结束本次循环，继续下次循环。</p><p>&lt;补充:&gt;return:其实跟循环没有什么关系，跟方法有关，表示1结束方法，2返回结果。如果方法执行到了return，那么整个方法全部结束，里面的循环也随之结束。 </p><p><img src="/../images/005.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;无限循环和跳转控制语句&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>标准数组格式</title>
    <link href="https://readmengk90.github.io/2024/01/21/%E8%BE%93%E5%87%BA%E6%A0%87%E5%87%86%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%EF%BC%9A[11,22,33,44,55]/"/>
    <id>https://readmengk90.github.io/2024/01/21/%E8%BE%93%E5%87%BA%E6%A0%87%E5%87%86%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%EF%BC%9A[11,22,33,44,55]/</id>
    <published>2024-01-21T14:35:27.490Z</published>
    <updated>2024-01-21T14:36:51.386Z</updated>
    
    <content type="html"><![CDATA[<p>输出标准数组格式：[11,22,33,44,55]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==array.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(array[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;[11,22,33,44,55]&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>方法的相关介绍</title>
    <link href="https://readmengk90.github.io/2024/01/21/java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/"/>
    <id>https://readmengk90.github.io/2024/01/21/java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-01-21T07:34:11.425Z</published>
    <updated>2024-01-22T12:25:31.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li><p>什么是方法</p><p>方法：程序中最小的执行单元。</p><p>场景：重复的代码，具有 独立功能的代码可以抽取到方法中。</p><p>作用：提高代码的复用性&amp;提高代码的可维护性。</p></li><li><p>方法的格式</p><p>方法不调用就执行；</p><p>方法间是平级关系，不能互相嵌套定义；</p><p>方法的编写顺序和执行顺序无关(与调用顺序有关)；</p><p>方法的返回值类型是void，表示该方法没有返回值，如果要编写return，后面不能跟具体的数据。</p><p>return语句的下面，不能编写代码，因为永远执行不到，属于无效代码。</p><p>​方法没有返回值：可以省略不写，如果书写，表示结束方法。</p><p>​方法有返回值：必须要写，表示结束方法<strong>和</strong>返回结果。</p><p>方法的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.最简单的方法定义和调用格式</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">    方法体(就是打包起来的代码)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//掉头</span></span><br><span class="line">方法名();</span><br><span class="line"><span class="comment">//2带参的方法定义和调用格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数<span class="number">1</span>,参数<span class="number">2</span>,.....)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line">方法名(实参)</span><br><span class="line"><span class="comment">//方法调用时，参数的数量与类型必须与方法定义中小括号里面的变量一一对应，否则程序会报错</span></span><br><span class="line"><span class="comment">//3.带返回值方法的定义和调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">    直接调用：方法名(实参);</span><br><span class="line">    赋值调用：整数类型 变量名 = 方法名(实参);</span><br><span class="line">    输出调用：System.out.println(方法名(实参));</span><br></pre></td></tr></table></figure></li><li><p>方法的重载</p><p>概念：在<strong>同一个类</strong>中，定义了多个<strong>同名的方法</strong>，这些同名的方法具有<strong>同种的功能</strong>，每一个方法具有<strong>不同的参数类型</strong>或<strong>参数个数</strong>(个数，类型，顺序)，这些同名的方法，就构成了重载关系，与返回值无关。</p></li><li><p>方法的内存</p><p>方法被调用之后就会进栈执行</p><p><strong>基本数据类型&amp;引用数据类型</strong>：</p><p>​基本数据类型变量中存储的是真实的数据。（数据值是存储在自己的空间中）</p><p>​只要是new出来的都是引用数据类型(数组)  （数据值存储在其他空间，自己空间存储的是地址值）</p><p><img src="/../images/Screenshot_20240122_195710.jpg"></p></li></ol><p>​<strong>方法传递基本数据类型的内存原理</strong></p><p>​传递基本数据类型(4类8种)时，传递的是真实的数据，形参的改变，不影响实际参数的值。</p><p>​传递引用数据类型(int[] arr)时，传递的是地址值，形参的改变 ，影响的是地址的值。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;什么是方法&amp;格式&amp;重载&amp;内存&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>比较最值时提高效率(数组)</title>
    <link href="https://readmengk90.github.io/2024/01/20/%E6%AF%94%E8%BE%83%E6%9C%80%E5%80%BC%E6%97%B6%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87(%E6%95%B0%E7%BB%84)/"/>
    <id>https://readmengk90.github.io/2024/01/20/%E6%AF%94%E8%BE%83%E6%9C%80%E5%80%BC%E6%97%B6%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87(%E6%95%B0%E7%BB%84)/</id>
    <published>2024-01-20T13:37:36.509Z</published>
    <updated>2024-01-25T12:16:37.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组循环比较最值时提高效率"><a href="#数组循环比较最值时提高效率" class="headerlink" title="数组循环比较最值时提高效率"></a>数组循环比较最值时提高效率</h1><p>循环中开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低，为了提高效率，减少一次 循环的次数，循环开始的条件可以写1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> min=array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i]&lt;min)&#123;</span><br><span class="line">                min=array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(min);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;数组循环比较最值时提高效率&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>数组相关介绍</title>
    <link href="https://readmengk90.github.io/2024/01/20/java%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0&amp;%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://readmengk90.github.io/2024/01/20/java%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0&amp;%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96/</id>
    <published>2024-01-20T08:24:00.365Z</published>
    <updated>2024-01-21T07:31:32.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h1><p>数组是指一种容器，可以用来存储<strong>同种类型</strong>的多个值，数组容器再存储数据的时候，需要结合隐式转换考虑。</p><p><strong>定义</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式1:</span></span><br><span class="line">数据类型 [ ] 数组名</span><br><span class="line"><span class="comment">//格式2:</span></span><br><span class="line">数据类型 数组名[ ]</span><br></pre></td></tr></table></figure><p><strong>初始化</strong>：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</p><ol><li><p>静态初始化： 数据类型[ ] 数组名 &#x3D; new 数据类型[ ]{元素1，元素2，元素3…};</p><p><strong>简写样式： 数据类型[ ] 数组名 &#x3D; {元素1，元素2，元素3…};</strong></p></li><li><p>动态初始化:初始化时只指定数组长度，由系统为数组分配初始值。</p><p><strong>格式:数据类型[ ] 数组名 &#x3D; new 数据类型[数组长度]；</strong></p><p>在创建的时候，由我们自己指定数组的长度，有虚拟机给出默认的初始化值。</p><p>数组默认初始化值的规律:</p><p>​整数类型的默认初始值为0</p><p>​小数类型的默认初始值为0.0</p><p>​字符类型的默认初始值为’&#x2F;u0000’空格</p><p>​布尔类型的默认初始值为false</p><p>​引用数据类型的默认初始值为null</p></li><li><p>动态初始化和静态初始化的区别</p><table><thead><tr><th align="center">动态初始化</th><th align="center">静态初始化</th></tr></thead><tbody><tr><td align="center">只明确元素个数，不明确具体数值，推荐使用动态初始化</td><td align="center">需求中已经明确了要操作的具体数据，直接静态初始化即可</td></tr></tbody></table></li></ol><h1 id="2-数组的地址值和元素访问"><a href="#2-数组的地址值和元素访问" class="headerlink" title="2.数组的地址值和元素访问"></a>2.数组的地址值和元素访问</h1><p><strong>地址值</strong>：表示数组在内存中的位置([I@4eec7777)</p><p>​[ :表示当前是一个数组</p><p>​I :表示当前数组里面的元素都是int类型</p><p>​       @:表示一个间隔符号。固定格式</p><p>​               4eec7777:数组真正的地址值(16进制)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[I@<span class="number">4</span>eec7777</span><br></pre></td></tr></table></figure><p><strong>数组元素访问</strong>:</p><p>​格式: 数组名[索引]，数组的索引<strong>从0开始</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h1 id="3-数组的遍历"><a href="#3-数组的遍历" class="headerlink" title="3.数组的遍历"></a>3.数组的遍历</h1><p>数组遍历:将数组中所有的内容取出来，取出来之后可以进行打印，判断，求和…………</p><p>遍历是指取出数据的整个过程，不要局限的理解为，遍历就是打印。</p><p>获取数组的长度:<strong>数组名.length</strong></p><p>拓展：Idea中自动地快速生成数组的遍历方式：数组名.fori回车</p><h1 id="4-数值中常见问题"><a href="#4-数值中常见问题" class="headerlink" title="4.数值中常见问题"></a>4.数值中常见问题</h1><p>1.索引越界问题**(最小索引:0,最大索引:数组长度-1)**</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: Index <span class="number">50</span> out of bounds <span class="keyword">for</span> length <span class="number">50</span></span><br><span class="line"><span class="built_in">at</span> com.itheima.array.ArrayDemo07.main(ArrayDemo07.java:<span class="number">10</span>)</span><br><span class="line">// Exception(异常),ArrayIndexOutOfBoundsException(数组索引超出范围异常)--访问了不存在的索引</span><br></pre></td></tr></table></figure><h1 id="5-数组的内存图"><a href="#5-数组的内存图" class="headerlink" title="5.数组的内存图"></a>5.数组的内存图</h1><table><thead><tr><th align="left">JAVA内存空间</th></tr></thead><tbody><tr><td align="left">栈：方法运行时使用的内存，比如main方法运行，进行方法栈中执行。</td></tr><tr><td align="left">堆：存储对象或者数组，new来创建的，都存储在堆内存</td></tr><tr><td align="left">方法区：存储可以运行的class文件</td></tr><tr><td align="left">本地方法栈：JVM在使用操作系统功能时使用，与开发无关</td></tr><tr><td align="left">寄存器：给CPU使用，和开发无关</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;数组的概述&amp;初始化&amp;元素访问&amp;&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>生成随机数Random</title>
    <link href="https://readmengk90.github.io/2024/01/20/java%E5%9F%BA%E7%A1%80-%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0Random/"/>
    <id>https://readmengk90.github.io/2024/01/20/java%E5%9F%BA%E7%A1%80-%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0Random/</id>
    <published>2024-01-20T03:38:38.016Z</published>
    <updated>2024-01-20T06:54:47.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成随机数Random"><a href="#生成随机数Random" class="headerlink" title="生成随机数Random"></a>生成随机数Random</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包---Random这个类在哪里?</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random<span class="comment">//导包的动作必须出现在类定义的上边</span></span><br><span class="line"><span class="comment">//2.创建对象---表示我要开始用Random这个类了</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();<span class="comment">//这个格式里面，只有r是变量名，可以变，其他的都不允许变</span></span><br><span class="line"><span class="comment">//3.生成随机数--真正开始干活了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围)<span class="comment">//这个格式里面，只有number是变量名，可以变，其他的都不允许变</span></span><br></pre></td></tr></table></figure><p><em>在3.小括号中，书写的是生成随机数的范围，这个范围<strong>一定是从0开始</strong>，到这个数减1结束(包头不包尾，包左不包右)</em></p><p><em>生成任意数到<strong>任意数之间</strong>的随机数:</em><br>    1.让这个范围头尾都减去一个值，让这个范围从0开始<br>    2.尾巴＋1<br>    3.最终结果，再加上第一步减去的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成7~15之间的值</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> number= r.nextInt(<span class="number">9</span>)+<span class="number">7</span>;</span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;Random()方法&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
</feed>
