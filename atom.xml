<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东瓶西镜</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="https://readmengk90.github.io/atom.xml" rel="self"/>
  
  <link href="https://readmengk90.github.io/"/>
  <updated>2024-11-29T12:54:14.927Z</updated>
  <id>https://readmengk90.github.io/</id>
  
  <author>
    <name>Amber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://readmengk90.github.io/2024/11/29/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/"/>
    <id>https://readmengk90.github.io/2024/11/29/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/</id>
    <published>2024-11-29T11:38:28.789Z</published>
    <updated>2024-11-29T12:54:14.927Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194000338.png" alt="image-20241129194000338"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194034322.png" alt="image-20241129194034322"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194142931.png" alt="image-20241129194142931"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194247128.png" alt="image-20241129194247128"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194629262.png" alt="image-20241129194629262"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194956404.png" alt="image-20241129194956404"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195029793.png" alt="image-20241129195029793"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195404644.png" alt="image-20241129195404644"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195511411.png" alt="image-20241129195511411"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195825191.png" alt="image-20241129195825191"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195936204.png" alt="image-20241129195936204"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200005541.png" alt="image-20241129200005541"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200145742.png" alt="image-20241129200145742"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200206509.png" alt="image-20241129200206509"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200313721.png" alt="image-20241129200313721"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200349019.png" alt="image-20241129200349019"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129200506400.png"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129201516258.png" alt="image-20241129201516258"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129201632125.png" alt="image-20241129201632125"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129201748098.png" alt="image-20241129201748098"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129201828451.png" alt="image-20241129201828451"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129201910582.png" alt="image-20241129201910582"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202206309.png" alt="image-20241129202206309"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202454546.png" alt="image-20241129202454546"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202700462.png" alt="image-20241129202700462"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202743518.png" alt="image-20241129202743518"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202825346.png" alt="image-20241129202825346"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202909204.png" alt="image-20241129202909204"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129202954677.png" alt="image-20241129202954677"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203040088.png" alt="image-20241129203040088"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203101517.png" alt="image-20241129203101517"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203236138.png" alt="image-20241129203236138"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203446048.png" alt="image-20241129203446048"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203542315.png" alt="image-20241129203542315"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129203606953.png" alt="image-20241129203606953"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204214353.png" alt="image-20241129204214353"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204406144.png" alt="image-20241129204406144"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204512549.png" alt="image-20241129204512549"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204651341.png" alt="image-20241129204651341"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204735587.png" alt="image-20241129204735587"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204806337.png" alt="image-20241129204806337"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129204925678.png" alt="image-20241129204925678"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129205024990.png" alt="image-20241129205024990"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129205210413.png" alt="image-20241129205210413"></p><p><img src="/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129205318838.png" alt="image-20241129205318838"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194000338.png&quot; alt=&quot;image-20241129194000338&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194034322.png&quot; alt=&quot;image-20241129194034322&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194142931.png&quot; alt=&quot;image-20241129194142931&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194247128.png&quot; alt=&quot;image-20241129194247128&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194629262.png&quot; alt=&quot;image-20241129194629262&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129194956404.png&quot; alt=&quot;image-20241129194956404&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195029793.png&quot; alt=&quot;image-20241129195029793&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195404644.png&quot; alt=&quot;image-20241129195404644&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195511411.png&quot; alt=&quot;image-20241129195511411&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/image-20241129195825191.png&quot; alt=&quot;image-20241129195825191&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python机器学习</title>
    <link href="https://readmengk90.github.io/2024/11/25/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/"/>
    <id>https://readmengk90.github.io/2024/11/25/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/</id>
    <published>2024-11-25T01:55:10.924Z</published>
    <updated>2024-12-02T12:45:25.890Z</updated>
    
    <content type="html"><![CDATA[<p><strong>越努力越幸运</strong></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E8%B7%AF%E7%BA%BF.png"></p><h3 id="机器学习简介"><a href="#机器学习简介" class="headerlink" title="机器学习简介"></a>机器学习简介</h3><p>机器学习领域:(图像识别，自然语言处理，传统预测)</p><p>机器学习库和框架:  <code>scikit learn </code>,<code>tensorflow(深度)</code>，<code>pytorch(深度)</code></p><p>学习书籍推荐:</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90.png"></p><p>课程目标：</p><pre><code>1. 熟悉机器学习各类算法的原理1. 掌握算法的使用，能够结合场景解决实际问题1. 掌握使用机器学习算法库和框架的技能</code></pre><p>机器学习课程概要：(特征工程；模型，策略，优化；分类，回归，聚类；Tensorflow;神经网络；图像识别；自然语言处理)</p><h3 id="day01-数据的特征工程"><a href="#day01-数据的特征工程" class="headerlink" title="day01:数据的特征工程"></a>day01:数据的特征工程</h3><h4 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h4><p>定义:机器学习是从<code>数据</code>中自动分析获得<code>规律</code>(模型),并利用规律对<code>未知数据进行预测</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/whylearn.png"></p><p>机器学习的目的是让机器学习程序替换手动的步骤，减少企业的成本也提高企业的效率。</p><h4 id="数据集的构成"><a href="#数据集的构成" class="headerlink" title="数据集的构成"></a>数据集的构成</h4><p>机器学习的数据:文件<code>csv</code></p><p><code>mysql</code>数据库是有性能瓶颈的，读取速度；格式不太符合机器学习要求数据的格式</p><p>可用的数据集：</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%8F%AF%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86.png"></p><h4 id="数据集的结构组成"><a href="#数据集的结构组成" class="headerlink" title="数据集的结构组成"></a>数据集的结构组成</h4><p>结构：特征值+目标值（注:有些数据集可以没有目标值)</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E7%89%B9%E5%BE%81%E7%9B%AE%E6%A0%87.png"></p><h4 id="数据中对特征的处理"><a href="#数据中对特征的处理" class="headerlink" title="数据中对特征的处理"></a>数据中对特征的处理</h4><p>pandas:一个数据读取非常方便以及基本的处理格式工具。</p><p>sklearn:对于<code>特征的处理</code>提供了强大的接口。</p><p>特征工程:将原始数据转换为更好地代表预测模型的潜在问题的特征的过程，从而提高了对未知数据的预测准确性。</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B.png"></p><h4 id="特征工程的意义"><a href="#特征工程的意义" class="headerlink" title="特征工程的意义:"></a>特征工程的意义:</h4><p>直接会影响预测结构</p><h4 id="scikit-learn库的介绍："><a href="#scikit-learn库的介绍：" class="headerlink" title="scikit-learn库的介绍："></a>scikit-learn库的介绍：</h4><p>Python语言的机器学习工具</p><p>Scikit-learn包括许多知名的机器学习算法的实现</p><p>Scikit-learn文档完善，容易上手，丰富的API，使其在学术界颇受欢迎，目前文档版本0.19</p><p><code>下载安装Scikit-learn</code></p><p>确保你的计算机已经安装了 <strong>Python 3</strong> 和 <strong>pip</strong>。</p><p>安装scikit-learn需要Numpy,pandas等库</p><p>在 Windows 上安装 Python 3</p><ol><li><p><strong>下载 Python 安装程序</strong>：</p><ul><li>访问 Python 官网：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></li><li>点击 “Download Python 3.x.x”（最新版本）。</li></ul></li><li><p><strong>运行安装程序</strong>：</p><ul><li>双击下载的 <code>.exe</code> 安装程序。</li><li>在安装界面，确保勾选 “<strong>Add Python to PATH</strong>” 选项，这是为了让你在命令行中方便地使用 Python。</li><li>选择 <strong>Install Now</strong> 来进行默认安装，或者选择 <strong>Customize installation</strong> 来进行自定义安装</li></ul></li><li><p><strong>验证安装</strong>： 安装完成后，打开命令提示符（按 <code>Win + R</code>，输入 <code>cmd</code> 然后回车），输入以下命令来检查 Python 是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该看到类似于以下的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python 3.x.x</span><br></pre></td></tr></table></figure></li></ol><p>​1. <strong>使用 pip 安装</strong></p><p>打开命令行终端（在 Windows 上使用命令提示符或 PowerShell，在 macOS&#x2F;Linux 上使用终端），然后输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scikit-learn</span><br></pre></td></tr></table></figure><p>这将会安装最新版本的 Scikit-learn 及其所需的依赖。</p><p>​2. <strong>验证安装</strong></p><p>安装完成后，打开 Python 解释器（在终端中输入 <code>python</code> 或 <code>python3</code>），然后输入以下代码来验证 Scikit-learn 是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sklearn</span><br><span class="line">print(sklearn.__version__)</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该看到类似于以下的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.24.1</span><br></pre></td></tr></table></figure><h4 id="数据的特征抽取"><a href="#数据的特征抽取" class="headerlink" title="数据的特征抽取:"></a>数据的特征抽取:</h4><p>特征抽取对文本等数据进行特征值化</p><p><strong>字典特征抽取</strong>:对字典数据进行特征值化</p><p>类：<code>sklearn.feature_extraction.DictVectorizer</code></p><p>DictVectorizer语法：DictVectorzer(sparse&#x3D;True,……)</p><table><thead><tr><th><code>DictVectorizer.fit_transform(X)</code></th><th>X:字典或者包含字典的迭代器</th></tr></thead><tbody><tr><td></td><td>返回值：返回sparse矩阵</td></tr><tr><td><code>DictVectorizer.inverse_transform(X)</code></td><td>X:array数组或者sparse矩阵</td></tr><tr><td></td><td>返回值：转换之前的数据格式</td></tr><tr><td><code>DictVectorizer.transform(X)</code></td><td>返回类别名称</td></tr><tr><td><code>DictVectorizer.get_feature_names(X)</code></td><td>按照原先的标准转换</td></tr></tbody></table><p>流程：</p><p>导包:<code>from sklearn.feature_extraction import DictVectorizer</code></p><ol><li>实例化类<code>DictVectorizer</code>,默认返回sparse矩阵的形式</li><li>调用<code>fit_transform</code>方法输入数据并转换</li></ol><p>sparse矩阵:(节约内存，方便读取处理)</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/sparse%E7%9F%A9%E9%98%B5.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%AD%97%E5%85%B8%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96.png"></p><p><code>one-hot编码分析</code></p><p>当您的数据包含标称型属性时，这些属性没有内在的顺序或大小关系。例如，颜色（红、绿、蓝），国家名（中国、美国、法国），等。对于这样的属性，直接用数值表示是不合适的，因为这会给模型带来误导性的信息，即数值间的比较关系。通过one-hot编码，可以为每个类别创建一个新的二进制特征，这样模型就不会错误地认为某些类别之间存在等级或数量上的关系。</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/onehot-1732519551080-11.png"></p><h5 id="文本特征抽取1"><a href="#文本特征抽取1" class="headerlink" title="文本特征抽取1:"></a><strong>文本特征抽取</strong>1:</h5><p>导包:<code>from sklearn.feature_extraction.text import CountVectorizer</code></p><p>​作用:对<code>文本数据</code>进行特征值化</p><p>​类: <code>sklearn.feature_extraction.text.CountVectorizer</code></p><table><thead><tr><th><code>CountVectorizer.fit_transform(X)</code></th><th>X:文本或者包含文本字符串的可迭代对象</th></tr></thead><tbody><tr><td></td><td>返回值：返回sparse矩阵</td></tr><tr><td><code>CountVectorizer.inverse_transform(X)</code></td><td>X:array数组或者sparse矩阵</td></tr><tr><td></td><td>返回值:转换之前数据格式</td></tr><tr><td><code>CountVectorizer.get_feature_names()</code></td><td>返回值：单词列表,重复的只看做一次</td></tr></tbody></table><p><code>fit_transform()</code>首先使用 <code>fit()</code> 对输入数据进行学习，建立词汇表；然后使用 <code>transform()</code> 将文本数据转换为数值特征矩阵</p><p><code>流程</code></p><ol><li><p>实列化类<code>CountVectorizer</code></p></li><li><p>调用fit_transform方法输入数据并转换(注意返回格式,利用<code>toarray()</code>进行sparse矩阵转换array数组)</p><p>[“life is short,i like python”,”life is too long,i dislike python”]</p><p>对每篇文章，在词的列表里面进行统计每个词出现的次数，单个字母不统计。</p></li></ol><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%96%87%E6%9C%AC%E6%8A%BD%E5%8F%96.png"></p><p>文本特征抽取的用途: <code>文本分类</code>，<code>情感分析</code></p><p>单个英文字母不统计：不代表文本的主体，没有分类的依据。</p><p>中英文杂糅：默认不支持特征提取，以空格分开(分词工具)</p><p>分词工具：<code>jieba</code>分词</p><p><code>下载</code>: pip3 install jieba</p><p><code>使用</code>: import jieba</p><p>​   jieba.cut(“我是一个好程序员”)</p><p><code>注意</code>: 返回值:词语生成器</p><h5 id="文本特征抽取方式2"><a href="#文本特征抽取方式2" class="headerlink" title="文本特征抽取方式2:"></a><strong>文本特征抽取方式2:</strong></h5><p><strong>tf_idf重要性程度：</strong></p><p>类：<code>sklearn.feature_extraction.text.TfidfVectorizer</code></p><p>Tf:<code>term frequency</code> :词的频率-&gt;统计每篇文章在这个词的列表中出现的次数</p><p>idf:<code>inversedocument frequency</code>：逆文档频率-&gt;log(总文档数量&#x2F;该词出现的文档数量)</p><p><code>tf*idf</code>,我们称之为重要性程度</p><p>语法:</p><p><code>TfidfVectorizer(stop_word=None,.....)</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/tf_idf.png"></p><h4 id="数据的特征预处理"><a href="#数据的特征预处理" class="headerlink" title="数据的特征预处理:"></a>数据的特征预处理:</h4><p>特征预处理：通过特定的统计方法(数学方法)将数据转换成算法要求的数据。</p><p>针对的数值型数据:标准缩放(归一化，标准化，缺失值)</p><p>类别型数据：one-hot编码</p><p>时间类型：时间的切分</p><p>特征预处理API:<code>sklearn.preprofessing</code></p><h5 id="归一化："><a href="#归一化：" class="headerlink" title="归一化："></a>归一化：</h5><p>特点：通过对原始数据进行变换把数据映射到(默认为[0,1])之间</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%BD%92%E4%B8%80%E5%8C%96.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E8%A7%84%E5%88%92%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.png"></p><p>sklearn归一化API:</p><p><code>sklearn.preprocessing.MinMaxScaler</code></p><p>MinMaxScaler语法：</p><p><code>MinMaxScalar(feature_range=(0,1)......)</code></p><p>​每个特征缩放到给定范围(默认[0，1])</p><p>​<code>MinMaxScalar.fit_transform(X)</code></p><p>​X:numpy array格式的数据[n_samples,n_features]</p><p>​返回值：转换后的形状相同的array</p><p>归一化步骤：</p><pre><code>1. 实列化`MinMaxScaler`1. 通过fit_transform转换</code></pre><p>想要多个特征同等重要，需要进行归一化处理，使得某一个特征对最终结果不会造成更大影响。</p><p>归一化总结:</p><p>注意在特定场景下最大值最小值是变化的，另外，最大值与最小值非常容易受到异常点的影响，所以，这种方法</p><p>的<code>鲁棒性</code>(稳定性)较差，只适合传统精确小数据场景。</p><h5 id="标准化："><a href="#标准化：" class="headerlink" title="标准化："></a>标准化：</h5><p>特点：通过对原始数据进行变换把数据变换到<code>均值为0</code>，<code>标准差为1</code>的范围内</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E5%8C%96.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%B1%82%E6%96%B9%E5%B7%AE.png"></p><p>var&#x3D;[(90-75)^2+(60-75)^2+(75-75)^2]&#x2F;3&#x3D;150</p><p>σ&#x3D;√150</p><p>异常的对平均值的影响很小</p><p><strong>方差考量了数据的稳定性，方差小表示数据比较集中，方差大表示数据比较分散。</strong></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E5%8C%96%E5%9B%BE.png"></p><p>结合归一化来谈标准化：</p><p>​对于归一化来说：如果出现异常点，影响了最大值和最小值，那么结果显然会发生改变</p><p>​对于标准化来说：如果出现异常点，由于具有一定数据量，少量的异常点对于平均值的影响并不大，从而方差改变较小。</p><p><code>标准差的API:</code></p><p>​<code>scikit-learn.preprocessing.StandardScaler</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/StandardScaler%E8%AF%AD%E6%B3%95-1732623439506-8.png"></p><p><code>标准化步骤</code></p><ol><li>实例化<code>StandardScaler</code></li><li>通过fit_transform转换</li></ol><p>标准化总结：在已有样本足够多的情况下比较稳定，适合限制嘈杂大数据场景。</p><p>数值型数据标准缩放的方法：1.归一化；2.标准化；3.缺失值</p><p>类别型数据:one-hot编码</p><p>时间类型：时间的切分</p><h5 id="缺失值处理方法"><a href="#缺失值处理方法" class="headerlink" title="缺失值处理方法:"></a>缺失值处理方法:</h5><p>删除：如果每列或者行数据缺失值达到一定的比例，建议放弃整行或者整列</p><p>插补：可以通过缺失值每行或者<strong>每列</strong>的平均值，中位值来填充。</p><p>缺失值API:<code>sklearn.processing.Imputer</code></p><p>数据当中的缺失值:np.nan(float类型）</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E7%BC%BA%E5%A4%B1%E5%80%BC.png"></p><h4 id="数据的降维"><a href="#数据的降维" class="headerlink" title="数据的降维:"></a>数据的降维:</h4><p>降维中的维度指的是<code>特征的数量</code></p><h5 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h5><p><code>特征选择的原因：</code></p><p>​冗余:部分特征的相关度高，容易消耗计算性能</p><p>​噪声:部分特征对预测结果有影响</p><p><code>特征选择是什么:</code></p><p>​就是单纯从提取到的所有特征中选择部分特征作为训练集特征，特征在选择前和选择后可以改变值，也不改变值，但是选择后的特征维数肯定比选择前小，毕竟我们只选择了其中的一部分特征。</p><p><code>特征选择的主要方法：</code></p><p>​Filter(过滤式)：Variance Threshold(从方差大小来考虑这个特征所有样本的数据情况)</p><p>​Embedded(嵌入式):正则化，决策树</p><p>​Wrapped(包裹式):</p><p><code>特征选择API:</code>    <code>sklearn.feature_selection.VarianceThreshold</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E9%99%8D%E7%BB%B4.png"></p><p><code>VarianceThreshold流程：</code></p><ol><li>初始化<code>VarianceThreshold</code>，指定阈值方差</li><li>调用<code>fit_transform</code></li></ol><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%811.png"></p><h5 id="主成分分析-PCA"><a href="#主成分分析-PCA" class="headerlink" title="主成分分析(PCA)"></a>主成分分析(PCA)</h5><p><code>主成分分析的API：</code></p><p>​<code>sklearn.decomposition</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/pca%E8%AF%AD%E6%B3%95.png"></p><p><code>n_components</code>:小数形式0~1</p><p>​    整数形式减少到的特征数量</p><p><code>PCA流程：</code></p><ol><li>初始化PCA,指定减少后的维度</li><li>调用fit_transform</li></ol><p><code>场景：</code></p><p>​PCA：当特征数量达到上百的时候就要考虑数据的简化问题(简化数据集的同时将损失降到最小)</p><p>​<img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E7%AE%80%E5%8C%96%E6%95%B0%E6%8D%AE%E9%9B%86.png"></p><h3 id="day02-课程第二天"><a href="#day02-课程第二天" class="headerlink" title="day02 课程第二天"></a>day02 课程第二天</h3><h4 id="sklearn数据集与估计器"><a href="#sklearn数据集与估计器" class="headerlink" title="sklearn数据集与估计器"></a>sklearn数据集与估计器</h4><p>数据集分为训练集和测试集</p><p>训练数据:用于训练，构建模型</p><p>测试数据:在模型检验时使用，用于评估模型是否有效</p><p>scikit-learn数据集API介绍：</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/sklearndata.png"></p><p>获取数据集返回的类型:</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B.png"></p><p>sklearn数据集划分API：</p><p><code>sklearn.model_selection.train_test_split</code></p><p>数据集进行分割：</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E5%89%B2.png"></p><p>用于分类的大数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sklearn.datasets.fetch_20newsgroups(data_home=<span class="literal">None</span>,subset=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line"><span class="comment"># subset:&quot;train&quot;或者&quot;test all&quot;,可选，选择要加载的数据集，训练集的训练，测试集的测试，两者的全部</span></span><br><span class="line">datasets.clear_data_home(data_home)=<span class="literal">None</span></span><br><span class="line"><span class="comment"># 清楚目录下的数据</span></span><br></pre></td></tr></table></figure><p>sklearn回归数据集：</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%9B%9E%E5%BD%92%E6%95%B0%E6%8D%AE%E9%9B%86.png"></p><p>特征工程的步骤:</p><p>​实例化(实例化的就是一个转换器类)</p><p>​调用fit_transform(对于文档简历分类词频矩阵，不能同时调用)</p><h4 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h4><p>算法是核心，数据和计算是基础。</p><p>大部分复杂模型的算法设计都是算法 工程事在做，而我们分析很多的数据，分析具体的业务，应用常见的算法，特征工程，调参数，优化。</p><p><code>数据类型</code>:</p><p>离散型数据:由记录不同类别个体的数目得到的数据，又称计数数据，所有这些数据全部都是整数，而且不能再细分，也不能进一步提高他们的精确度。</p><p>连续型数据:变量可以在某个范围内取任一数，即变量的取值可以是连续的，如长度，时间，质量值等，这类类非整数，含有小数部分。</p><p>注:只要记住一点，离散型是区间内不可分，连续型是区间内可分。</p><p>数据的类型将是机器学习模型不太问题不同处理的依据。</p><p><code>机器学习算法分类</code>:</p><p>监督学习(预测)：(<strong>特征值+目标值</strong>)</p><ul><li>分类(<strong>目标值离散型</strong>) k-近邻算法 贝叶斯分类 决策树与随机森林 逻辑回归 神经网络</li><li>回归(<strong>目标值连续型</strong>) 线性回归 岭回归</li><li>标注 隐马尔可夫模型</li></ul><p>无监督学习:(特征值)</p><ul><li>聚类 k-means</li></ul><p>监督学习:可以由输入数据中学到或建立一个模型，并依次模式推测新的结果。输入数据是由输入特征值和目标值所组成。函数的输出可以是一个连续的值(回归)，或是输出是有限个离散值(称作分类)</p><p>无监督学习:可以由输入数据中学到或建立一个模型，并依次模式推测新的结果。输入数据是由输入特征值所组成。</p><p><code>机器学习的开发流程</code>:</p><p>​      1.公司本身就有数据</p><p>1.数据：2.合作过来的数据</p><p>​       3.购买的数据</p><p>2.原始数据：明确问题做什么(相当于建立模型的过程(分类or回归or非监督学习))</p><p>3.数据基本处理：pd去处理(缺失值，合并表)</p><p>4.特征工程(特征进行处理)</p><p>5.找合适的算法去进行预测分析</p><p>6.模型的评估，判断效果</p><p>7.上线使用(以<code>API</code>形式提供)</p><p>模型：算法+数据</p><h4 id="分类算法-k近邻算法"><a href="#分类算法-k近邻算法" class="headerlink" title="分类算法-k近邻算法"></a>分类算法-k近邻算法</h4><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.png"></p><p>定义:如果一个样本在特征空间中的k个最近相似(即特征空间中最邻近)的样本中的大多数属于某一种类别,则该样本也属于这个类别。</p><p><code>KNN算法</code>最早是由Cover和Hart提出的一种分类算法。</p><p><code>欧氏距离:</code>两个样本的距离可以通过如下公式计算</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%AC%A7%E5%BC%8F%E8%B7%9D%E7%A6%BB.png"></p><p>K-近邻算法需要做标准化处理。</p><p><code>sklerarn k-近邻算法的API</code>:</p><ul><li><p><code>sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,algorithm=&#39;auto&#39;)</code></p><ul><li><p>n_neighbors:  int,可选(默认&#x3D;5)，k_neighbors查询默认使用的邻居数</p></li><li><p>algorithm:{‘auto’,’ball_tree’,’kd_tree’,’brute’},可选用于计算最近邻居的算法，‘ball_tree’将使用BallTree.</p><p>‘kd_tree’将使用KDTree.’auto’将尝试根据传递给fit方法的值来决定最合适的算法。</p></li></ul></li></ul><p><a href="https://www.kaggle.com/c/facebook-v-predicting-check-ins/data">https://www.kaggle.com/c/facebook-v-predicting-check-ins/data</a></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%9522.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E9%B3%B6%E5%B0%BE%E8%8A%B1%E4%BD%9C%E6%A5%AD.png"></p><h4 id="分类模型的评估"><a href="#分类模型的评估" class="headerlink" title="分类模型的评估"></a>分类模型的评估</h4><h4 id="分类算法-朴素贝叶斯算法"><a href="#分类算法-朴素贝叶斯算法" class="headerlink" title="分类算法-朴素贝叶斯算法"></a>分类算法-朴素贝叶斯算法</h4><p>概率基础：概率定义为一件事情发生的可能性。</p><p>联合概率和条件概率:</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E8%81%94%E5%90%88%E6%A6%82%E7%8E%87%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87.png"></p><p>A1,A2相互独立是指A1和A2不是相互影响的，<code>条件独立的</code>,自然语言处理处理不独立的情况。</p><p>使用朴素贝叶斯算法的前提是特征条件是独立的。</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F%E8%A7%A3%E9%87%8A.png"></p><h4 id="朴素贝叶斯算法实列"><a href="#朴素贝叶斯算法实列" class="headerlink" title="朴素贝叶斯算法实列"></a>朴素贝叶斯算法实列</h4><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E4%B8%BE%E4%BE%8B%E8%B4%9D%E5%8F%B6%E6%96%AF-1732850040376-7.png"></p><p><code>0/121合理吗？</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%B9%B3%E6%BB%91.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E6%94%B9%E9%80%A0%E5%90%8E-1732850380206-11.png"></p><p><code>朴素贝叶斯实现API</code></p><p>​<code>sklearn.naive_bayes.MultinomialNB</code></p><p><code>MultinomiaNB</code></p><p>​<code>sklearn.naive_bayes.MultinomialNB(alpha=1.0)</code></p><p>​朴素贝叶斯分类</p><p>​alpha:拉普拉斯平滑系数</p><p>分类评估：</p><p>混淆矩阵:在分类任务下，预测结果与正确标记之间存在四种不同的组合，构成混淆矩阵(适用于多分类)</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E6%B7%B7%E6%B7%86%E6%A0%87%E7%AD%BE.png"></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%8F%AC%E5%9B%9E%E7%8E%87.png"></p><p><code>F1-score</code>反应了模型的稳健性</p><p>True Positive（TP）、True Negative（TN）、False Positive（FP）、False Negative（FN）</p><table><thead><tr><th></th><th>预测值&#x3D;1</th><th>预测值&#x3D;0</th></tr></thead><tbody><tr><td>真实值&#x3D;1</td><td>3（TP）</td><td>1（FP）</td></tr><tr><td>真实值&#x3D;0</td><td>1（TN）</td><td>7（FN）</td></tr></tbody></table><ul><li>TP &#x3D; 3（实际患病并被正确预测出来的数量）</li><li>FP &#x3D; 1（实际健康但被错误预测为患病的数量）</li><li>TN &#x3D; 1（实际患病但被错误预测为健康的数量）</li><li>FN &#x3D; 7（实际健康并被正确预测出来的数量）</li></ul><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/F-score.png"></p><p><code>F1得分</code>得分是精确率（Precision）和召回率（Recall）的调和平均数，常用于评估二分类模型的性能。在数学上，<code>F1</code>得分的计算公式如下：</p><p>首先，定义精确率和召回率:</p><p>精确率 <code>(Precision) = TP / (TP + FP)</code></p><p>召回率 <code>(Recall) = TP / (TP + FN)</code></p><p>F1得分 <code>(F1 Score) = 2 * (精确率 * 召回率) / (精确率 + 召回率)</code></p><p>分类模型评估API:</p><p><code>sklearn.metrics.classification_report</code></p><p><code>sklearn.metrics.classification_report(y_true,y_pred,target_names=None)</code></p><ul><li>y_true:真实目标值</li><li>y_pred:估计器预测目标值</li><li>target_names:目标类别名称</li><li>return：每个类别精确率和召回率</li></ul><h4 id="模型的选择与调优"><a href="#模型的选择与调优" class="headerlink" title="模型的选择与调优"></a>模型的选择与调优</h4><h5 id="交叉验证-cross-validation"><a href="#交叉验证-cross-validation" class="headerlink" title="交叉验证(cross validation)"></a>交叉验证(cross validation)</h5><p>为了让被评估的模型更加准确可信，在训练集中选一部分样本用于测试模型。保留一部分的训练集数据作为验证集&#x2F;评估集，对训练集生成的参数进行测试，相对客观的判断这些参数对训练集之外的数据的符合程度。</p><h2 id="K折交叉验证（k-fold-cross-validation）"><a href="#K折交叉验证（k-fold-cross-validation）" class="headerlink" title="K折交叉验证（k-fold cross validation）"></a>K折交叉验证（k-fold cross validation）</h2><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.png"></p><p>​     把四个准确率求平均值得到一个模型结果</p><h5 id="网格搜索-Grid-Search-："><a href="#网格搜索-Grid-Search-：" class="headerlink" title="网格搜索(Grid Search)："></a>网格搜索(Grid Search)：</h5><p><code>Grid Search</code>：一种调参手段&#x2F;调优方法，在参数列表中进行<strong>穷举搜索</strong>，对每种情况进行训练，找到最优的参数。</p><p>穷举搜索：在所有候选的参数选择中，通过循环遍历，尝试每一种可能性，表现最好的参数就是最终的结果。其原理就像是在数组里找最大值。（为什么叫网格搜索？以有两个参数的模型为例，参数a有3种可能，参数b有4种可能，把所有可能性列出来，可以表示成一个3*4的表格，其中每个cell就是一个网格，循环过程就像是在每个网格里遍历、搜索，所以叫grid search）</p><p>超参数搜索-网格搜索<code>API</code></p><p><code>sklearn.model_selection.GridSearchCV</code></p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/GridSearchCV.png"></p><h4 id="分类算法-决策树与随机森林"><a href="#分类算法-决策树与随机森林" class="headerlink" title="分类算法-决策树与随机森林"></a>分类算法-决策树与随机森林</h4><p>认识决策树</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%92%E5%88%86.png"></p><p><code>划分的依据-信息熵</code>：</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E4%BF%A1%E6%81%AF%E7%86%B5.png"></p><p>信息熵公式：信息熵越大不确定性也会随之增大</p><ul><li><em>p</em>(<em>x</em>) 是 X&#x3D;<em>x</em> 的概率，即 X取特定值 x 的概率。</li></ul><p>$$ {信息熵}<br>H(X)&#x3D;− \sum_{i&#x3D;1}^n p(x_i)log p(x_i)<br>$$</p><p>$$<br>H(X)&#x3D;− \sum_{k&#x3D;1}^K\frac{|C_k|}{|D|}log \frac{|C_k|}{|D|}<br>$$</p><p>决策树的划分依据——<code>信息增益</code>：当得知一个特征条件之后，减少的信息熵的大小</p><p>特征A对训练数据集D的信息增益g(D,A)，H(D)为初始信息熵的大小<br>$$<br>g(D,A)&#x3D;H(D)-H(D|A)<br>$$</p><ul><li>注：信息增益表示得知特征X的信息而使得类Y得信息不确定性减少的程度</li></ul><p>条件熵<code>H(D|A)</code>的计算：衡量的是在已知某些变量的情况下，另一些变量的不确定性<br>$$<br>H(D|A)&#x3D;\sum_{i&#x3D;1}^n \frac{|D_i|}{|D|}H(D_i)&#x3D;-\sum_{i&#x3D;1}^n\frac{|D_i|}{|D|}\sum_{k&#x3D;1}^K\frac{|D_{ik}|}{|D|}log\frac{|D_{ik}|}{|D|}<br>$$<br>银行贷款分析</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E9%93%B6%E8%A1%8C%E8%B4%B7%E6%AC%BE%E6%A1%88%E4%BE%8B.png"><br>$$<br>H(D)&#x3D;-(\frac{9}{15}log\frac{9}{15}+\frac{6}{15}log\frac{6}{15})≈0.971 bits<br>$$</p><p>$$<br>g(D|年龄)&#x3D;H(D)-H(D^&#96;|年龄)&#x3D;0.971-[1&#x2F;3H(青年)+1&#x2F;3H(中年)+1&#x2F;3H(老年)]<br>$$</p><p>$$<br>H(青年)&#x3D;-(\frac{2}{5}log\frac{2}{5}+\frac{3}{5}log\frac{3}{5})&#x3D;0.97<br>$$</p><p>$$<br>H(中年)&#x3D;-(\frac{2}{5}log\frac{2}{5}+\frac{3}{5}log\frac{3}{5})&#x3D;0.97<br>$$</p><p>$$<br>H(老年)&#x3D;-(\frac{4}{5}log\frac{4}{5}+\frac{1}{5}log\frac{1}{5})&#x3D;0.72<br>$$</p><p>$$<br>g(D|年龄)&#x3D;0.971-0.88≈0.091<br>$$</p><p>$$<br>g(D|工作)&#x3D;0.324<br>$$</p><p>$$<br>g(D|房子)&#x3D;0.420<br>$$</p><p>$$<br>g(D|信贷情况)&#x3D;0.363<br>$$</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%86%B3%E7%AD%96%E6%A0%91%E5%88%92%E5%88%86.png"></p><p><code>ID3-信息增益最大原则</code></p><p><code>C4.5-信息增益比最大原则</code></p><p><code>CART</code></p><ul><li>回归树:平方误差最小</li><li>分类树:基尼系数最小的原则在<code>sklearn</code>中可以选择划分的默认原则</li></ul><p>sklearn决策树API:</p><p><code>class sklearn.tree.DecisionTreeClassifier(criterion=&#39;gini&#39;,max_deepth=None,random_state=None)</code></p><ul><li>决策树分类器</li><li>criterion：默认是“gini”系数，也可以选择信息增益的熵”entropy“</li><li>max_depth:树的深度大小</li><li>random_state:随机数种子</li><li>method：</li><li>decision_path:返回决策树的路径</li></ul><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E5%86%B3%E7%AD%96%E6%A0%91%E7%BB%93%E6%9E%84%E4%BF%9D%E5%AD%98.png"></p><p>泰坦尼克号乘客生存分类</p><p><a href="http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt">http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt</a></p><p>决策树的优缺点:</p><p>优点:</p><p>简单的理解和解释，树木可视化</p><p>需要很少的数据准备，其他技术通常需要数据归一化</p><p>缺点:</p><p>决策树学习中可以创建不能很好地推广数据的归于复杂的树–过拟合</p><p>改进:</p><p>减枝cart算法(决策树API当中已经实现，随机森林参数调优有相关介绍)</p><p>随机森林</p><h4 id="集成学习方法-随机森林"><a href="#集成学习方法-随机森林" class="headerlink" title="集成学习方法-随机森林"></a>集成学习方法-随机森林</h4><p>集成学习通过建立几个模型组合的来解决单一预测问题。它的工作原理是<strong>生成多个分类器&#x2F;模型</strong>，各自独立地学习和做出预测。这些预测最后结合成单预测，因此优于任何一个单分类的做出预测。</p><p>随机森林的定义:在机器学习中，随机森林是一个包括多个决策树的分类器，并且其输出的类别是由个别树输出的众数而定的</p><p><strong>众数</strong>是统计学中的一个概念，指的是在一组数据中，出现次数最多的数值。换句话说，众数是数据集中出现频率最高的值。</p><p>随机森林建立多个决策树的过程：</p><p><code>单个树建立过程(N个样本M个特征):</code></p><ol><li>随机在N各样本当中选择一个样本，重复N次，样本可能重复</li><li>随机在M个特征当中选出m个特征(m&lt;M)</li></ol><p></p><p>​    建立10颗决策树，样本，特征大多不一样，采用bootstrap抽样</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/image-20241202203931785.png"></p><p>随机森林<code>API</code>:</p><p><img src="/../images/Python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97API.png"></p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><h5 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h5><h5 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h5>]]></content>
    
    
    <summary type="html">&lt;center&gt;特征工程-k近邻算法-线性回归-逻辑回归-聚类-朴素贝叶斯&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析</title>
    <link href="https://readmengk90.github.io/2024/11/14/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://readmengk90.github.io/2024/11/14/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2024-11-14T13:07:27.232Z</published>
    <updated>2024-11-24T11:43:03.381Z</updated>
    
    <content type="html"><![CDATA[<p><strong>想要和得到中间还有两个字就是要做到</strong></p><h3 id="数据分析定义"><a href="#数据分析定义" class="headerlink" title="数据分析定义"></a>数据分析定义</h3><p>matplotlib：帮助我们进行画图</p><p>numpy：处理数值型数组</p><p>pandas：在numpy基础之上，除了能处理数值型的数组之外，还能帮助处理字符串，时间序列，列表，字典等</p><ol><li><p>为什么要学习数据分析</p><p>能够非常方便的帮助我们从一堆数据里面找出直观的结论供来使用。</p><p>是Python数据科学的基础。</p><p>是机器学习课程的基础。</p></li><li><p>什么是数据分析</p><p>数据分析是用适当的方法对收集来的大量数据进行分析，帮助人们作出判断，以便采取适当行动。</p><p>数据分析流程：提出问题——准备数据——<strong>分析数据</strong>——获得结论——成果可视化</p></li><li><p>环境安装</p><p>CONDA环境安装:</p><p>CONDA集成了各种平台下所需要的环境对应的依赖，安装CONDA,对那种装不上的模块问题都可以轻松解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda: data science package &amp; environment manager</span><br><span class="line">创建环境</span><br><span class="line">conda create ——name python3 python=3</span><br><span class="line">切换环境</span><br><span class="line">windows:activate python3</span><br><span class="line">linux/macos:source activate python3</span><br><span class="line">官方地址：https://www.anaconda.com/download/</span><br></pre></td></tr></table></figure><p>anaconda安装<a href="https://www.bilibili.com/video/BV1hx411d7jb?spm_id_from=333.788.player.switch&vd_source=d8733037a2c6216f5b8db97d9c49da5f&p=8">【matplotlib折线图】06matplotlib绘制多次图形和不同图形的差异介绍和总结_哔哩哔哩_bilibili</a></p></li><li><p>认识jupyter notebook</p></li></ol><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><p> 作用：matplotlib能将数据进行可视化，更直观的呈现，是数据更加客观，更具有说服力。</p><p> 定义：matplotlibs是最流行的Python底层绘图库，主要做数据可视化图表，名字取材于MATLAB，模仿MATLAB构建。</p><p><a href="https://blog.csdn.net/xyint/article/details/129107802">Python 使用 pip 安装 matplotlib 模块（精华版）_pip install matplotlib-CSDN博客</a></p><p>导入：from matplotlib import pyplot as plt </p><h4 id="图片参数优化"><a href="#图片参数优化" class="headerlink" title="图片参数优化"></a>图片参数优化</h4><ol><li><p>设置图片大小(想要一个高清无码大图)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig=plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dip=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># figure图形图标的意思，在这里指的就是我们画的图</span></span><br><span class="line"><span class="comment"># 通过实例化一个figure并且传递参数，能够在后台自动使用该figure实列</span></span><br><span class="line"><span class="comment"># 在图形模糊的时候可以传入dpi(每英寸像素点的个数)参数，让图片更加清晰</span></span><br></pre></td></tr></table></figure></li><li><p>保存到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">&quot;./sig_size.png&quot;</span>) <span class="comment"># 当前位置下保存</span></span><br><span class="line"><span class="comment"># 绘图后才可以保存，可以保存为svg这种矢量图格式，放大不会有锯齿</span></span><br></pre></td></tr></table></figure></li><li><p>描述信息，比如x轴和y轴表示什么，图表示什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plt.xlable(<span class="string">&quot;时间&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度 单位℃&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.title(<span class="string">&quot;10点到12点每分钟温度的变化情况&quot;</span>,fontproperties=my_font)</span><br><span class="line"><span class="comment"># 注意中文问题</span></span><br><span class="line"><span class="comment"># ---------------------------------</span></span><br><span class="line"><span class="comment"># x轴刻度不是我们设置的，如何调整</span></span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line">plt.xticks(x)</span><br><span class="line"><span class="comment"># 步长变成0.5，如何调整</span></span><br></pre></td></tr></table></figure></li><li><p>调整x或y的刻度的间距</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># x轴表示时间,range()获取数据序列包前不包后</span></span><br><span class="line">x=<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># y轴表示温度</span></span><br><span class="line">y=[<span class="number">15</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">28</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>]</span><br><span class="line">plt.plot(x,y) <span class="comment"># 绘制折线图</span></span><br><span class="line"><span class="comment"># 列表推导式（List Comprehension)是Python中的一种简洁而强大的语法，</span></span><br><span class="line"><span class="comment"># 用于从一个已有的列表、元组、字典等可迭代对象创建新的列表。</span></span><br><span class="line"><span class="comment"># 它允许你在一行代码中快速生成一个列表，具有更高的可读性和效率。</span></span><br><span class="line">_xticks=[i/<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">49</span>)]</span><br><span class="line">plt.xticks(_xticks[::<span class="number">3</span>]) <span class="comment"># 绘制x轴上的刻度</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">min</span>(y),<span class="built_in">max</span>(y)+<span class="number">1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>给图表添加网格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(alpha=<span class="number">0.4</span>) <span class="comment"># alpha是透明度(0~1)</span></span><br></pre></td></tr></table></figure></li><li><p>标注图例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.添加label</span></span><br><span class="line">plt.plot(x,y1,label=<span class="string">&quot;自己&quot;</span>)</span><br><span class="line">plt.plot(x,y2，label=<span class="string">&quot;同桌&quot;</span>)</span><br><span class="line"><span class="comment"># 中文显示</span></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\方正粗黑宋简体.ttf&quot;</span>)  <span class="comment"># 替换为您字体文件的路径</span></span><br><span class="line"><span class="comment"># 2.添加图例</span></span><br><span class="line">plt.legend(prop=my_font,loc=<span class="number">0</span>) <span class="comment"># prop中文显示调用;loc表示图列位置</span></span><br><span class="line"><span class="comment"># 3.调整图列位置</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Snipaste_2024-11-16_09-49-53.png"></p></li><li><p>线条的样式(比如颜色，线条风格)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y1,label=&quot;自己&quot;,color=&quot;green&quot;,linestyle=&quot;:&quot;)</span><br><span class="line">plt.plot(x,y2，label=&quot;同桌&quot;,color=&quot;orange&quot;,linestyle=&quot;——&quot;)</span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Snipaste_2024-11-16_09-59-18.png"></p></li><li><p>标记出特殊的点(比如告诉别人最高点和最低点在哪里)</p></li><li><p>给图片添加一个水印(防伪，防止盗用)</p></li></ol><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%80%BB%E7%BB%93.png"></p><p><strong>使用 <code>matplotlib</code> 绘图时，中文字符可能无法正确显示的问题</strong></p><p>解决办法：可以通过matplotlib下的font_manager来修改matplotlib的默认字体</p><p>步骤：</p><ol><li><p>查找系统中的中文字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line">font_paths = fm.findSystemFonts(fontpaths=<span class="literal">None</span>, fontext=<span class="string">&#x27;ttc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(font_paths)</span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/image-20241115160547520.png"></p></li><li><p>设置中文字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\\Windows\\Fonts\\方正粗黑宋简体.ttf&quot;</span>)  <span class="comment"># 替换为您字体文件的路径</span></span><br><span class="line">plt.xticks(fontproperties=my_font) <span class="comment"># rotation=45选择45°</span></span><br></pre></td></tr></table></figure></li><li><p>显示结果</p></li></ol><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/image-20241115160812200.png"></p><p><a href="https://matplotlib.org/gallery/index.html">https://matplotlib.org/gallery/index.html</a></p><h4 id="不同图形的应用场景"><a href="#不同图形的应用场景" class="headerlink" title="不同图形的应用场景"></a>不同图形的应用场景</h4><ul><li><strong>折线图</strong>:以折线的上升或下降来表示统计数量的增减变化的统计图</li></ul><p>​       特点：能够显示<strong>数据的变化趋势</strong>，反应事物的变化情况(变化)</p><ul><li><p><strong>直方图</strong>：由一系列高度不等的纵向条纹或线段表示<strong>数据分布的情况</strong>，一般用横轴表示数据范围，纵轴表示分布情况。</p><p>特点：绘制连续性的数据，展示一组或者多组数据的分布状况(统计)</p></li><li><p><strong>条形图</strong>：排列在工作表的列或行中的数据可以绘制到条形图中。</p><p>特点：绘制连离散的数据，能够一眼看出各个数据的大小，比较数据之间的差别(统计)</p></li><li><p><strong>散点图</strong>：用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。</p><p>特点：判断变量之间是否存在数量关联趋势，展示离群点(分布规律)</p></li></ul><h4 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line">plt.scatter(x,y)</span><br></pre></td></tr></table></figure><p>散点图的更多应用场景:</p><p>​不同条件(维度)之间的内在关联关系</p><p>​观察数据的离散聚合程度</p><h4 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_x = <span class="built_in">range</span>(<span class="built_in">len</span>(a))</span><br><span class="line">_y = b</span><br><span class="line">plt.bar(_x,b,width=<span class="number">0.2</span>,color=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">—&gt;bar绘制条形图，只能接收含数字的可迭代对象</span><br><span class="line">-&gt;width表示长条的宽度,默认<span class="number">0.8</span></span><br><span class="line">plt.xticks(_x,a,fontproperties=my_font,rotation=<span class="number">90</span>)</span><br><span class="line">-&gt;通过设置xticks实现数字和字符串的对应</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------</span></span><br><span class="line"><span class="comment"># 绘制横向的条形图</span></span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="built_in">len</span>(a)),b,height=<span class="number">0.8</span>)</span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(_x)),_x,rotation=<span class="number">45</span>,fontproperties=my_font)</span><br><span class="line"><span class="comment"># 反转y轴，使得大的数据在上面</span></span><br><span class="line">plt.gca().invert_yaxis()</span><br></pre></td></tr></table></figure><p>条形图更多应用场景:频率统计</p><h4 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h4><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%9B%B4%E6%96%B9%E5%9B%BE.png"></p><p>一般来说能够使用plt.hist方法的是那些没有统计过的数据</p><p>直方图更多应用场景：用户年龄的分布状态；一段时间内用户点击次数的分布状态；用户活跃时间的分布状态。</p><p>通过条形图绘制直方图</p><p><a href="https://www.bilibili.com/video/BV1hx411d7jb?spm_id_from=333.788.player.switch&vd_source=d8733037a2c6216f5b8db97d9c49da5f&p=13">【matplotlib常用统计图】05更多的绘图工具的了解_哔哩哔哩_bilibili</a></p><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><h4 id="定义和创建"><a href="#定义和创建" class="headerlink" title="定义和创建"></a>定义和创建</h4><p>numpy：处理数值型<strong>数组</strong>,一个在Python中做科学计算的基础库，重在数值计算，也是大部分Python科学计算库的基础库，多用于在大型，多维数组上执行数值运算。</p><p>如何通过numpy创建数组(矩阵):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 使用numpy生成数组，得到ndarray的类型</span></span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">b=np.array(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">c=np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment"># 上面a,b,c内容相同，注意arange和range的区别</span></span><br><span class="line"><span class="comment"># np.arange的用法：arange([start,] stop[,strp,],dtype=None)</span></span><br><span class="line"><span class="comment"># [1 2 3 4 5] &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>数组中存放数据的类型:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据的类型</span></span><br><span class="line"><span class="built_in">print</span>(a.dtype)</span><br><span class="line">  <span class="comment">#int64</span></span><br><span class="line"><span class="comment"># 指定创建的数组的数据类型</span></span><br><span class="line">a=np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],dtype=np.<span class="built_in">bool</span>) <span class="comment">#或者使用dtype=&#x27;?&#x27;</span></span><br><span class="line"><span class="comment"># 修改数组的数据类型</span></span><br><span class="line">a.astype(<span class="string">&quot;i1&quot;</span>) <span class="comment">#或者使用a.astype(np.int8)</span></span><br><span class="line"><span class="comment"># numpy中的小数</span></span><br><span class="line">b=np.array([random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line">b2=np.<span class="built_in">round</span>(b,<span class="number">2</span>)<span class="comment"># 取小数操作(2位)</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%B1%BB%E5%9E%8B.png"></p><h4 id="数组的形状"><a href="#数组的形状" class="headerlink" title="数组的形状"></a>数组的形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数组的形状</span></span><br><span class="line">a.shape</span><br><span class="line"><span class="comment"># (num1,):表示一维数组的个数 </span></span><br><span class="line"><span class="comment"># (num1,num2)：表示二维数组的行列 :a.shape[0]*a.shape[1]获得二位数组数据的个数</span></span><br><span class="line"><span class="comment"># (num1,num2,num3)：表示三维数组的块数，每块的行和列 :a.shape[1]*a.shape[2]获得三维数组数据的个数</span></span><br><span class="line"><span class="comment"># 修改数组的形状(重塑)</span></span><br><span class="line">a.reshape((num,))</span><br><span class="line">a.reshape((num1,num2))/a.arrange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 展开成一维数组的快捷方式</span></span><br><span class="line">a.flatten()</span><br></pre></td></tr></table></figure><h4 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h4><p>数组和数字进行计算</p><p>​数组(+-&#x2F;*)数字   (广播机制)</p><p>数组和数组进行计算</p><p>​数组+数组：对应位置进行计算</p><p>​行维度一致：行上进行运算</p><p>​列维度一致：列上进行运算</p><p>​行列维度均不一致: 不能进行运算</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%B9%BF%E6%92%AD%E5%8E%9F%E5%88%99.png"></p><p>不同维度的任何方向上都不一样时才不能计算</p><h4 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h4><p>1维数组，只有一个0轴;</p><p>2维数组(shape(2,2)),有0轴和1轴;</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E8%BD%B4.png"></p><p>3维数组(shape(2,2,3)),有0，1，2轴。</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E4%B8%89%E7%BB%B4%E8%BD%B4.png"></p><h4 id="numpy读取本地数据"><a href="#numpy读取本地数据" class="headerlink" title="numpy读取本地数据"></a>numpy读取本地数据</h4><p>​csv:comma-separated value,逗号分隔值文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(frame.dtype=np.<span class="built_in">float</span>,delimiter=<span class="literal">None</span>,skiprows=<span class="number">0</span>,usecols=<span class="literal">None</span>,unpack=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># delimter:指定边界符合是什么，不指定会导致每行数据为一个整体的字符串而报错</span></span><br><span class="line"><span class="comment"># dtype:默认情况下对于比较大的数据会将其变成科学计数的方式</span></span><br><span class="line"><span class="comment"># upack:默认是False(0),默认情况下，有多少条数据就会有多少行</span></span><br><span class="line"><span class="comment"># 为True(1)的情况下，每一列的数据会组成一行，原始数据会有多少列，加载出来的数据就会有多少行，相当于转置的效果。</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.png"></p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E8%BD%AC%E7%BD%AE.png"></p><h4 id="numpy索引和切片"><a href="#numpy索引和切片" class="headerlink" title="numpy索引和切片"></a>numpy索引和切片</h4><ul><li><p>取行：<code>t2[2]</code></p></li><li><p>取连续多行:<code>t2[2:,3]</code></p></li><li><p>取不连续的多行:<code>t2[[2,8,10]]</code></p></li><li><p>取连续的多列:<code>t2[:,2:]</code></p></li><li><p>取不连续的多列: <code>t2[:,[0,2]]</code></p></li><li><p>取行和列：<code>t2[2,3]</code></p></li><li><p>取多行和多列，取第三行到第五行，第二列到第四列的结果(行列交叉点的位置):<code>t2[2:5,1:4]</code></p></li><li><p>取多个不相邻的点:<code>t2[[0,2],[0,1]]</code>,(0,0)和(2,1)这两个点的值。</p></li></ul><h4 id="numpy中数值的修改"><a href="#numpy中数值的修改" class="headerlink" title="numpy中数值的修改"></a>numpy中数值的修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">   [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line"></span><br><span class="line">   [<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line"></span><br><span class="line">      [<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]]</span><br></pre></td></tr></table></figure><p>​用索引或者切片找到具体值，然后赋值。</p><p>​<code>where方法</code>三元运算符：np.where(t&lt;10,0,10)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t=[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line"></span><br><span class="line">      [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line"></span><br><span class="line">      [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>]]</span><br></pre></td></tr></table></figure><p>​<code>clip方法</code>裁剪:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,nan,nan,nan]]</span><br><span class="line">t.clip(<span class="number">10</span>,<span class="number">18</span>) <span class="comment">#小于10的替换为10，大于18的替换为18</span></span><br><span class="line">t=[[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line">[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,nan,nan,nan]]</span><br></pre></td></tr></table></figure><h4 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h4><p><code>np.vstack((t1,t2))</code><strong>竖直拼接</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t1=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">t2=[[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">    [<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]]</span><br><span class="line">np.vstack((t1,t2))</span><br><span class="line">array[</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>np.hstack((t1,t2))</code><strong>水平拼接</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t1=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">t2=[[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">    [<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]]</span><br><span class="line">np.hstack((t1,t2))</span><br><span class="line">array[</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="数组行列的交换"><a href="#数组行列的交换" class="headerlink" title="数组行列的交换"></a>数组行列的交换</h4><p><code>行交换</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">t=np.arange(<span class="number">12</span>,<span class="number">24</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">array([</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">[<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>],</span><br><span class="line">[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">])</span><br><span class="line">t[[<span class="number">1</span>,<span class="number">2</span>],:]=t[[<span class="number">2</span>,<span class="number">1</span>],:]</span><br><span class="line">array([</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>],</span><br><span class="line">[<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><code>列交换</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t=np.arange(<span class="number">12</span>,<span class="number">24</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">array([</span><br><span class="line">[<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">[<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>],</span><br><span class="line">[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">])</span><br><span class="line">t[:,[<span class="number">0</span>,<span class="number">2</span>]]=t[:,[<span class="number">2</span>,<span class="number">0</span>]]</span><br><span class="line">array([</span><br><span class="line">[[<span class="number">14</span> <span class="number">13</span> <span class="number">12</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">17</span> <span class="number">16</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">22</span> <span class="number">21</span> <span class="number">20</span> <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><p> <a href="......%5Carchive.zip">archive.zip</a> </p><h4 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h4><ol><li><p>获得最大值最小值的位置</p><p>np.argmax(t,axis&#x3D;0)</p><p>np.argmin(t,axis&#x3D;1)</p></li><li><p>创建一个全0的数组</p><p>np.zeros((3,4))</p></li><li><p>创建一个全1的数组</p><p>np.ones((3,4))</p></li><li><p>创建一个对角线为1的正方形数组(方阵):np.eye(3)</p></li></ol><h4 id="numpy生成随机数"><a href="#numpy生成随机数" class="headerlink" title="numpy生成随机数"></a>numpy生成随机数</h4><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E9%9A%8F%E6%9C%BA%E6%95%B0.png"></p><h4 id="copy和view的注意点"><a href="#copy和view的注意点" class="headerlink" title="copy和view的注意点"></a>copy和view的注意点</h4><ol><li>a&#x3D;b完全不复制，a和吧相互影响(浅考贝)</li><li>a&#x3D;b[:],<code>视图</code>的操作，一种切片，会创建新的对象a,但a的数据完全由b保管，他们两个数据变化是一致的(浅考贝)</li><li>a&#x3D;b.copy(),复制，a和b互补影响(深拷贝)</li></ol><h4 id="numpy中的nan和inf"><a href="#numpy中的nan和inf" class="headerlink" title="numpy中的nan和inf"></a>numpy中的nan和inf</h4><p>nan(NAN,NAN):not a number表示不是一个数字</p><p>什么时候numpy中会出现nan:</p><p>​当我们读取本地的文件为float的时候，如果有缺失，就会出现nan</p><p>​当做了一个不合适的计算的时候(比如无穷大(inf)-减去 无穷大)</p><p>inf(-inf,inf):infinity,inf表示正无穷，-inf表示负无穷</p><p>什么时候会出现inf包括(-inf,+inf)</p><p>​比如一个数字除以0，(python中直接会报错，numpy中是一个inf或者-inf)</p><p>注意点：</p><ol><li><p>两个nan是不相等的(属于同一类但不是同等值)</p><p><code>np.nan==np.nan</code></p><p><code>False</code></p></li><li><p>np.nan !&#x3D; np.nan</p><p><code>np.nan!=np.nan</code></p><p><code>True</code></p></li><li><p>利用以上特性，判断数组中的nan个数</p><p><code>In [86]: t</code></p><p><code>out[86]: array([1.,2.,nan])</code></p><p><code>In [87]: np.count_nonzero(t!=t)</code></p><p><code>Out[87]: 1</code></p></li><li><p>nan和任何值计算都为nan</p></li><li><p>由于2特性，那么如何判断一个数字是否为nan呢？通过np.isnan(a)来判断，返回bool类型，比如希望把nan替换为0</p><p><code>In[89]: t</code></p><p><code>out[89]:array([1.,2.,nan])</code></p><p><code>In[90]: np.isnan(t)</code>(为nan返回True，否则返回 False)</p><p>在一组数据中单纯把nan替换为0，会带来什么样的影响？</p><p>​比如，全部替换为0后，替换之前的平均值如果大于0，替换之后的均值肯定会变小。</p><p>​        所以更一般的方式是把缺省的数值替换为均值(中值)或者是直接删除有缺失值的那一行</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/nan.png"></p></li></ol><h4 id="numpy中常用统计函数"><a href="#numpy中常用统计函数" class="headerlink" title="numpy中常用统计函数"></a>numpy中常用统计函数</h4><p>求和:t.sum(axis&#x3D;None)(None&#x3D;0&#x2F;1)</p><p>均值:t.mean(a,axis&#x3D;None)受离群点的影响较大</p><p>中值:np.median(t,axis&#x3D;None)</p><p>最大值:t.max(axis&#x3D;None)</p><p>最小值:t.min(axis&#x3D;None)</p><p>极值:np.ptp(t,axis&#x3D;None)，即最大值和最小值之差</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%A0%87%E5%87%86%E5%B7%AE.png"></p><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>pandas：在numpy基础之上，除了能处理数值型的数组之外，还能帮助处理字符串，时间序列，列表，字典等。</p><p>numpy能够帮我们处理数值型数据，但是这还不够，很多时候，我们的数据除了数值之外，还有字符串，时间序列等。</p><p>比如：我们通过爬虫获取到了存储在数据库中的数据，之前youtobe的例子中除了数值之外还有国家的信息，视频的分类tag信息，标题信息等。</p><p>所以，numpy能够帮助我们处理数值，但是pandas除了数值之外(基于numpy)，还能帮助我们处理其他类型的数据。</p><h4 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h4><ol><li>Series一维，<code>带标签(索引)数组</code></li><li>DataFrame二维，<code>Series容器</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">t1=pd.Series(np.arange(<span class="number">10</span>),index=<span class="built_in">list</span>(string.ascii_uppercase[:<span class="number">10</span>]))</span><br><span class="line"><span class="comment"># 通过字典来创建</span></span><br><span class="line">temp_dict=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;黄浩&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">30</span>,<span class="string">&quot;tel&quot;</span>:<span class="number">10086</span>&#125;</span><br><span class="line">t2=pd.Series(temp_dict)</span><br></pre></td></tr></table></figure><h4 id="Series的切片和索引"><a href="#Series的切片和索引" class="headerlink" title="Series的切片和索引"></a>Series的切片和索引</h4><p>通过位置或索引取：</p><p><code>t1[“name&quot;]或t1[1]</code></p><p>取连续的多行</p><p><code>t1[:2]</code></p><p>取不连续的多行</p><p><code>t1[[1,2]]</code></p><p>ndarray的很多方法都可以运用于series类型，比如argmax,clip。</p><p>series具有where方法，但是结果和ndarray不同。</p><h4 id="读取外部数据"><a href="#读取外部数据" class="headerlink" title="读取外部数据"></a>读取外部数据</h4><p>数据如果存储在csv中，直接使用<code>pd.read_csv()</code>,数据类型为DataFrame类型而不是Series类型</p><p>数据如果在数据库中(mysql或mongodb):<code>pd.read_sql(sql_sentence,connection)</code></p><p><code>mongodb内容的读取</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br></pre></td></tr></table></figure><h4 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h4><p>DataFrame对象既有行索引，又有列索引。</p><p>行索引，表明不同行，横向索引，叫index，0轴，axis&#x3D;0</p><p>列索引，表明不同列，纵向索引，叫columns，1轴，axis&#x3D;1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(np.arrange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>),index=<span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>),columns=<span class="built_in">list</span>(<span class="string">&quot;WXYZ&quot;</span>))</span><br></pre></td></tr></table></figure><p>Series和DataFrame的关系：DataFrame是Series容器</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/dataframe.png" alt="a"></p><p>DataFrame中排序的方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_csv(<span class="string">&quot;./dogName2.csv&quot;</span>)</span><br><span class="line">df=df.sort_values(by=<span class="string">&quot;Count_AnimalName&quot;</span>，ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="padas取行取列"><a href="#padas取行取列" class="headerlink" title="padas取行取列"></a>padas取行取列</h4><p>方括号写数组，表示取行，对行进行操作<code>df[:100]</code></p><p>写字符串，表示的取列索引，对列进行操作<code>df[&quot;Cout_AnimalName&quot;]</code></p><p>同时选择行和列如何操作？<code>df[:100][&quot;Cout_AnimalName&quot;]</code></p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/t3.png"></p><p>​df.loc通过<code>标签</code>获取行数据</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/loc.png"></p><p>​df.iloc通过<code>位置</code>获取行数据</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/iloc.png"></p><h4 id="pandas之布尔索引"><a href="#pandas之布尔索引" class="headerlink" title="pandas之布尔索引"></a>pandas之布尔索引</h4><p><code>df[df[&quot;Count_AnimalName&quot;]&gt;800]</code></p><p><code>多个布尔条件需要括号()括住每个条件并使用&amp;/|符连接</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Row_Labels  Count_AnimalName</span><br><span class="line"><span class="number">1156</span>       BELLA              <span class="number">1195</span></span><br><span class="line"><span class="number">2660</span>     CHARLIE               <span class="number">856</span></span><br><span class="line"><span class="number">3251</span>        COCO               <span class="number">852</span></span><br><span class="line"><span class="number">9140</span>         MAX              <span class="number">1153</span></span><br><span class="line"><span class="number">12368</span>      ROCKY               <span class="number">823</span></span><br></pre></td></tr></table></figure><h4 id="pandas缺失数据的处理"><a href="#pandas缺失数据的处理" class="headerlink" title="pandas缺失数据的处理"></a>pandas缺失数据的处理</h4><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE.png"></p><p>数据缺失通常有两种情况：</p><pre><code>1. 空,None等，在pandas是NAN(和np,nan一样）1. 另一种就是0</code></pre><p>回顾numpy如何处理缺失数据：</p><p>​一般的方式是把缺省的数值替换为均值(中值)或者是直接删除有缺失值的那一行.</p><p>pandas处理缺失数据的方式：</p><p><code>NaN的处理</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否为NaN</span></span><br><span class="line">pd.isnull(df)</span><br><span class="line">pd.notnull(df)</span><br><span class="line"><span class="comment"># 处理方式1：删除NaN所在的行</span></span><br><span class="line">dropna(axis=<span class="number">0</span>,how=<span class="string">&#x27;any&#x27;</span>,inplace=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># any表示有就删,all表示全部是NaN才删</span></span><br><span class="line"><span class="comment"># inplace表示是否进行原地修改</span></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="comment"># 处理方式2：填充数据</span></span><br><span class="line">t.fillna(t.mean()) <span class="comment">#填充均值</span></span><br><span class="line">t[<span class="string">&quot;列名&quot;</span>]=t[<span class="string">&quot;列名&quot;</span>].fillna(t[<span class="string">&quot;列名&quot;</span>].mean())<span class="comment">#单独对某一列进行操作</span></span><br><span class="line">t.fiallna(t.median()) <span class="comment">#填充中值</span></span><br><span class="line">t.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>pandas在计算均值的时候不会去统计NaN的行,numpy就会计算。</p><p><code>为0数据的处理</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t[t==<span class="number">0</span>]=np.nan <span class="comment"># 赋值为NaN</span></span><br><span class="line"><span class="comment"># 当然并不是每次为0的数据都需要处理</span></span><br><span class="line"><span class="comment"># 计算平均值等情况，nan是不参与计算的，但是0会的</span></span><br></pre></td></tr></table></figure><h4 id="数据的合并和分组聚合"><a href="#数据的合并和分组聚合" class="headerlink" title="数据的合并和分组聚合"></a>数据的合并和分组聚合</h4><p>重新构造一个全为0的数组，列名为分类，如果某一条数据中分类出现过，就让0变成1</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%88%86%E7%B1%BB.png"></p><p>字符串离散化</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A6%BB%E6%95%A3%E5%8C%96.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">df=pd.read_csv(<span class="string">&quot;./IMDB-Movie-Data.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;Genre&quot;</span>])</span><br><span class="line"><span class="comment"># 重新构造一个全为0的数组，列名为分类，如果某一条数据中分类出现过，就让0变成1</span></span><br><span class="line"><span class="comment"># 统计分类的列表</span></span><br><span class="line">temp_list=df[<span class="string">&quot;Genre&quot;</span>].<span class="built_in">str</span>.split(<span class="string">&quot;,&quot;</span>).tolist()</span><br><span class="line">genre_list=<span class="built_in">list</span>(<span class="built_in">set</span>([i <span class="keyword">for</span> j <span class="keyword">in</span> temp_list <span class="keyword">for</span> i <span class="keyword">in</span> j]))</span><br><span class="line"><span class="comment"># 构建全为0的数组</span></span><br><span class="line">zeros_df=pd.DataFrame(np.zeros((df.shape[<span class="number">0</span>],<span class="built_in">len</span>(genre_list))),columns=genre_list)</span><br><span class="line"><span class="comment"># 给每个电影出现分类的位置赋值1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(df.shape[<span class="number">0</span>]):</span><br><span class="line">    zeros_df.loc[i,temp_list[i]]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(zeros_df)</span><br><span class="line"><span class="comment"># 统计每个分类的电影的数量和</span></span><br><span class="line">genre_count=zeros_df.<span class="built_in">sum</span>(axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">genre_count=genre_count.sort_values()</span><br><span class="line"><span class="built_in">print</span>(genre_count)</span><br><span class="line"><span class="comment"># 画条形图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">_x=genre_count.index</span><br><span class="line"><span class="built_in">print</span>(_x)</span><br><span class="line">_y=genre_count.values</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(_x)),_y)</span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(_x)),_x)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>在pandas中类似的分组操作我们有很简单的方式来完成</strong></p><p><code>grouped=df.group(by=&quot;columns_name&quot;)</code></p><p><code>DataFrameGroupBy</code> 是 pandas 中的一种数据分组对象，通常是通过使用 <code>groupby()</code> 方法对 DataFrame 进行分组时返回的对象。通过 <code>groupby()</code>，你可以按照一个或多个列的值将数据划分成不同的组，并在每个组上执行聚合、变换或过滤操作。</p><p><code>grouped中的每一个元素是一个元组</code></p><p>元组里面是(索引(分组的值))，分组之后是DataFrame</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/groupby.png"></p><p><strong>非NA值</strong>（Non-NA Values）指的是那些在数据集中存在有效数据的值，即不是缺失值（NA）的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按两个字段进行分组，生成的是Series类型(多索引)</span></span><br><span class="line">grouped=df.groupby(by=[df[<span class="string">&quot;Country&quot;</span>],df[<span class="string">&quot;State/Province&quot;</span>]])</span><br><span class="line"><span class="comment"># 很多时候我们只希望对获取分组之后的某一部分数据，或者对某几列数据进行分组</span></span><br><span class="line"><span class="comment"># 获取分组之后的某一部分数据</span></span><br><span class="line">df.groupby(by=[<span class="string">&quot;Country&quot;</span>,<span class="string">&quot;State/Province&quot;</span>])[<span class="string">&quot;Country&quot;</span>].count()</span><br><span class="line"><span class="comment"># 对某几列数据进行分组</span></span><br><span class="line">df[<span class="string">&quot;Country&quot;</span>].groupyby(by=[df[<span class="string">&quot;Country&quot;</span>],df[<span class="string">&quot;State/Province&quot;</span>]]).count()</span><br></pre></td></tr></table></figure><p>想取一列，仍希望其是DataFrame时，可以使用[]嵌套[]的方式来完成。</p><h4 id="索引和复合索引"><a href="#索引和复合索引" class="headerlink" title="索引和复合索引"></a>索引和复合索引</h4><p>简单的索引操作：</p><ul><li>获取index:<code>df.index</code></li><li>指定index:<code>df.index=[&#39;x&#39;,&#39;y&#39;]</code></li><li>重新设置index:<code>df.reindex(list(&quot;abcdef&quot;))</code></li><li>指定某一列作为index:<code>df.set_index(&quot;Country&quot;,drop=False)</code></li><li>返回index的唯一值:<code>df.set_index(&quot;Country&quot;).index.unique()</code></li></ul><p><code>复合索引</code>：</p><p>Series的复合索引:x[“one”,”h”]或者x[“one”] [“h”]</p><p>当需要从内层索引里取值时:d.swaplevel()[]</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E7%B4%A2%E5%BC%952.png"></p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E7%B4%A2%E5%BC%951.png"></p><p>DataFrame的复合索引:x&#x3D;a.set_index([“c”,”d”])[[“a”]]</p><p><code>x.loc[&quot;one&quot;]</code>     <code>x.loc[&quot;one&quot;].loc[&quot;h&quot;]</code>  <code>x.swaplevel().loc[&quot;h&quot;]</code><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%A4%9A%E5%B1%82%E7%B4%A2%E5%BC%95.png"></p><p>如何取one和j对应的值: <code>b.loc[&quot;one&quot;].loc[&quot;j&quot;]</code></p><h4 id="数据合并之join-merge"><a href="#数据合并之join-merge" class="headerlink" title="数据合并之join&amp;merge"></a>数据合并之join&amp;merge</h4><p>join:默认情况下它是把行行索引相同的数据合并到一起。</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6join.png"></p><p>merge:按照指定的列把数据按照一定方式合并到一起</p><p>默认的合并方式:inner,并集</p><p>merge outer,交集，NaN不全</p><p>merge left，左边为准，NaN补全</p><p>merge right,右边为准，NaN不全</p><h4 id="pandas时间序列"><a href="#pandas时间序列" class="headerlink" title="pandas时间序列"></a>pandas时间序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一段时间范围</span></span><br><span class="line">pd.date_range(start=<span class="literal">None</span>,end=<span class="literal">None</span>,periods=<span class="literal">None</span>,freq=<span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure><p>start和end以及freq配合能够生成start和end范围内以频率freq的一组时间索引</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%97%B6%E9%97%B41.png"></p><p>start和periods以及freq配合能够生成从start开始的频率为freq的periods个时间索引</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%97%B6%E9%97%B42.png"></p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E9%A2%91%E7%8E%87%E7%BC%A9%E5%86%99.png"></p><h5 id="在DataFrame中使用时间序列"><a href="#在DataFrame中使用时间序列" class="headerlink" title="在DataFrame中使用时间序列"></a>在DataFrame中使用时间序列</h5><p>如果时间列还不是 <code>datetime</code> 类型，可以使用 <code>pd.to_datetime()</code> 函数将其转换为 <code>datetime</code> 类型。这样 pandas 才能理解它并进行时间序列操作。</p><p><img src="/../images/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.png"></p><p>如果时间结果不是字符串如何处理<code>PerioidIndex</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 把分开的时间字符串提供periodIndex的方法转化为pandas的时间类型</span><br><span class="line">periods=pd.PeriodIndex(year=data[&quot;year&quot;],month=data[&quot;month&quot;],day=data[&quot;day&quot;],</span><br><span class="line">hour=data[&quot;hour&quot;],freq=&quot;H&quot;)</span><br><span class="line">df[&quot;datetime&quot;]=periods</span><br><span class="line"># 生成一个时间段</span><br></pre></td></tr></table></figure><h4 id="将时间列设置为索引"><a href="#将时间列设置为索引" class="headerlink" title="将时间列设置为索引"></a>将时间列设置为索引</h4><p>对时间序列数据进行分析时，通常需要将时间列设置为 <code>DataFrame</code> 的索引。这样可以方便地进行时间操作，如重采样、时间切片等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.set_index(<span class="string">&quot;timeStamp&quot;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="pandas重采样"><a href="#pandas重采样" class="headerlink" title="pandas重采样"></a>pandas重采样</h4><p>重采样：指的是将时间序列<code>从一个频率转化为另一个频率</code>进行处理的过程，将高频率数据转化为低频率数据为<code>降采样</code>，低频率转化为高频率为<code>升采样</code></p><p>pandas提供了一个<code>resample</code>的方法来帮助我们实现频率转化,它通常与聚合函数（如 <code>sum()</code>、<code>mean()</code>）一起使用。假设你的数据是按天记录的，你可以将其转换为按月统计的形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按月重采样并计算每个月的总和</span></span><br><span class="line">monthly_data = df.resample(<span class="string">&quot;M&quot;</span>).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;numpy-pandas-matplotlib&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Origin的使用</title>
    <link href="https://readmengk90.github.io/2024/11/12/%E5%B7%A5%E5%85%B7_Origin%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://readmengk90.github.io/2024/11/12/%E5%B7%A5%E5%85%B7_Origin%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-11-12T00:54:30.777Z</published>
    <updated>2024-11-12T11:32:54.178Z</updated>
    
    
    <summary type="html">&lt;center&gt;科研软件&lt;/center&gt;</summary>
    
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/categories/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/tags/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mendeley Desktop的使用</title>
    <link href="https://readmengk90.github.io/2024/11/12/%E5%B7%A5%E5%85%B7_Mendeley%20Desktop/"/>
    <id>https://readmengk90.github.io/2024/11/12/%E5%B7%A5%E5%85%B7_Mendeley%20Desktop/</id>
    <published>2024-11-12T00:52:45.928Z</published>
    <updated>2024-11-12T02:04:33.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h3><p>![](..&#x2F;images&#x2F;工具_Mendeley Desktop&#x2F;界面介绍.png)</p><h3 id="文献导入"><a href="#文献导入" class="headerlink" title="文献导入"></a>文献导入</h3><ol><li>File文件&#x2F;文件夹导入法(点击File-添加文件或整个文件夹)</li><li>PDF导入法(Add快捷图标–选择需要导入的文献PDF–打开)</li><li>BibTex格式导入法(引用–导入链接(BibTex)–复制BibTex格式引用代码–选中要导入的资料库–Ctrl+V,文献即可自动导入选中的资料库中)</li><li>已有数据库导入法:Mendeley支持XML,RIS等多种文献题录格式</li><li>Watch Folder导入法：</li></ol><h3 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h3><ol><li>点击题录展示区的⭐(收藏)和●(置顶),在右侧详情区单击即可对文献进行编辑。</li><li>点击题录编辑区的Notes便可对文献添加笔记。</li><li>自带PDF阅读器,双击想要阅读的文献或者PDF图标即可打开。</li><li>支持PDF全文搜索</li></ol><h3 id="文献引用"><a href="#文献引用" class="headerlink" title="文献引用"></a>文献引用</h3><ol><li>Mendeley添加至Word: Tools–Install MS Word Plugin–Word中成功添加Mendeley插件。</li><li>打开Word进行<code>文献引用</code>—-将光标放在待插入文献的位置—点击Word菜单栏的<code>引用</code>—点击<code>Insert Citation</code>插入文献引用—-出现文献搜索栏—-选择数据库(My Library)定位文献—输入文献相关信息，找到文献—选中文献点击🆗。</li><li>插入参考文献—将光标置于要插入参考文献的位置—点击Insert Bibilography插入参考文献–单击插入即可。</li><li>更改引文样式：View—-Citation Style —选择所需参考文献引用样式。</li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;科研软件&lt;/center&gt;</summary>
    
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/categories/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/tags/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>教师资格证</title>
    <link href="https://readmengk90.github.io/2024/11/11/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/"/>
    <id>https://readmengk90.github.io/2024/11/11/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/</id>
    <published>2024-11-11T10:32:42.677Z</published>
    <updated>2024-11-14T03:20:11.850Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/%E6%95%99%E8%B5%84.png"></p><p><strong>科目一考试：120min</strong></p><p>1.单选题：29题(20-25min)</p><p>2.职业理念职业道德材料题：2题(20min)</p><p>3.写作文：1h&#x2F;阅读理解第1问</p><p>4.阅读理解:10min</p><p>涂卡：5min</p><h3 id="法律法规"><a href="#法律法规" class="headerlink" title="法律法规"></a>法律法规</h3><p><strong>教师的权力</strong></p><p><strong>(一)</strong> <strong>教师</strong>作为教育者所享有的<strong>权利</strong>:</p><ol><li>教育教学权—–教学活动；改革实验**(常规上课,创新教学,变着花样来上课)**。</li><li>学术交流权(科学研究权)—–学术交流；科学研究**(参加研讨会)**。</li><li>指导评价权——指导学习；评定品行**(对学生;写评语)**。</li><li>报酬待遇权——薪资(按时+足额)；福利待遇；<code>带薪休假</code>。</li><li>民主管理权——建言献策**(给学校提建议或意见;教职工大会民主讨论)**</li><li>进修培训权——提高进步**(培训活动不能影响正常的教育教学的前提下进行)**</li></ol><p>(假期培训是否侵犯报酬待遇权,具体问题具体分析：看语境是否要求自愿参加)</p><p><strong>(二) ** <strong>教师</strong>作为专业人员的</strong>义务**：</p><ol><li>遵纪守法</li><li>履行教育教学职责</li><li>对学生进行思想政治教育</li><li>爱护尊重学生</li><li>保护学生合法权益</li><li>提高业务水平**(终身学习)**</li></ol><p>在教师的权力和义务当中，既是权力又是义务的是:(<strong>教育教学</strong>)</p><p><strong>学生的公民权</strong></p><ol><li><p>人身权</p><ol><li>生命权–(<strong>学生活着</strong>) 任何人都不得非法剥夺他人的生命)。</li><li>健康权–(<strong>学生健康的活着</strong>) 任何组织或者个人不得侵害他人的健康权。</li><li>身体权–(<strong>学生完整的活着</strong>) 不能少根毫毛,任何组织或个人不得侵害他人的身体权。</li><li>姓名权–(<strong>冒名顶替</strong>) 禁止他人干涉，盗用，假冒。</li><li>肖像权–(<strong>丑化;非法使用</strong>) 未经本人同,任何人不得<strong>以营利为目的</strong>使用学生的肖像。</li><li>名誉权–(<strong>损毁名声</strong>) 任何人禁止用<strong>侮辱</strong>,<strong>诽谤</strong>,<strong>造谣,泼脏水</strong>等方式损害学生的名誉。</li><li>荣誉权–(<strong>剥夺荣誉</strong>) 任何人不得<strong>非法剥夺</strong>学生的<strong>荣誉称号</strong>。</li><li>隐私权–(**公开日记&#x2F;信件;公布成绩;个人信息(病史);监控不当(宿舍,厕所,更衣室) **被他人非法侵扰,知悉,收集,利用和公开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">人身自由---禁止非法拘禁;搜身(不能动)。</span><br><span class="line">人格尊严---禁止侮辱;歧视;起绰号;体罚与变相体罚。</span><br><span class="line">人格尊严  VS   生命健康</span><br><span class="line">（体罚）    （体罚＋伤害结果)</span><br><span class="line">科目一当中的搜身不涉及到其他,只涉及到人生自由。</span><br></pre></td></tr></table></figure></li><li><p>财产权</p><ol><li>财产所有权– <strong>(占用;损坏;虚拟账户)</strong>  没收+未归还</li><li>继承权</li><li>受赠权</li><li>知识产权的所有权–(<strong>稿费</strong>)</li></ol></li></ol><p>学生的受教育权</p><ol><li>参加教育教学权–(听课,参加活动)</li><li>获得经济资助权–(助学金,助学贷款;奖学金)</li><li>获得学业证书权–(毕业证)</li><li>申诉起诉权</li><li>受完法定年限教育权–(<strong>初中之前</strong>)</li></ol><p><strong>教育相关法律法规</strong>(自学+先看划线的法条+看一章刷一章粉笔题+剩余法条)</p><h3 id="基本能力-阅读理解-10min"><a href="#基本能力-阅读理解-10min" class="headerlink" title="基本能力-阅读理解(10min)"></a>基本能力-阅读理解(10min)</h3><p>​材料特点:1000字以上的学术常温节选</p><p>​问题设计:2个问题(4+10&#x3D;14),(概括＋分析)</p><p>​考查重点:速读能力;信息筛选和组织能力</p><ol><li>如何快速阅读—-找核心语句<ul><li>段首或段尾</li><li>结论后———-“因此，所有，因而，可见，总之，总而言之，综上所述，概而言之等“</li><li>转折后———-”但是，可是，只是，不过，然而，却，其实，事实上，实际上等”</li><li>递进后———-“而且，并且，并，也，还，甚至，更等”</li><li>例子前后——-“例子本身可以略读，例子前后一定有核心语句,如，例如，正如，XX说，《》”</li></ul></li><li>如何理解材料<ol><li>结合上下文来理解——–“瞻前顾后”</li><li>把握作者态度倾向———“赞同还是批评”</li></ol></li><li>如何快速作答(踩点给分,多写错写不扣分)<ol><li><strong>看</strong>问题,画出问题中的<strong>关键字</strong></li><li>浏览材料，在原文中<strong>找</strong>出包含问题关键词的<strong>段落</strong></li><li>精读重点锻落，分析包含问题关键词的句子及上下文，画出<strong>答案素材</strong></li><li>将原文中画出的句子进行提炼概括，转换说法或重组语言等，组织成<strong>答案</strong></li></ol></li></ol><h3 id="基本能力-写作能力-60min"><a href="#基本能力-写作能力-60min" class="headerlink" title="基本能力-写作能力(60min)"></a>基本能力-写作能力(60min)</h3><p><strong>命题方式</strong>: 材料作文</p><p>写一篇<code>论说文</code>,<code>不少于</code>1000字</p><p>论说文三要素:</p><p>​1.论点(需要证明什么)：总论点(中心论点)，分论点。</p><p>​2.论据(用什么来证明)：事实依据，理论论据。</p><p>​3.论证(怎样来证明)：揭示除<strong>论点</strong>和<strong>论据</strong>之间的内在逻辑关系。</p><p><strong>评分标准</strong>:</p><ol><li>不跑题,切合题意，中心突出</li><li>有套路，结构严谨，层次分明</li><li>无病句，语言流畅，表达得体</li><li>字好看，字迹工整，卷面整洁</li></ol><p><strong>写作技巧：</strong></p><ol><li><p>审题立意(抓住材料中心思想)</p><ol><li><p>关键词分析法(针对<code>简单观点</code>类的材料)</p><p>具体步骤:抓关键词—解释关键词—确定立意</p></li><li><p>明辨关系法(针对<code>复杂观点</code>类的材料)</p><p>具体步骤:找出一组关键词—理清关键词之间的逻辑关系—确定立意。</p></li><li><p>明确褒贬法(针对<code>社会现象</code>类材料)</p><p>具体步骤:判断褒贬倾向—找准切入点—确定立意(好,坏,辨证)。</p></li><li><p>主体分析法(针对<code>故事</code>类材料)</p><p>具体步骤:抓主体—找做法及结果—确定立意(启示&#x2F;道理)</p></li></ol></li><li><p>拟写标题</p><ol><li><p>标题的基本要求</p><p>文题相符</p><p>清晰简洁</p></li><li><p>拟写标题的方法</p><p>常规方法</p><p>​论点型标题——中心论点</p><p>​概念型标题——关键词+前后缀(谈,论,浅谈;的力量,的重要性)</p><p>​问题型标题——信仰教育过时了吗？</p><p>优化方法</p><p>​引用法(论点升级)——名言警句，成语典故，古诗文，歌曲名，影视名。</p><p>​比喻法(概念升级)——用本质不同又有相似点的甲事物来描述乙事物。</p><p>​对偶法——用结果基本相同，字数相等，意义上密切相连的两个短语，对称排列。</p><p>​<code>清清白白做人，堂堂正正为师</code>  <code>读智慧之书，做有用之人</code></p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/%E6%A0%87%E9%A2%98.png"></p></li><li><p>拟写标题的注意事项</p><ol><li><p>标题第一行居中(字数不宜过多);标题与正文之间不要空格</p></li><li><p>副标题:主标题第三个字下划破折号——写副标题(不是必须写)</p></li><li><p>标点符号</p><p>不加句号。</p><p>表示疑问或者感叹语气的，可以加问号或者感叹号。</p><p>标题中间可以加冒号，破折号等。</p><p>由两句话或两个短语构成的标题，可以用逗号，间隔号或者中间空一格。</p></li></ol></li></ol></li><li><p>开头写作(150字左右)</p><ol><li><p>基本要求</p><ol><li>形式要求——小巧玲珑(150左右,约6行)</li><li>内容要求——开门见山(铺垫+中心论点)</li></ol></li><li><p>开头技巧</p><p>概括式开头(概括材料+分析启示+提出论点)</p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/%E5%BC%80%E5%A4%B4%E5%86%99%E4%BD%9C01.png"></p><p>设问式开头(设置疑问\反问+回答+提出论点)</p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/image-20241113161959881.png"></p><p>排比式开头(排比句+过渡+提出论点)</p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/image-20241113162547438.png"></p><p>引言式开头(名人名言+过渡句+突出论点)</p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/image-20241113163515321.png"></p></li></ol></li><li><p>主体写作(中间每段8-10行，200-250字左右)</p><ol><li><p>主体写作基本要求</p><ol><li><p>充实饱满，言之有物 （要避免空洞，要有观点，有论证)</p></li><li><p>结构合理，有逻辑性   (五段三分式，辩证统一式)</p><p><strong>层层递进式</strong>：</p><ul><li>开头——引出总论点</li><li>是什么——阐述中心论点(特征；性质)</li><li>为什么——论证必要性(意义;影响)</li><li>怎么做——从哪些方面入手(方法;怎么做)</li><li>结尾——总结全文</li></ul><p><strong>五段三分式:</strong></p><ul><li>开头——引出总论点</li><li>分论点1&#x2F;是什么&#x2F;为什么&#x2F;怎么办</li><li>分论点2&#x2F;是什么&#x2F;为什么&#x2F;怎么办</li><li>分论点3&#x2F;是什么&#x2F;为什么&#x2F;怎么办</li><li>结尾——总结全文</li></ul><p><strong>正反深联式主体结构：</strong>(一件事)</p><ul><li>开头</li><li>正面论述——积极</li><li>反面论述——消极</li><li>深入分析+联系实际(原因+实际)</li><li>结尾</li></ul><p><strong>辩证统一式主体结构：</strong>(两件事)</p><ul><li>开头——点题</li><li>A的积极意义</li><li>B的积极意义</li><li>A+B的积极意义</li><li>结尾</li></ul></li><li><p>论证充分，举例恰当 （文章主体既要“摆事实”又要“讲道理”）</p><p>论据从哪来？</p><p>事实论据：</p><p>​人物事迹</p><p>​成语典故</p><p>​热点事件</p><p>道理论据：</p><p>​名人名言</p><p>​教育理论</p><p>详细分析论证：</p><p>简例排比论证：</p><p>正反对比论证：</p><p>​分论点+道理论证+事实论证+小结</p></li></ol><p>主体：</p><p>​分论点+事实论证+启示</p></li></ol></li><li><p>结尾写作(150字左右)</p></li></ol><p>​归纳全文(特别适合五段三分式)</p><p>​照应标题或中心论点</p><p>​启迪或鼓舞</p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/image-20241114110545600.png"></p><p><img src="/../images/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81_%E7%A7%91%E7%9B%AE%E4%B8%80/image-20241114111958014.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;教师资格证-综合素质科目一&lt;/center&gt;</summary>
    
    
    
    <category term="教资" scheme="https://readmengk90.github.io/categories/%E6%95%99%E8%B5%84/"/>
    
    
    <category term="教资" scheme="https://readmengk90.github.io/tags/%E6%95%99%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>SQL从入门到实战</title>
    <link href="https://readmengk90.github.io/2024/11/11/SQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>https://readmengk90.github.io/2024/11/11/SQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</id>
    <published>2024-11-11T02:21:53.794Z</published>
    <updated>2024-11-11T10:29:17.425Z</updated>
    
    <content type="html"><![CDATA[<p><strong>不要混日子，小心让日子把你给混了</strong></p><p>数据库组织数据存储是按照<code>库-&gt;表-&gt;数据</code>这三个层级</p><p>数据库和<code>SQL</code>的关系：</p><ul><li><p>数据库是用来存储数据的，在这个过程中，会涉及到</p><ul><li><p>数据的新增</p></li><li><p>数据的删除</p></li><li><p>数据的修改</p></li><li><p>数据的查询</p></li><li><p>数据库，数据表的管理</p><p>而<code>SQL</code>语言，就是一种对数据库，数据进行操作，管理，查询的工具。</p></li></ul></li></ul><p>使用数据库软件去获得<code>库-&gt;表-&gt;数据</code>，这种数据组织，存储的能力。</p><p>并借助<code>SQL</code>语言，完成对数据的增删改查等操作。</p><p>SQL语法特征:</p><p>​SQL大小写不敏感</p><p>​SQL可以单行或多行书写，最后以<code>;</code>号结束</p><p>​SQL支持注释:</p><p>​单行注释: – 注释内容(–后面一定要有一个空格)</p><p>​单行注释: # 注释内容(# 后面可以不加空格)</p><h3 id="DDL-数据定义-库的创建删除，表的创建删除"><a href="#DDL-数据定义-库的创建删除，表的创建删除" class="headerlink" title="DDL:数据定义(库的创建删除，表的创建删除)"></a>DDL:数据定义(库的创建删除，表的创建删除)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 针对库的操作</span><br><span class="line">-- 查看数据库</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 使用数据库</span><br><span class="line">USE 数据库名称;</span><br><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE 数据库名称 [CHARSET UTF8];</span><br><span class="line">-- 删除数据库</span><br><span class="line">DROP DATABASE 数据库名称;</span><br><span class="line">-- 查看当前使用的数据库</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">-- -----------------------------------------</span><br><span class="line">-- 针对表的管理</span><br><span class="line">-- 需要先选择数据库</span><br><span class="line">-- 查看有那些表</span><br><span class="line">SHOW TABLES;</span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE 表名称;</span><br><span class="line">DROP TABLE IF EXISTS 表名称;</span><br><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE 表名称(</span><br><span class="line">    列名称 列类型,</span><br><span class="line">    列名称 列类型,</span><br><span class="line">    ..........</span><br><span class="line">);</span><br><span class="line">-- 列类型有</span><br><span class="line">int -- 整数</span><br><span class="line">float-- 浮点数</span><br><span class="line">varchar(长度)-- 文本,长度为文字，做最大长度限制</span><br><span class="line">date-- 日期类型</span><br><span class="line">timetamp-- 时间戳类型</span><br></pre></td></tr></table></figure><h3 id="DML-数据操纵-新增数据，删除数据，修改数据"><a href="#DML-数据操纵-新增数据，删除数据，修改数据" class="headerlink" title="DML:数据操纵(新增数据，删除数据，修改数据)"></a>DML:数据操纵(新增数据，删除数据，修改数据)</h3><p>SQL只支持<code>单引号</code>对字符串</p><p>INSERT数据插入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表[(列1,列2,列3....,列N)] VALUES(值1,值2,..,值N)[,(值1,值2,..,值N),(值1,值2,..,值N)] -- []表示可选</span><br></pre></td></tr></table></figure><p>DELETE数据删除:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名称 [WHERE 条件判断]</span><br><span class="line">-- 条件判断: 列 操作符 值</span><br><span class="line">-- 操作符:=,&gt;, &lt;,&lt;=,&gt;=,!=等等</span><br></pre></td></tr></table></figure><p>UPDATE数据更新:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 列=值 [WHERE 条件判断];</span><br><span class="line">-- 条件判断: 列 操作符 值</span><br><span class="line">-- 操作符:=,&gt;, &lt;,&lt;=,&gt;=,!=等等</span><br></pre></td></tr></table></figure><h3 id="DCL-数据控制-新增用户-删除用户-密码修改-权限管理"><a href="#DCL-数据控制-新增用户-删除用户-密码修改-权限管理" class="headerlink" title="DCL:数据控制(新增用户,删除用户,密码修改,权限管理)"></a>DCL:数据控制(新增用户,删除用户,密码修改,权限管理)</h3><h3 id="DQL-数据查询-基于需求查询和计算数据"><a href="#DQL-数据查询-基于需求查询和计算数据" class="headerlink" title="DQL:数据查询(基于需求查询和计算数据)"></a>DQL:数据查询(基于需求查询和计算数据)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表|* FROM 表 -- 从(FROM)表中，选择(SELECT)某些列进行展示</span><br><span class="line">SELECT 字段列表|* FROM 表 WHERE 条件判断 </span><br></pre></td></tr></table></figure><p>分组聚合:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段(与后面列有关)|聚合函数 FROM 表 [WHERE 条件] GROUP BY 列</span><br><span class="line">-- 聚合函数有：</span><br><span class="line">-- SUM(列) 求和</span><br><span class="line">-- AVG(列) 求平均值</span><br><span class="line">-- MIN(列) 求最小值</span><br><span class="line">-- MAX(列) 求最大值</span><br><span class="line">-- COUNT(列|*) 求数量</span><br></pre></td></tr></table></figure><p>GROUP BY 中出现了那个列，那个列才能出现在SELECT中的非聚合中。</p><p>排序分页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 结果排序</span><br><span class="line">SELECT 列|聚合函数|* FROM 表</span><br><span class="line">WHERE ...</span><br><span class="line">GROUP BY ...</span><br><span class="line">ORDER BY ...[ASC | DESC]  -- ASC升 DESC降</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 结果分页限制</span><br><span class="line">-- 可以使用LIMIT关键字，对查询结果进行数量限制或分页显示</span><br><span class="line">SELECT 列|聚合函数|* FROM 表</span><br><span class="line">WHERE ...</span><br><span class="line">GROUP BY ...</span><br><span class="line">ORDER BY ... [ASC|DESC]</span><br><span class="line">LIMIT n[,m] -- n,m 跳过n条取m条</span><br><span class="line">-- 讲究顺序的</span><br></pre></td></tr></table></figure><p>Python创建到MySQL的数据库链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql <span class="comment"># 按照pymysql库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection <span class="comment"># 获取到MySQL数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">        host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 打印MySQL数据库软件信息</span></span><br><span class="line">    <span class="built_in">print</span>(conn.get_server_info())</span><br><span class="line">    <span class="comment"># 执行非查询性质的SQL语句--------------------</span></span><br><span class="line">    cursor=conn.cursor() <span class="comment"># 获取到游标对象</span></span><br><span class="line">    conn.select_db(<span class="string">&quot;test&quot;</span>) <span class="comment"># 选择数据库</span></span><br><span class="line">    cursor.execute(<span class="string">&quot;create table test_pymysql(id int);&quot;</span>) <span class="comment"># 执行sql</span></span><br><span class="line">    <span class="comment"># 执行查询性质的SQL语句----------------------</span></span><br><span class="line">    cursor=conn.cursor() <span class="comment"># 获取到游标对象</span></span><br><span class="line">    conn.select_db(<span class="string">&quot;test&quot;</span>) <span class="comment"># 选择数据库</span></span><br><span class="line">    cursor.execute(<span class="string">&quot;select * from student&quot;</span>) <span class="comment"># 执行sql</span></span><br><span class="line">    <span class="comment"># 获取查询结果</span></span><br><span class="line">    results:<span class="built_in">tuple</span>=cursor.fetchall()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="comment"># 关闭到数据库的链接</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p>Python执行SQL语句<code>插入</code>数据到MySQL</p><p><img src="/../images/SQL%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E7%A1%AE%E8%AE%A4%E6%9B%B4%E6%94%B9.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conn.commit</span><br><span class="line"><span class="comment"># 如果不想手动commit确认，可以在构建链接对象的时候，设置自动commit的属性</span></span><br><span class="line">conn = Connection(</span><br><span class="line">        host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    autocommit=<span class="literal">True</span> <span class="comment"># 设置自动提交</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;SQL从入门到实战&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python高阶加强</title>
    <link href="https://readmengk90.github.io/2024/11/10/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/"/>
    <id>https://readmengk90.github.io/2024/11/10/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/</id>
    <published>2024-11-10T06:57:36.776Z</published>
    <updated>2024-11-11T02:21:29.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-初识对象"><a href="#1-初识对象" class="headerlink" title="1.初识对象"></a>1.初识对象</h3><p>​希望数据的组织可以达到简洁统一。</p><table><thead><tr><th align="center">生活中</th><th align="center">程序中</th></tr></thead><tbody><tr><td align="center">设计表格</td><td align="center">设计类</td></tr><tr><td align="center">打印生产表格</td><td align="center">创建对象</td></tr><tr><td align="center">填写表格</td><td align="center">对象属性赋值</td></tr></tbody></table><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%B1%BB.png"></p><h3 id="2-成员方法"><a href="#2-成员方法" class="headerlink" title="2.成员方法"></a>2.成员方法</h3><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%B1%BB2.png"></p><p>​定义在类内部的函数称之为方法</p><p>在类中定义成员方法和定义函数基本一致，但仍有细微区别:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">方法体</span>(<span class="params">self,形参<span class="number">1</span>,.....,形参N</span>):</span><br><span class="line">    方法体</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以看到，在方法定义的参数列表中，有一个:self关键字</span></span><br><span class="line"><span class="string">self关键字是成员方法定义的时候，必须填写的。</span></span><br><span class="line"><span class="string">它用来表示类对象自身的意思。</span></span><br><span class="line"><span class="string">当我们使用类对象调用方法时，self会自动被python传入,不用传入。</span></span><br><span class="line"><span class="string">在方法内部，想要方法类的成员变量，必须使用self</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-类和对象"><a href="#3-类和对象" class="headerlink" title="3.类和对象"></a>3.类和对象</h3><p>使用程序中的类，可以完美的描述现实世界的事物(属性+行为)。</p><p>为什么非要创建对象才能使用呢?</p><p>​类只是一种程序内的”设计图纸”，需要基于图纸生产实体(对象),才能正常工作。</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%AF%B9%E8%B1%A1.png"></p><p><strong>面向对象的编程思想: 设计类，基于类创建对象，由对象做具体的工作。</strong></p><h3 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h3><p>Python类可以使用: <strong>init</strong>()方法，称之为构造方法</p><p>可以实现：在创建类对象(构造类)的时候，会自动执行。</p><p>​   在创建类对象(构造类)的时候，将传入参数自动传递给__init__方法使用。</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.png"></p><p>不省略的话，构造方法就说赋值。</p><p>省略的话，构造方法就说先声明并且赋值。</p><h3 id="5-其他内置方法-魔术方法"><a href="#5-其他内置方法-魔术方法" class="headerlink" title="5.其他内置方法(魔术方法)"></a>5.其他内置方法(魔术方法)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__str__ 字符串方法</span><br></pre></td></tr></table></figure><p>​用于定义对象的<strong>字符串表示</strong>，即当你使用 <code>print()</code> 函数或者将对象转换为字符串时，Python 会调用该方法来生成对象的字符串形式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__str__的作用:</span><br><span class="line">1.自定义对象的字符串表示：当你打印对象时，Python 默认会输出对象的内存地址（例如 &lt;__main__.MyClass object at 0x7f9b1c3a1a30&gt;），这对于大多数对象来说并不是很有意义。通过实现 __str__方法，你可以提供一个更具可读性、具有描述性的字符串。</span><br><span class="line"></span><br><span class="line">2.与 print()函数结合使用：print()函数会自动调用对象的__str__方法来获取对象的字符串表示，然后将其输出到控制台。</span><br><span class="line"></span><br><span class="line">3.用于str()函数：除了print()外，str()函数也会调用对象的__str__方法。例如，如果你使用 str(obj)，Python 会返回你在__str__中定义的字符串。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 定义自定义的字符串表示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Person(name=<span class="subst">&#123;self.name&#125;</span>, age=<span class="subst">&#123;self.age&#125;</span>)&quot;</span></span><br><span class="line"><span class="comment"># 创建一个 Person 对象</span></span><br><span class="line">person = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># 打印对象，调用 __str__ 方法</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出：Person(name=Alice, age=30)</span></span><br><span class="line"><span class="comment"># 使用 str() 函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(person))  <span class="comment"># 输出：Person(name=Alice, age=30)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__lt__ 小于符合比较方法</span><br></pre></td></tr></table></figure><p>​<code>__lt__</code> 方法使得对象能够与其他对象进行小于比较（即 <code>&lt;</code> 运算符）。你可以在自定义类中实现这个方法，来自定义两个对象的比较规则。比如，在比较两个对象时，你可以根据对象的某些属性来决定它们的大小关系**(不使用该方法直接对两个类对象比较是不可以的)**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line"><span class="comment"># 返回一个布尔值：True 或 False</span></span><br></pre></td></tr></table></figure><ul><li><code>self</code> 是当前对象（左侧的对象），</li><li><code>other</code> 是要比较的另一个对象（右侧的对象）。</li><li>如果当前对象小于另一个对象，则返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&lt;other.age</span><br><span class="line">stu1=Student(<span class="string">&quot;A&quot;</span>,<span class="number">11</span>)</span><br><span class="line">stu2=Student(<span class="string">&quot;B&quot;</span>,<span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1&lt;stu2) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(stu1&gt;stu2) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__le__ 小于等于比较符合方法</span><br></pre></td></tr></table></figure><p>魔术方法：<code>__le__</code>可用于：&lt;&#x3D;,&gt;&#x3D;两种比较运算符上，逻辑上和lt一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__eq__ 相等比较运算符实现方法</span><br></pre></td></tr></table></figure><p>不使用<code>__eq__</code>这个方法进行比较，不会报错就相当于直接比较内存地址(False)</p><p>面向对象编程是基于模板(类)去创建实体(对象)，使用对象完成功能开发。面向对象包含3大主要特性：分别是封装,继承和多态。</p><h3 id="6-封装-思想"><a href="#6-封装-思想" class="headerlink" title="6.封装(思想)"></a>6.封装(思想)</h3><p>面向对象是将现实世界事物的属性和行为描述为程序世界的类的成员变量和成员方法。</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%B0%81%E8%A3%85.png"></p><p>现实世界中的事物有不公开的属性和行为，作为现实事物在程序中映射的类，也应该支持对私有不公开的属性和行为进行描述。</p><p>类中提供了私有成员的形式来支持</p><p>​私有成员变量：变量名以<code>__</code>开头(两个下划线)</p><p>​私有成员方法：方法名以<code>__</code>开头(两个下划线)</p><p>即可完成私有成员的设置</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%A7%81%E6%9C%89.png"></p><p><strong>私有成员不能被类对象直接使用，但是可以被类中的其他成员去使用。</strong></p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%A7%81%E6%9C%89png.png"></p><p>私有成员的意义:在类中提供仅供内部使用的属性和方法，而不对外开放(类对象无法使用)。</p><h3 id="7-继承"><a href="#7-继承" class="headerlink" title="7.继承"></a>7.继承</h3><p>单继承：</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%BB%A7%E6%89%BF.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名(父类名):</span><br><span class="line"></span><br><span class="line">​类内容体</span><br></pre></td></tr></table></figure><p>多继承</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%A4%9A%E7%BB%A7%E6%89%BF.png"></p><p>输出父类同名的成员属性时，谁先来的谁优先(继承)。</p><p>pass关键字它用于占位，表示“什么也不做”。通常，它用于需要语法上有内容但不希望执行任何操作的场景。</p><p><strong>继承-复写</strong></p><p>复写:子类继承父类的成员属性和成员方法后，如果对其不满意，那么可以进行复写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    IMEI=<span class="literal">None</span>   <span class="comment"># 序列号</span></span><br><span class="line">    producer = <span class="string">&quot;ITCAST&quot;</span> <span class="comment"># 厂商</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;父类的5g通话&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPhone</span>(<span class="title class_ inherited__">Phone</span>):</span><br><span class="line">    producer=<span class="string">&quot;ITHEIMA&quot;</span>   <span class="comment"># 复写父类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>): <span class="comment"># 复写父类方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子类的5g同话&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>继承-调用父类的同名成员</strong></p><p>一旦复写父类成员，那么类对象调用成员的时候，就会调用复写后的新成员，如果需要使用被复写的父类的成员，需要特殊的调用方式:</p><table><thead><tr><th align="center">方式一</th><th align="center">方式二</th></tr></thead><tbody><tr><td align="center">调用父类成员</td><td align="center">使用super()调用父类成员</td></tr><tr><td align="center">使用成员变量：父类名.成员变量</td><td align="center">使用成员变量：super().成员变量</td></tr><tr><td align="center">使用成员方法：父类名.成员方法(self)</td><td align="center">使用成员方法：super().成员方法()</td></tr></tbody></table><p>注意:只可以在子类内部调用父类的同名成员，子类的实体类对象调用默认是调用有子类复写的。</p><h3 id="8-类型注解"><a href="#8-类型注解" class="headerlink" title="8.类型注解"></a>8.类型注解</h3><p>为什么内置模块的方法可以提示类型，而我们自己定义的就不行呢。其实是因为Pycharm无法通过代码确认应传入什么类型。</p><p>类型注解：引入类型注解以方便静态检查工具，IDE等三方工具。类型注解是在代码中涉及数据交互的地方，提供数据类型的注解(显示的方式)。</p><p>类型注解只是提示性的，并非决定性的，数据类型和注解类型无法对应也不会导致错误。</p><p>主要功能:</p><p>​帮助第三方IDE工具(如pycharm)对代码进行类型推断，协助做代码提示</p><p>​帮助开发者自身对变量进行类型注释</p><p>支持：</p><p>​变量的类型注解</p><p>​函数(方法)形参列表和返回值的类型注解</p><p><strong>变量的类型注解：</strong></p><p>​<img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.png"></p><p>​注意:</p><ul><li><p>元组类型设置类型详细注解，需要将每一个元素都标记出来(详细）</p></li><li><p>字典类型设置类型详细注解，需要2个类型，第一个是key第二个是value(详细)</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%AE%B9%E5%99%A8%E6%B3%A8%E8%A7%A3.png"></p></li></ul><p>​<strong>通过注释进行类型注解</strong></p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E6%B3%A8%E9%87%8A%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.png"></p><p><strong>函数(方法)形参列表和返回值的类型注解：</strong></p><p>形参类型注解</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%BD%A2%E5%8F%82%E6%B3%A8%E8%A7%A3.png"></p><p>函数和方法的形参类型注解语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参名:类型,形参名:类型,.........</span>):</span><br><span class="line">passde</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x:<span class="built_in">int</span>,y:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><p>返回值类型注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数方法名</span>(<span class="params">形参名:类型,形参名:类型,.........</span>)-&gt;返回值类型:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Union类型：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;itheima&quot;</span>]</span><br><span class="line">my_dict=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;周杰伦&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;</span><br><span class="line"><span class="comment"># 混合类型的类型注解如何描述</span></span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/Union.png"></p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/Union02.png"></p><h3 id="9-多态"><a href="#9-多态" class="headerlink" title="9.多态"></a>9.多态</h3><p>多态:指的是多种状态，即完成某个行为时，使用不同的对象会得到不同的状态</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E5%A4%9A%E6%80%81.png"></p><p>父类做定义声明，子类做实际工作，用来获得同一行为，不同状态。</p><p>多态-应用场景二:</p><p>​<img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E6%8A%BD%E8%B1%A1%E7%B1%BB.png"></p><p>抽象类(接口)就好比定义一个标准</p><p><img src="/../images/Python%E9%AB%98%E9%98%B6%E5%8A%A0%E5%BC%BA/%E6%8E%A5%E5%8F%A3.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;高阶加强&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础综合案例</title>
    <link href="https://readmengk90.github.io/2024/11/09/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    <id>https://readmengk90.github.io/2024/11/09/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/</id>
    <published>2024-11-09T00:55:46.156Z</published>
    <updated>2024-11-10T06:56:54.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON数据格式"><a href="#JSON数据格式" class="headerlink" title="JSON数据格式:"></a>JSON数据格式:</h3><p>​JSON是一种轻量级的数据交互格式。可以按照JSON指定的格式去组织和封装数据。</p><p>​JSON本质上是一个带有特定格式的字符串</p><p>​主要功能: json就是一种在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互。类似于:国际通用语言-英语，中国官方语言-普通话</p><p>​<img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/Json.png"></p><p>JSON数据的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># json数据的格式可以是(json是Python的列表(内嵌字典的列表)或者字典)</span></span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125; <span class="comment">#</span></span><br><span class="line"><span class="comment"># 也可以是</span></span><br><span class="line">[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;root&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">16</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;]</span><br></pre></td></tr></table></figure><p>Python数据和Json数据的相互转换:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入json模块</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#准备符合json格式要求的Python数据</span></span><br><span class="line">data = [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;]</span><br><span class="line"><span class="comment">#通过json.dunps(data)方法把python数据转化为了json字符串数据</span></span><br><span class="line">data = json.dumps(data)</span><br><span class="line"><span class="comment"># data = json.dumps(data,ensure_ascii=False),解决中文乱码的问题 </span></span><br><span class="line"><span class="comment">#通过json.loads(data)方法把json数据转化为了python字符串数据</span></span><br><span class="line">data = <span class="string">&#x27;[&#123;&quot;name&quot;:&quot;admin&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:20&#125;]&#x27;</span></span><br><span class="line">data = json.loads(data)</span><br></pre></td></tr></table></figure><h3 id="pyecharts模块"><a href="#pyecharts模块" class="headerlink" title="pyecharts模块"></a>pyecharts模块</h3><p>pyecharts是帮助我们做出数据可视化效果图的一个模块。它的本体是echarts框架。</p><p>Echarts是由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可，而Python是门富有表达能力的语言，很适合用于数据处理，当数据分析遇上数据可视化时pycharts诞生了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中文文档:pyecharts.org</span><br><span class="line">画廊官网:https://gallery.pyecharts.org/#/README</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pip install pyecharts</span><br><span class="line"># 检查安装效果</span><br><span class="line"># 进入Python导入模块</span><br><span class="line">&gt;&gt;&gt; python</span><br><span class="line">&gt;&gt;&gt; import pyecharts</span><br></pre></td></tr></table></figure><h3 id="pyecharts入门使用"><a href="#pyecharts入门使用" class="headerlink" title="pyecharts入门使用"></a>pyecharts入门使用</h3><p>pycharts有那些配置选项:</p><p>​全局配置选项:针对整个图像进行设置，图像的标题，图例，工具箱等</p><p>​全局配置可以通过一个set_global_opts方法进行配置，相应的选项和选项的功能如下:<img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE.png"></p><p>​<img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE01.png"></p><p>​系列配置选项:针对具体的轴数据进行配置</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>​通过json模块对数据进行处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在线json格式化分析:ab173.com</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建图表</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个折线图对象</span></span><br><span class="line">l=Line()</span><br><span class="line"><span class="comment"># 给折线图对象添加x轴的数据</span></span><br><span class="line">l.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;英国&quot;</span>])</span><br><span class="line"><span class="comment"># 给折线图对象添加y轴的数据</span></span><br><span class="line">l.add_yaxis(<span class="string">&quot;GDP&quot;</span>,[<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment"># 通过render方法，将代码生成为图像</span></span><br><span class="line">l.render()</span><br><span class="line"><span class="comment"># 设置全局配置项</span></span><br></pre></td></tr></table></figure><p>地图可视化</p><p>使用pyecharts构建基础的全国地图可视化图表。</p><p>基础柱状图开发</p><p><img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E6%9F%B1%E7%8A%B6%E5%9B%BE.png"></p><p><img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E6%9F%B1%E7%8A%B6%E5%9B%BE_%E6%97%B6%E9%97%B4%E7%BA%BF.png"></p><p>创建自动播放:</p><p><img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE.png"></p><p>修改柱状颜色</p><p><img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E9%A2%9C%E8%89%B2.png"></p><p>GDP动态柱状图绘制</p><p>1.掌握列表的sort方法并配合lambda匿名函数完成列表排序</p><p>​sort方法 : **列表.sort(key&#x3D;选择排序依据的函数,reverse&#x3D;True|False)**。</p><p>​参数key,是要求传入一个函数，表示将列表的每一个元素都传入函数中，返回排序的依据。</p><p>​参数reverse，是否反转排序结果，True表示降序，False表示升序。</p><p><img src="/../images/Python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/sort%E6%96%B9%E6%B3%95.png"></p><p>2.完成图表所需的数据处理</p><p>​</p><p>3.完成GDP动态图表绘制</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;基础综合案例&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>科研文献检索与论文写作</title>
    <link href="https://readmengk90.github.io/2024/11/01/%E5%B7%A5%E5%85%B7_%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2/"/>
    <id>https://readmengk90.github.io/2024/11/01/%E5%B7%A5%E5%85%B7_%E7%A7%91%E7%A0%94%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2/</id>
    <published>2024-11-01T10:37:07.761Z</published>
    <updated>2024-11-01T11:42:18.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中文标点符号的规范使用"><a href="#中文标点符号的规范使用" class="headerlink" title="中文标点符号的规范使用"></a>中文标点符号的规范使用</h2><p><strong>句号的错误用法：</strong></p><p><strong>顿号的错误用法：</strong></p><p><strong>冒号的错误用法：</strong></p><p>(1)冒号与“即”“也就是”一类的词语同时使用。</p><p><em>错误示例1</em>：血液中的白细胞有5种：<strong>即</strong>淋巴细胞、嗜碱粒细胞、中性粒细胞、单核细胞和嗜酸细胞。</p><p>正确的用法1：血液中的白细胞有5种：淋巴细胞、嗜碱粒细胞、中性粒细胞、单核细胞和嗜酸细胞。</p><p>正确的用法2：血液中的白细胞有5种，淋巴细胞、嗜碱粒细胞、中性粒细胞、单核细胞和嗜酸细胞。</p><p>(2)冒号误用在不需要停顿的地方。</p><p><em>错误示例2</em>：这台高效液相色谱仪的配置主要包括：一个四元泵、一个自动进样器<br>两个检测器。</p><p>正确用法：这台高效液相色谱仪的配置主要包括一个四元泵、一个自动进样器<br>两个检测器。</p><p>(3)在冒号之后再次用冒号。为了避免结构混乱，造成歧义令人难以解读，一<br>般不使用双重冒号或者多重冒号</p><p><em>错误示例3</em>：X射线检查：I型：共5例；II型：共1例。</p><p>正确用法：X射线检查：I型，共5例；II型，共1例。</p><p>4)注意区分冒号“:”和数学符号的比号”:”要正确使用，不能相混用。</p><p><strong>引号的错误用法：</strong></p><p>(1)引号缺失或滥用。</p><p>错用示例1:《食品安全法》之新不在于条目“更新”，而在于内容的“变化”。</p><p>正确示例:《食品安全法》之新不在于条目更新，而在于内容的变化。</p><p>(2)引号末尾标点使用不当</p><p>错用示例2:《GB&#x2F;T 15834-2011标点符号用法》规定:“当引号中还需要使用引号时，外面一层用双引号，里面一层用单引号”。<br>正确用法:《GB&#x2F;T 15834-2011标点符号用法》规定:“当引号中还需要使用引号时，外面一层用双引号，里面一层用单引号。”</p><h2 id="英文标点符号的使用"><a href="#英文标点符号的使用" class="headerlink" title="英文标点符号的使用"></a>英文标点符号的使用</h2><p>中英文标点符号的使用区别主要表现在以下几个方面，</p><p>1.中英文在表示句意结束时所用符号不同。</p><p>2.英文标点符号中无顿号，表示词语、阿拉伯数字、百分号等并列时均使用逗号</p><p>3.英文标点符号中无中文书名号。</p><p>4.英文标点符号中也有分号，但在现代英语中的使用极少</p><p>5.中英文中的省略号写法有所不同</p><p>6.英文标点符号中的破折号与中文不同。</p><h2 id="数字形式的规范使用"><a href="#数字形式的规范使用" class="headerlink" title="数字形式的规范使用"></a>数字形式的规范使用</h2><p>2)数字的书写形式<br><strong>在表示数值范围时</strong>，前后两个数值的附加符号或计量单位相同时，<strong>在不造成歧义的情况下</strong>，前一个数值的附加符号或计量单位可省略，否则不可省略</p><p>正确书写：12<del>35°C、50</del>60 mg</p><p>正确书写: 大概400</p><p>错误书写：12<del>35万、50</del>60亿</p><p><strong>数值相乘时</strong>，附带长度单位的数值相乘，当表示面积和体积时，长度单位符不得省略，否则容易被误认为是长度的倍数。<br><strong>一组计量单位相同的数值并列书写时</strong>，可以只在最末一个数值后写出单位</p><p><strong>参量与其公差的单位相同时</strong>，可以将两者放在括号内只写共同单位。</p><p>以下单位的书写形式正确的有()<br>A 7.9 km      B 2.45 mHz           C 6.8 us<br>D 2.8 Mw     E 3.5 KJ&#x2F;Kg             F 10.5 kmol&#x2F;mL</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;科研软件&lt;/center&gt;</summary>
    
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/categories/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/tags/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>决策树算法</title>
    <link href="https://readmengk90.github.io/2024/11/01/%E7%AE%97%E6%B3%95_%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <id>https://readmengk90.github.io/2024/11/01/%E7%AE%97%E6%B3%95_%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95/</id>
    <published>2024-11-01T00:17:40.972Z</published>
    <updated>2024-11-10T01:41:20.305Z</updated>
    
    
    <summary type="html">&lt;center&gt;决策树算法&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>边界抽取算法</title>
    <link href="https://readmengk90.github.io/2024/10/31/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/"/>
    <id>https://readmengk90.github.io/2024/10/31/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/</id>
    <published>2024-10-31T08:04:05.038Z</published>
    <updated>2024-11-10T01:40:56.631Z</updated>
    
    <content type="html"><![CDATA[<p>边界和形状:彩色的像素图通过数字图像处理的方法的到二值图，通过边界抽取获得边界图.</p><p><img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/%E8%BE%B9%E7%95%8C%E4%B8%8E%E5%BD%A2%E7%8A%B6.png"></p><p>边界抽取:通过彩色空间或者阈值法的到一个二值图(分割)，分割图白色表示前景，黑色表示背景.</p><p>​         抽出边界的方法  β(A)&#x3D;A-(AΘβ)</p><p>​                                     <img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/%E5%88%86%E5%89%B2.png"><img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/%E6%8A%BD%E5%8F%96.png">    </p><p> 定义边界:获取另一种表示边界的形式(链码)而不是以像素图的形式,根据画出边界运笔的过程抽象出来点的顺序已经朝向</p><p><img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/%E9%93%BE%E7%A0%81%E5%9B%BE.png"></p><p>边界追踪:</p><p><img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/%E5%83%8F%E7%B4%A0%E5%9B%BE%E8%BE%B9%E7%95%8C%E5%88%B0%E6%9C%89%E5%BA%8F%E5%9B%BE%E5%BA%8F%E5%88%97.png"></p><p>​                                    像素图边界                                         有序图序列</p><p>Moore boundary tracing algorithm：</p><p>1.最左上角的点<strong>b0</strong>作为<strong>起始点</strong>，<strong>c0</strong>(背景点)是<strong>b0</strong>西边的邻居，检查 ( b0 ) 的 8 个邻居，从 ( c0 ) 开始，按<strong>顺时针方向</strong>进行。设 ( b1 ) 为遇到的第一个值为 1 的邻居，设 ( c1 ) 为在序列中紧接着 ( b1 ) 的（背景）点。将 ( b1 ) 的位置存储以供第 5 步使用。</p><p>2.设 ( b &#x3D; b_0 ) 和 ( c &#x3D; c_0 )。</p><p>3.找到背景点，将其作为起点，背景点之前的作为新的前景点。</p><p><img src="/../images/%E7%AE%97%E6%B3%95_%E8%BE%B9%E7%95%8C%E8%B7%9F%E8%B8%AA%E7%AE%97%E6%B3%95/Moore%E8%BE%B9%E7%95%8C%E8%BF%BD%E8%B8%AA-1730365572612-7.png"></p><p>算法实现：aa</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;边界抽取&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Python从入门到精通</title>
    <link href="https://readmengk90.github.io/2024/09/27/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>https://readmengk90.github.io/2024/09/27/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</id>
    <published>2024-09-27T06:44:45.830Z</published>
    <updated>2024-11-17T03:32:43.708Z</updated>
    
    <content type="html"><![CDATA[<p><strong>没有退路就是胜利之路</strong></p><h3 id="1-Python语言基础入门"><a href="#1-Python语言基础入门" class="headerlink" title="1.Python语言基础入门"></a>1.Python语言基础入门</h3><h4 id="下载安装Python解释器"><a href="#下载安装Python解释器" class="headerlink" title="下载安装Python解释器"></a>下载安装Python解释器</h4><p>下载安装：<a href="http://www.python.org/downloads">www.python.org/downloads</a></p><h4 id="安装和配置PyCharm软件"><a href="#安装和配置PyCharm软件" class="headerlink" title="安装和配置PyCharm软件"></a>安装和配置PyCharm软件</h4><p>修改软件颜色背景：File-Settings-Appearence&amp;behavior-appearence-theme(Intellig Light)</p><p>修改默认字体大小:File-Settings-Editor-font-选择字体和默认大小的设置。</p><p>通过设置快捷键设置字体大小：File-Settings-Keymap-Editor Actions-Increase Font Size(右键)&#x2F;decrease Font Size-Add Mouse Shortcut,按住ctrl+鼠标滚轮向上&#x2F;向下。</p><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>定义: 代码中被写下来的固定的值，称为字面量。<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/6%E7%A7%8D%E5%80%BC.png"></p><p>​字符串：是由任意数量的字符如中文，英文，各类符号，各自等组成。所以叫字符串。</p><p>​Python种，字符串需要用双引号””包围起来，被引号包围起来的，都是字符串。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>​1.注释的作用</p><p>​注释:是在程序代码种对程序代码进行解释说明的文字.</p><p>​作用:注释不是程序，不能被执行，只是对程序代码进行解释说明，让别人可以看懂程序代码的作用，能够大大增强程序的可读性。</p><p>​2.使用单行注释和多行注释</p><p>​单行注释:以#开头，#右边 的所以文字当作说明，而不是真正执行的程序，起辅助说明作用。注意，#号和注释内容一般建议以一个空格隔开。</p><p>​多行注释:以一对三个双引号引起来(“””注释内容”””)来解释说明一段代码的作用使用方法。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>​1.变量的作用和特征</p><p>​变量：在程序允许时，能存储计算结果或能表示值的抽象概念，简单的说，变量就是在程序运行时，记录数据用的。</p><p>​2.变量的定义方式</p><p>​格式： 变量名词 &#x3D; 变量的值</p><p>​        3.变量的特征</p><p>​变量的值是可以改变的</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>​1.掌握使用type()语句查看数据的类a型</p><p>​在print语句中，直接输出类型信息:print(type(被查看类型的数据))</p><p>​用变量存储type()的结果</p><p>​不仅可以使用自变量类型也可以查看变量中存储的数据类型</p><p>​2.理解变量无类型而数据有类型的概念</p><p>​在Python中变量是没有类型的，但变量存储的数据是有类型的。只表示变量存储了数据</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE.png"></p><h4 id="数据类型变换"><a href="#数据类型变换" class="headerlink" title="数据类型变换"></a>数据类型变换</h4><p>​1.如何在字符串，整数，浮点数之间进行相互转换</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2.png"></p><p>​2.了解转换的注意事项</p><p>​想要将字符串转换成数字，必须要求字符串内的内容都是数字。</p><p>​浮点数转整数时可能回丢失精度。</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>​1.什么是标识符</p><p>​变量&#x2F;方法&#x2F;类的名字等，拔它统一的称之为标识符，用来做内容的标识。所以，标识符是用户在编程的时候所使用的一系列名字，用于给变量，类，方法等命名。</p><p>​2.标识符的命名规则</p><p>​内容限定：命名只允许出现英文，中文，数字，下划线这四类元素，其他任何内容都不被允许</p><p>​    (不推荐使用中文，不能以数字开头)</p><p>​大小写敏感：</p><p>​不可使用关键字：</p><p>​3.掌握变量的命名规范：见名知意，下划线命名法(间隔)，全部小写。</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>​1.算术运算符<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.png"></p><p>​2.赋值运算符:&#x3D;,+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;,**&#x3D;,&#x2F;&#x2F;&#x3D;</p><h4 id="字符串拓展"><a href="#字符串拓展" class="headerlink" title="字符串拓展"></a>字符串拓展</h4><p>​字符串的三种定义方式</p><p>​1.单引号定义法</p><p>​2.双引号定义法</p><p>​3.三引号定义法：和多行注释的写法意义，同样支持换行操作。当使用变量接收它，它就算字符串，不使用变量接收它，就可以作为多行注释使用。</p><p>​引号的嵌套：</p><p>​1.可以使用: \来进行转义</p><p>​2.单引号内可以写双引号或双引号内可以写单引号</p><p>​字符串拼接</p><p>​1.如何拼接字符串</p><p>​一般用于字符串字面量和变量或变量和变量之间会使用拼接。+号拼接，而且无法和非字符串类型进行拼接。</p><p>​字符串格式化1</p><p>​拼接的缺点：1.变量太多，拼接起来实在是太麻烦了</p><p>​       2.字符串无法和数字或其他类型完成拼接</p><p>​格式化：%s，其中%表示我要占位，s表示将变量变成字符串放入占位的地方。</p><p>​多个变量占位，变量要用括号括起来，并按照占位的顺序填入。<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%8D%A0%E4%BD%8D.png"><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E4%BB%A3%E7%A0%81%E6%98%BE%E7%A4%BA.png"></p><p>​格式化的精度控制</p><p>​1.掌握格式化字符串的过程中做数字的精度控制</p><p>​  可以使用辅助符号”m.n”来控制数据的宽度和精度</p><p>​m,控制宽度，要求是数字(很少使用)，设置的宽度小于数字自身，不生效</p><p>​.n,控制小数点精度，要求是数字，会进行小数的四舍五入</p><p>​%5d:表示将整数的宽度控制在五位，前面补空格</p><p>​%5.2f:表示将宽度控制为5，将小数点精度设置为2</p><p>​字符串格式化方式2</p><p>​1.快速字符串格式化的方式</p><p>​语法：f”内容{变量}”的格式来快速格式化</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E4%BB%A3%E7%A0%81%E6%98%BE%E7%A4%BA2.png">不理会类型，不做精度控制，适合对精度没有要求的适合快速使用。</p><p>​对表达式进行格式化</p><p>​1.什么是表达式：一条具有明确执行结果的代码语句。</p><p>​2.对表达式进行字符串格式化</p><p>​  <img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;传智播客&quot;</span></span><br><span class="line">stock_price = <span class="number">19.99</span></span><br><span class="line">stock_code = 003032</span><br><span class="line">stock_price_daily_growth_factor = <span class="number">1.2</span></span><br><span class="line">growth_day = <span class="number">7</span></span><br><span class="line">printf(<span class="string">&quot;公司%s,股票代码%s,当前股价%.2f&quot;</span> % (name,stock_code,stock_price))</span><br><span class="line">printf(<span class="string">&quot;每日的增长系数是:%.2f,经过%d天的增长后,股价达到了%2f&quot;</span> % (stock_price_daily_growth_factor,growth_day,(<span class="number">19.99</span>*<span class="number">1.2</span>)))</span><br></pre></td></tr></table></figure><h4 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h4><p>​使用input()语句可以从键盘获取输入</p><p>​使用一个变量接收input语句获取的键盘输入数据</p><p>​要注意，无论键盘输入什么类型的数据，获取到的数据永远都是字符串类型，如需其他类型可以进行数据类型转换。</p><h3 id="Python判断语句的学习"><a href="#Python判断语句的学习" class="headerlink" title="Python判断语句的学习"></a>Python判断语句的学习</h3><p>​布尔类型和比较运算符</p><p>​布尔运算符:</p><p>​比较运算符：&#x3D;&#x3D;，!&#x3D;,&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,通过比较运算得到布尔类型的结果。</p><p>​if语句的基本格式</p><p>​if   要判断的条件:</p><p>​ 条件成立时，要做的事</p><p>​if语句的注意事项:</p><p>​判断条件的结果一定要是布尔类型</p><p>​不要忘记判断条件后的: 冒号</p><p>​归属于if语句的代码块，需在前方填充4个空格缩进</p><p>​if else 语句</p><p>​ if   要判断的条件:</p><p>​ 条件成立时，要做的事</p><p>​else:</p><p>​不满足条件时要做的事情</p><p>​if elif else语句</p><p>​ if   要判断的条件:</p><p>​ 条件成立时，要做的事</p><p>​ elif  条件2：</p><p>​  条件成立时，要做的事</p><p>​ elif  条件2：</p><p>​  条件成立时，要做的事</p><p>​   …………..</p><p>​else:</p><p>​不满足条件时要做的事情</p><p>​elif可以写多个。</p><p>​判断是互斥且有序的，上一个满足后面就不会判断了。</p><p>​可以在条件判断中，直接写input语句，节省代码量。</p><p>​判断语句的嵌套</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%B5%8C%E5%A5%97.png"></p><p>​实战案例</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>​while循环：</p><p>​while循环的基础语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件满足时，做的事情<span class="number">3</span></span><br><span class="line">    ........(省略)....</span><br><span class="line"><span class="comment"># 只要条件满足，会无限循环执行</span></span><br><span class="line"><span class="comment"># 条件需提供布尔类型结果，True继续，False停止</span></span><br><span class="line"><span class="comment"># 空格缩进不能忘</span></span><br><span class="line"><span class="comment"># 请规划好循环终止条件，否则将无限循环</span></span><br></pre></td></tr></table></figure><p>​while循环的嵌套应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件<span class="number">1</span>满足时，做的事情<span class="number">3</span></span><br><span class="line">    ........(省略)....</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>满足时，做的事情<span class="number">1</span></span><br><span class="line">    条件<span class="number">2</span>满足时，做的事情<span class="number">2</span></span><br><span class="line">    条件<span class="number">2</span>满足时，做的事情<span class="number">3</span></span><br><span class="line">    ........(省略)....</span><br><span class="line"><span class="comment"># 注意条件控制，避免出现无限循环(除非真的需要无限循环)</span></span><br></pre></td></tr></table></figure><p>​while循环的嵌套案例</p><p>​print( )输出不换行：print(“不换行”，end&#x3D;’ ‘)</p><p>​在字符串中，有一个特殊符号\t,效果如同在键盘按下:tab键</p><p>​打印九九乘法表</p><p>​for循环:</p><p>​for循环的基础语法</p><p>​基础语法： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集/序列类型:</span><br><span class="line">循环满足条件时执行的代码</span><br><span class="line">   <span class="comment"># 同while循环不同，for循环是无法定义循环条件的 ，只能从被处理的数据集中，依次取出内容进行处理。</span></span><br></pre></td></tr></table></figure><p>​range语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法<span class="number">1</span>：</span><br><span class="line"><span class="built_in">range</span>(num)</span><br><span class="line"><span class="comment"># 获取一个从0开始，到num结束的数字序列(不含num本身)</span></span><br><span class="line">语法<span class="number">2</span>：</span><br><span class="line"><span class="built_in">range</span>(num1,num2)</span><br><span class="line"><span class="comment"># 获得一个从num1开始，到num2结束的数字序列(不含num2本身)</span></span><br><span class="line">语法<span class="number">3</span>：</span><br><span class="line"><span class="built_in">range</span>(num1,num2,step)</span><br><span class="line"><span class="comment"># 获得一个从num1开始，到num2结束的数字序列(不含num2本身)，数字之间的步长，以step为准(step默认为1)</span></span><br></pre></td></tr></table></figure><p>​变量作用域</p><p>​如果在for循环外部访问临时变量:</p><p>​实际上是可以访问到的</p><p>​在编程规范上，是不允许，不建议这么做的(可以预先在循环外定义它)</p><p>​for循环的嵌套应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集(序列):</span><br><span class="line">    循环满足要做的事情<span class="number">1</span></span><br><span class="line">    循环满足要做的事情<span class="number">2</span></span><br><span class="line">    循环满足要做的事情N</span><br><span class="line">    <span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集(序列):</span><br><span class="line">        循环满足要做的事情<span class="number">1</span></span><br><span class="line">    循环满足要做的事情<span class="number">2</span></span><br><span class="line">    循环满足要做的事情N</span><br></pre></td></tr></table></figure><p>​循环控制: break和continue</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">特殊情况：暂时跳出某次循环，直接进行下一次/提前退出循环，不在继续</span><br><span class="line"></span><br><span class="line">​continue关键字用于:中断本次循环，直接进入下一次循环//临时中断，作用范围在所在循环无法对上层循环起作用。</span><br><span class="line"></span><br><span class="line">​continue可以用于：for循环和while循环，效果一致</span><br><span class="line"></span><br><span class="line">​break关键字用于：直接结束循环//永久中断，作用范围在所在循环，无法对上层起作用</span><br><span class="line"></span><br><span class="line">​break可以用于：for循环和while循环，效果一致</span><br></pre></td></tr></table></figure><h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><p>函数介绍</p><p>​函数：是组织好的，可重复使用的，用来实现特定功能的代码段。</p><p>​为什么使用函数：为了得到一个针对特定需求，可供重复利用的代码段，以提高程序的复用性，减少重复性代码，提高开发效率。</p><p>函数基础定义语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>)：</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>函数的参数</p><p>​传入参数的功能是:在函数进行计算的时候，接受外部(调用时)提供的数据。</p><p>函数的返回值</p><p>​什么是返回值:程序中函数完成事情后，最后给调用者的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>)：</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值 <span class="comment">#函数体在遇到return后就结束了</span></span><br><span class="line">变量 = 函数(参数)</span><br></pre></td></tr></table></figure><p>​         None类型：</p><p>​如果函数没有使用return语句返回数据，那么函数有返回值吗?  实际上是有的，Python中有一个特殊的字面量:None,其类型是:&lt;class ‘NoneType&gt; 无返回值的函数，实际上就算返回了:None这个字面量。</p><p>​None表示：空的，无实际意义的意思，函数返回了None，就表示这个函数没有返回什么有意义的内容，也就是返回了空的意思。</p><p>​None类型的应用场景：</p><p>​1.用在函数无返回值</p><p>​2.用在if判断上</p><p>​在if判断中，None等同于False,一般用于在函数中主动返回None，配合if判断做相关处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_age</span>(<span class="params">age</span>)</span><br><span class="line"><span class="keyword">if</span> age&gt;<span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCESS&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">result = check_age(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">    <span class="comment">#进入if表示result是None，也就是False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年，不可进入&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​3.用在声明无内容的变量上</p><p>​定义变量，但暂时不需要变量有具体值，可以用None来代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="literal">None</span></span><br></pre></td></tr></table></figure><p>函数的说明文档</p><p>​通过注释对函数进行解释说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数说明</span></span><br><span class="line"><span class="string">:param x:形参x的说明</span></span><br><span class="line"><span class="string">:return 返回值</span></span><br><span class="line"><span class="string">函数体</span></span><br><span class="line"><span class="string">return 返回值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 调用时悬停可以出现说明文档</span></span><br></pre></td></tr></table></figure><p>函数的嵌套调用</p><p>​所谓函数嵌套调用指的是一个函数里面又调用了另一个函数。</p><p>​如果函数A中，调用了另一个函数B，那么先把函数B中得任务都执行完毕之后才会回到上次函数A执行的位置。</p><p>变量在函数的作用域</p><p>​局部变量:定义在函数体内部的变量，即只在函数体内部生效。</p><p>​全局变量:指的是在函数体内外都能生效的变量</p><p>​在函数体内改全局变量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global关键字</span></span><br><span class="line">num=<span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test_a:<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_b</span>():</span><br><span class="line">    num=<span class="number">500</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test_b:&quot;</span>&#123;num&#125;)</span><br><span class="line">test_a()  <span class="comment">#200</span></span><br><span class="line">test_b()  <span class="comment">#500</span></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#200</span></span><br><span class="line"><span class="comment">#-----------------------------------</span></span><br><span class="line">num=<span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test_a:<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_b</span>():</span><br><span class="line">    <span class="keyword">global</span> num=<span class="number">500</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;test_b:&quot;</span>&#123;num&#125;)</span><br><span class="line">test_a()  <span class="comment">#200</span></span><br><span class="line">test_b()  <span class="comment">#500</span></span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#500</span></span><br></pre></td></tr></table></figure><p>综合案例</p><h3 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h3><p>​目的是批量存储或者批量使用多份数据。</p><p>​数据容器:一种可以容纳多份数据的数据类型，容纳的每一份数据称之为1个元素，每一个元素，可以是任意类型的数据，如字符串，数字，布尔等。</p><p>​数据容器根据特点的不同，如:</p><p>​   是否支持重复元素</p><p>​   是否可以修改</p><p>​   是否有序，等</p><p>​   分为5类，分别是:列表(list),元组(tuple),字符串(str),集合(set),字典(dict)</p><h5 id="数据容器-list列表"><a href="#数据容器-list列表" class="headerlink" title="数据容器:list列表"></a>数据容器:list列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.基本语法</span></span><br><span class="line"><span class="comment">#字面量</span></span><br><span class="line">[元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span>，元素<span class="number">4</span>，...]</span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>,元素<span class="number">2</span>，元素<span class="number">3</span>，元素<span class="number">4</span>，....]</span><br><span class="line"><span class="comment">#定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br><span class="line"><span class="comment"># 列表内的每一个数据，称之为元素，以[]作为标识，列表内每一个元素之间用，逗号隔开</span></span><br><span class="line"><span class="comment"># 列表可以一次存储多个数据，且可以为不同的数据类型，支持嵌套[[1,2,3],666,&#x27;itheima&#x27;]。</span></span><br></pre></td></tr></table></figure><p>​2.使用列表的下标索引从列表中取出元素</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/list.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: 列表[下标索引]</span></span><br><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">0</span>]) <span class="comment">#结果:Tom</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">1</span>]) <span class="comment">#结果:Lily</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>]) <span class="comment">#结果:Rose</span></span><br></pre></td></tr></table></figure><p>反向索引：</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/list02.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 语法: 列表[下标索引]</span></span><br><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">1</span>]) <span class="comment">#结果:Rose</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">2</span>]) <span class="comment">#结果:Lily</span></span><br><span class="line"><span class="built_in">print</span>(name_list[-<span class="number">3</span>]) <span class="comment">#结果:Tom</span></span><br></pre></td></tr></table></figure><p>嵌套索引的下标：</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/list03.png"></p><h5 id="要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。"><a href="#要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。" class="headerlink" title="# 要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。"></a># 要注意下标索引的取值范围，超出范围无法取出元素，并且会报错。</h5><p>​3.列表的常用操作:</p><p>​在Python中，如果将函数定义为class(类)的成员，那么函数会称之为:方法</p><p>​        # 方法和函数功能一样，有传入参数，有返回值，只是方法的使用格式不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数的使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">num = add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#方法的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">student = Student()</span><br><span class="line">num = student.add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>​<strong>3.1 查询某元素下标的功能</strong> : 列表.index(元素)</p><p>​功能:查找指定元素在列表的下标，如果找不到，报错ValueError</p><p>​index就是列表对象(变量)内置的方法(函数)</p><p>​<strong>3.2 修改特定下标的元素值:</strong> 列表[下标]&#x3D;值</p><p>​可以使用如上语法，直接对指定下标(正向，反向下标均可)的值进行:重新赋值(修改)</p><p>​<strong>3.3 插入元素</strong>  ：列表.insert(下标，元素)，在指定的下标位置，插入指定的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.insert(<span class="number">1</span>,<span class="string">&quot;itheima&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment">#结果: [1,&quot;itheima&quot;,2,3]</span></span><br></pre></td></tr></table></figure><p>​<strong>3.4 追加元素:</strong> 列表.append(),将指定元素，追加到列表的尾部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加单个元素</span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment">#结果: [1,2,3]</span></span><br><span class="line">my_list.append(<span class="string">&quot;itheima&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment">#结果: [1,2,3,&quot;itheima&quot;]</span></span><br><span class="line"><span class="comment"># 追加一批元素 </span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.extend([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list)  <span class="comment"># 结果：[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>​<strong>3.5 删除元素，清空列表</strong>：del 列表[下标] &#x2F; 列表.pop(下标)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;itheima&quot;</span>,<span class="string">&quot;python&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> mylist[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(mylist)<span class="comment"># &#x27;itcast&#x27;,&#x27;itheima&#x27;,</span></span><br><span class="line"><span class="comment"># --------------------------------------------</span></span><br><span class="line">element=mylist.pop[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;my_list&#125;</span>,取出的元素是<span class="subst">&#123;element&#125;</span>&quot;</span>) <span class="comment"># &#x27;itcast&#x27;</span></span><br></pre></td></tr></table></figure><p>​<strong>3.6 指定元素内容删除</strong>： 列表.remove(元素)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.remove(<span class="number">2</span>) <span class="comment"># 从前到后去搜索这个元素，找到的第一个被删除。</span></span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment">#结果[1,3,2,3]</span></span><br></pre></td></tr></table></figure><p>​<strong>3.7 清空列表:</strong> 列表.clear( )</p><p>​**3.8 统计某元素在列表内的数量: ** 列表.count(元素)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list.count(<span class="number">1</span>)) <span class="comment">#结果3</span></span><br></pre></td></tr></table></figure><p>​<strong>3.9 统计类别中全部元素的数量:</strong> len(列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">列表的特点：</span><br><span class="line"></span><br><span class="line">​可以容纳多个元素</span><br><span class="line"></span><br><span class="line">​可以容纳不同类型的元素</span><br><span class="line"></span><br><span class="line">​数据是有序存储的</span><br><span class="line"></span><br><span class="line">​允许重复数据存在</span><br><span class="line"></span><br><span class="line">​可以修改</span><br></pre></td></tr></table></figure><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/list%E8%A1%A8%E6%A0%BC.png"></p><h5 id="list列表的遍历"><a href="#list列表的遍历" class="headerlink" title="list列表的遍历"></a>list列表的遍历</h5><p>​掌握while循环遍历列表</p><p>​while循环可以自定循环条件，并自行控制。</p><p>​while循环可以通过控制条件控制做到无限循环。</p><p>​while循环适用于任何想要循环的场景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 下标索引变量&lt;列表的元素数量：</span><br><span class="line">下标索引变量+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>​掌握for循环遍历列表</p><p>​for循环不可以自定循环条件，只可以一个个从容器内取出数据。</p><p>​for循环理论上不可以无限循环，因为被遍历的容器容量不是无限的。</p><p>​for循环适用于，遍历数据容器的场景或简单的固定次数循环场景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 数据容器:</span><br><span class="line">对临时变量进行处理</span><br></pre></td></tr></table></figure><h5 id="数据容器-tuple-元组"><a href="#数据容器-tuple-元组" class="headerlink" title="数据容器:tuple(元组)"></a>数据容器:tuple(元组)</h5><p>​列表是可以修改的，不适用于不被篡改的信息。</p><p>​元组同列表一样，都是可以封装多个，不同类型的元素在内</p><p>​格式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组字面量</span></span><br><span class="line">(元素，元素，元素)</span><br><span class="line"><span class="comment"># 定义元组变量</span></span><br><span class="line">变量名称=(元素，元素，元素)</span><br><span class="line"><span class="comment"># 定义空元组</span></span><br><span class="line">变量名称 = () <span class="comment">#方式1</span></span><br><span class="line">变量名称 = <span class="built_in">tuple</span>() <span class="comment">#方式2</span></span><br><span class="line"><span class="comment"># !!!注意!!!：定义的元组只有一个数据，这个数据后面要添加逗号</span></span><br><span class="line">t1 = (<span class="string">&#x27;Hello&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>​特点:</p><p>​元组也支持嵌套</p><p>​操作:</p><p>​<strong>1.下标索引取出元组内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t5=((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">t5[<span class="number">1</span>][<span class="number">2</span>] <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>​<strong>2.index查找方法：元组.index(元素)</strong></p><p>​<strong>3.count统计方法:   元组.count(元素)</strong></p><p>​<strong>4.len函数统计元组元素数量: len(元组)</strong></p><p>​元组的遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> 下标索引变量index&lt;元组的元素数量：</span><br><span class="line">元组[index]</span><br><span class="line">下标索引变量+=<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> 元组:</span><br><span class="line">       <span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><p><em>特列：元组内嵌套的列表是可以修改的。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info=(<span class="string">&#x27;周杰伦&#x27;</span>,<span class="number">11</span>,[<span class="string">&#x27;football&#x27;</span>,<span class="string">&#x27;music&#x27;</span>])</span><br><span class="line"><span class="comment"># 查询其年龄所在的下标位置</span></span><br><span class="line">index=info.index(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;11岁所在的下标位置是:<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 查询学生的姓名</span></span><br><span class="line">name=info[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学生的姓名是:<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 删除学生爱好中的football</span></span><br><span class="line">info[<span class="number">2</span>].pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"><span class="comment"># 增加爱好：coding到爱好内</span></span><br><span class="line">info[<span class="number">2</span>].append(<span class="string">&#x27;coding&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h5 id="数据容器-str-字符串"><a href="#数据容器-str-字符串" class="headerlink" title="数据容器:str(字符串)"></a>数据容器:str(字符串)</h5><p>​字符串是字符的容器，一个字符串可以存放任意数量的字符。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%AD%97%E7%AC%A6%E4%B8%B2.png"></p><p>​和其他容器一样如 : 列表，元组一样，字符串也可以通过下标进行访问。</p><p>​从前向后，下标从0开始；从后向前，下标从-1开始。</p><p>​同元组一样，字符串是一个无法修改的数据容器。</p><p>​字符串常用操作：</p><p>​1.查找特定字符串的下标索引值</p><p>​   语法: 字符串.index(字符串)</p><p>​2.字符串替换</p><p>​   语法:字符串.replace(字符串1，字符串2)：将字符串内的全部字符串1替换为字符串2</p><p>​   注意：不是修改字符串本身，而是得到了一个新字符串。</p><p>​3.字符串的分割</p><p>​    语法：字符串.split(分隔符字符串)：按照指定的分隔符字符串，将字符串划分为多个字符串，并存入<strong>列表对象</strong>中。</p><p>​     注意:  字符串本身不变，而是得到了一个<strong>列表对象</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hello python itheima itcast&quot;</span></span><br><span class="line">[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;itheima&quot;</span>,<span class="string">&quot;itcast&quot;</span>]</span><br></pre></td></tr></table></figure><p>​4.字符串的规整操作(去除前后空格以及回车换行符)</p><p>​语法: 字符串.strip()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;   itheima and itheima  &quot;</span></span><br><span class="line">new_my_str=my_str_strip()<span class="comment">#不传入参数，去除首尾空格</span></span><br></pre></td></tr></table></figure><p>​    字符串的规整操作(去除前后指定字符串)</p><p>​语法：字符串.strip(字符串)</p><p>​     注意:是按照单个字符串移除的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;   12itheima and itheima21  &quot;</span></span><br><span class="line">new_my_str=my_str_strip(‘<span class="number">12</span>’)<span class="comment">#不传入参数，去除首位空格</span></span><br></pre></td></tr></table></figure><p>​5.统计字符串中某字符串出现的次数：count( )</p><p>​6.统计字符串的长度，len( )</p><p>​7.字符串遍历</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%AD%97%E7%AC%A6%E4%B8%B202.png"></p><h5 id="数据容器-序列-的切片"><a href="#数据容器-序列-的切片" class="headerlink" title="数据容器(序列)的切片:"></a>数据容器(序列)的切片:</h5><p>​序列:内容连续，有序，可使用下标索引的一类数据容器；列表，元组，字符串，均可以视为序列。</p><p>​序列操作-切片:从一个序列中，去除一个子序列</p><p>​切片的语法：序列[起始下:结束下标:步长]</p><p>​起始下标表示从何处开始，可以留空，留空视作从头开始</p><p>​结束下标表示何处结束，可以留空，留空视作截取到结尾</p><p>​步长表示，依次取元素的间隔(1:表示一个个取元素，2:跳过1个元素取，步长为负数表示反向去，起始下标和结束下标也要反向标记)</p><p>​注意：此操作不会影响序列本身，而是会得到一个新的序列。</p><p>​包头不包尾</p><h5 id="数据容器-set-集合"><a href="#数据容器-set-集合" class="headerlink" title="数据容器:set(集合)"></a>数据容器:set(集合)</h5><p>​如果场景需要对内容做去重处理，列表，元组，字符串就不方便了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本语法:</span></span><br><span class="line"><span class="comment"># 定义集合字面量</span></span><br><span class="line">&#123;元素,元素,......,元素&#125;</span><br><span class="line"><span class="comment"># 定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素,元素,......,元素&#125;</span><br><span class="line"><span class="comment"># 定义空集合</span></span><br><span class="line">变量名称 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>集合的常用操作-修改：</p><p>​首先，因为集合是无序的，所以集合不支持：下标索引访问，但是集合和列表一样，是允许修改的。</p><p>​1.添加新元素：**集合.add(元素)**。将指定元素，添加到集合内。结果集合被修改，添加了新元素。</p><p>​2.移除元素：**集合.remove(元素)**。将指定元素，从集合内移除，结果集合本身被修改，移除了元素。</p><p>​3.从集合中随机取出元素:<strong>集合.pop()</strong>,功能是从集合中<strong>随机取出</strong>一个元素，结果会得到一个元素的结果。同时集合本身被修改，元素被移除。</p><p>​4.清空集合：<strong>集合.clear()</strong>,直接清空集合。</p><p>​5.取两个集合的差集：**集合1.difference(集合2)**，功能是取出集合1和集合2的差集(集合1有而集合2没有)，结果得到一个新集合，集合1和集合2不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; </span><br><span class="line">set2=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">set3=set1.difference(set2)</span><br><span class="line"><span class="built_in">print</span>(set3) <span class="comment">#&#123;2,3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1)<span class="comment">#&#123;1,2,3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment">#&#123;1,5,6&#125;</span></span><br></pre></td></tr></table></figure><p>​6.消除两集合的差集：**集合1.difference_update(集合2)**，对比集合1和集合2，在集合1内，删除和集合2相同的元素，结果集合1被修改，集合2不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; </span><br><span class="line">set2=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">set1.difference_update(set2)</span><br><span class="line"><span class="built_in">print</span>(set1)<span class="comment">#&#123;2,3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment">#&#123;1,5,6&#125;</span></span><br></pre></td></tr></table></figure><p>​7.两个集合合并成一个:**集合1.union(集合2)**，将集合1和集合2组合成新集合，结果得到新集合，集合1和集合2不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; </span><br><span class="line">set2=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">set3=set1.union(set2)</span><br><span class="line"><span class="built_in">print</span>(set3) <span class="comment">#&#123;1,2,3,5,6&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1)<span class="comment">#&#123;1,2,3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set2) <span class="comment">#&#123;1,5,6&#125;</span></span><br></pre></td></tr></table></figure><p>​8.统计集合元素数量：len(集合)</p><p>​9.集合的遍历：不支持下标索引，不能适用while循环，可以使用for循环。</p><h5 id="数据容器-dict-字典-映射"><a href="#数据容器-dict-字典-映射" class="headerlink" title="数据容器:dict(字典,映射)"></a>数据容器:dict(字典,映射)</h5><p>​通过key去找到对应的value(例如通过学生姓名检索学生的成绩)</p><p>​字典的定义，同样使用{},不过存储的元素是一个个的:键值对，如下语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义字典字面量</span></span><br><span class="line">&#123;key:value,key:value,.......,key:value&#125;</span><br><span class="line"><span class="comment"># 定义字典变量</span></span><br><span class="line">my_dict=&#123;key:value,key:value,.......,key:value&#125;</span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line">my_dict=&#123;&#125;</span><br><span class="line">mydict = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><p>​定义重复key的字典(<strong>错×</strong>，后者覆盖前者)。</p><p>​字典数据的获取：**字典.[“key”],**字典同集合一样，不可以使用下标索引，字典可以通过Key值来取得对应的Value.</p><p>​字典的嵌套：字典的Key和Value可以说任意类型(Key不可为字典)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stu_score=&#123;</span><br><span class="line">    <span class="string">&quot;王力宏&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">77</span>,</span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">66</span>,</span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">33</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;周杰伦&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">88</span>,</span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">86</span>,</span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">55</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;林俊杰&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">99</span>,</span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">96</span>,</span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">66</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如何从嵌套的字典中获取数据</span></span><br><span class="line">stu_score[<span class="string">&quot;周杰伦&quot;</span>][<span class="string">&quot;语文&quot;</span>]   <span class="comment">#77</span></span><br></pre></td></tr></table></figure><p>​字典的常用操作:</p><p>​新增元素: <strong>字典[Key]&#x3D;Value</strong>,结果:(Key不存在)字典被修改，新增了元素。</p><p>​更新元素:  <strong>字典[Key]&#x3D;Value</strong>,结果:(Key不存在)字典被修改，元素被更新。注意！！,字典Key不可以重复，所以对已存在的Key执行上述操作，就是更新Value值。</p><p>​删除元素:  <strong>字典.pop(Key)</strong>,结果获得指定Key的Value，同时字典被修改，指定Key的数据被删除。</p><p>​清空字典:  <strong>字典.clear()</strong>,结果:字典被修改，元素被清空。</p><p>​获得全部的Key: <strong>字典.keys()</strong>,结果:得到字典中的全部Key。</p><p>​遍历字典: 方式一:**for key in keys:**通过找到全部的Key完成遍历</p><p>​ 方式二:for key in  my_dict:直接对字典进行for循环</p><p>​统计字典内的全部元素:<strong>num&#x3D;len(my_dict)</strong></p><p>​字典的特点:</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%AD%97%E5%85%B801.png"></p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%88%86%E7%B1%BB.png"></p><h5 id="数据容器的通用操作"><a href="#数据容器的通用操作" class="headerlink" title="数据容器的通用操作"></a>数据容器的通用操作</h5><p>​遍历：5类数据容器都支持for循环遍历，列表，元组，字符串支持while循环，集合，字典不支持(无法下标索引)。</p><p>​统计容器的元素个数:len(容器)</p><p>​统计容器的最大元素:max(容器)</p><p>​统计容器的最小元素:min(容器)</p><p>​<strong>类型转换</strong>:</p><p>​    容器转列表:list(容器)</p><p>​    容器转元组:tuple(容器)</p><p>​    容器转字符串:str(容器)</p><p>​    容器转集合:set(容器)</p><p>​容器的通用排序功能:</p><p>​<strong>sorted(容器,[reverse&#x3D;True]&#x2F;降序)</strong>,将给定容器进行排序,排序后的结果变成列表对象,字典会丢失Value。</p><h3 id="Python函数进阶："><a href="#Python函数进阶：" class="headerlink" title="Python函数进阶："></a><strong>Python函数进阶：</strong></h3><h5 id="函数的多返回值"><a href="#函数的多返回值" class="headerlink" title="函数的多返回值:"></a>函数的多返回值:</h5><p>​如果一个函数要有多个返回值，该如何书写代码?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_return</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">x,y=test_return()  <span class="comment">#按照返回值的顺序,写出对应的多个变量接收即可，变量之间用逗号隔开，支持不然类型的数据return。</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#结果1</span></span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment">#结果2</span></span><br></pre></td></tr></table></figure><h5 id="函数的多种传参方式"><a href="#函数的多种传参方式" class="headerlink" title="函数的多种传参方式:"></a>函数的多种传参方式:</h5><p> <strong>位置参数</strong>:调用函数时根据函数定义的参数位置来传递参数。传递的参数和定义的参数的顺序及个数必须一致。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0.png"></p><p><strong>关键字参数</strong>:函数调用时通过”键&#x3D;值”形式传递参数.可以让函数更加清晰，容易使用，同时也清楚了参数的顺序需求。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%85%B3%E9%94%AE%E5%AD%97%E4%BC%A0%E5%8F%82-1730965598043-5.png"></p><p>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</p><p><strong>缺省参数</strong>:缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认函数的值(注意:所有位置参数必须出现在默认参数前，包括函数定义和调用)</p><p>​作用:当调用函数时没有传递参数，就会使用默认使用缺省参数对应的值。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0-1730966201270-8.png"></p><p>**不定长参数:**也叫可变参数，用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。</p><p>​作用：当调用函数时不确定参数个数时，可以使用不定长参数。</p><p>​类型：</p><p>​1.位置传递不定长</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E4%BD%8D%E7%BD%AE%E4%BC%A0%E9%80%92.png"></p><p>​注意:传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组，args是元组类型。</p><p>​2.关键字传递不定长</p><p>​<img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%85%B3%E9%94%AE%E5%AD%97%E4%BC%A0%E9%80%92.png"></p><p>​注意：参数是”键&#x3D;值”形式的情况下，所有的”键&#x3D;值“，都会被kwargs接受，同时会根据:”键&#x3D;值”组成字典。</p><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数:"></a>匿名函数:</h5><p>函数接受数据{数字,字符串,字典，列表，元组等}和函数本身作为参数传入另一个函数内。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%87%BD%E6%95%B0.png"></p><p><strong>数据确定后传入函数作为参数，就算代码执行逻辑得传入。</strong></p><p>lambda匿名函数：</p><p>​函数的定义中</p><p>​def关键字，可以定义带有名称的函数，可以基于名称重复使用。</p><p>​lambda关键字，可以定义匿名函数(无名称)，<strong>只可以临时使用一次</strong>。</p><p>​语法:   <strong>lambda  传入参数: 函数体(一行代码)</strong></p><p>​  lambda是关键字，表示定义匿名函数。</p><p>​  传入参数表示匿名函数的<strong>形式参数</strong>，如：x,y表示接收2个形式参数</p><p>​  函数体，就是函数的<strong>执行逻辑</strong>，要注意:只能写一行，无法写多行代码。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/lambda.png"></p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h5 id="文件的编码："><a href="#文件的编码：" class="headerlink" title="文件的编码："></a>文件的编码：</h5><p>​   编码就是一种规则集合，记录了内容和二进制间进行相互转换的逻辑。编码有许多种，我们常用的是UTF-8编码。</p><p>​   计算机只认识0，1，所以需要将内容翻译成0和1才能保存在计算机中。同时也需要编码，将计算机保存的0和1，反向翻译会可以识别的内容。</p><h5 id="文件的读取："><a href="#文件的读取：" class="headerlink" title="文件的读取："></a>文件的读取：</h5><p>​ 1.打开文件:<strong>open(name,mode,encoding)</strong>,可以打开一个已经存在的文件，或者创建一个新文件。</p><p>​       name:是要打开的目标文件名的字符串(可以包含文件所在的具体路径).</p><p>​       mode:设置打开文件的模式(访问模式):只读r，写入w，追加a等.</p><p>​       encoding：编码格式(推荐使用UTF-8).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;路径/python.txt&#x27;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="comment">#encoding的顺序不是第三位，所以不能用位置参数，用关键字参数直接指定。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> mode三种基础访问模式:</span><br><span class="line"></span><br><span class="line">​r：以只读方式打开文件，文件的指针将会放在文件的开头，这是默认模式。</span><br><span class="line"></span><br><span class="line">​w:打开一个文件只用于写入，如果该文件已存在则打开文件，并从头开始编辑，原有内容会被删除，如果该文件不存在，创建新文件。</span><br><span class="line"></span><br><span class="line">​a:打开一个文件用于追加。如果该文件已存在，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span><br></pre></td></tr></table></figure><p>​2.读写文件：</p><p>​read()方法：<strong>文件对象.read(num)</strong>,num表示要从文件中读取的数据的长度(单位是字节)，如果没有传入num，那么就表示读取文件中所有的数据。</p><p>​readlines()方法：readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个<strong>列表</strong>，其中每一行的数据为一个元素。</p><p>​readline()方法:一次读取一行内容。</p><p>​                        <strong>！！！注意 如果在程序中多次调用read，下一个read会在上一个read的结尾处接着读取。</strong></p><p>​for循环读取文件行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment"># 每一个line临时变量，就记录了文件的一行数据。</span></span><br></pre></td></tr></table></figure><p>​3. 关闭文件：<strong>文件对象.close( )</strong></p><p>​关闭文件对象，也就是关闭对文件的占用，如果不调用close，同时程序没有停止运行，那么这个文件将一直被Python程序占用。</p><p>​4.with open语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="keyword">as</span> 文件对象:</span><br><span class="line">    f.readlines()</span><br><span class="line"><span class="comment"># 通过在with open语句块中对文件进行操作</span></span><br><span class="line"><span class="comment"># 可以在操作完成后自动关闭close文件，避免遗忘掉close方法。</span></span><br></pre></td></tr></table></figure><h5 id="文件的写入：f-write-‘hello-world’，“w”"><a href="#文件的写入：f-write-‘hello-world’，“w”" class="headerlink" title="文件的写入：f.write(‘hello world’，“w”)"></a>文件的写入：f.write(‘hello world’，“w”)</h5><p>​       <strong>内容刷新:</strong>  <strong>f.flish()</strong>   # close方法内置了flush功能的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.打开文件，通过a模式打开即可</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="comment"># 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;heool&quot;</span>)</span><br><span class="line"><span class="comment"># 3.内容刷新</span></span><br><span class="line">f.flush</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意:</span><br><span class="line">​直接调用write，内容并未真正写入文件，而是会积攒在程序内存中，称之为缓冲区。</span><br><span class="line"></span><br><span class="line">​当调用flush的时候，内容会真正写入文件。</span><br><span class="line"></span><br><span class="line">​这样做是避免频繁的操作硬盘，导致效率下降。</span><br></pre></td></tr></table></figure><h5 id="文件的追加："><a href="#文件的追加：" class="headerlink" title="文件的追加："></a>文件的追加：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.打开文件，通过a模式打开即可</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&quot;heool&quot;</span>)</span><br><span class="line"><span class="comment"># 3.内容刷新</span></span><br><span class="line">f.flush</span><br></pre></td></tr></table></figure><h5 id="文件操作的综合案例："><a href="#文件操作的综合案例：" class="headerlink" title="文件操作的综合案例："></a>文件操作的综合案例：</h5><h3 id="Python异常-模块-包"><a href="#Python异常-模块-包" class="headerlink" title="Python异常,模块,包"></a>Python异常,模块,包</h3><p>​了解异常:程序出现问题</p><p>​异常的捕获方法：</p><p>​在力所能及的范围内，对可能出现的bug,进行提前准备，提前处理。</p><p>​作用:提前假设某处会出现异常，做好提前准备，当真的出现异常的时候，可以有后续手段。</p><p>​语法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">      可能发生错误的代码</span><br><span class="line">      <span class="keyword">except</span>:</span><br><span class="line">          如果出现异常执行的代码</span><br><span class="line">      <span class="comment">#例子:尝试以&#x27;r&#x27;模式打开文件，如果文件不存在，则以&#x27;w&#x27;方式打开</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          f=<span class="built_in">open</span>(<span class="string">&quot;linux.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span>:</span><br><span class="line">          f=<span class="built_in">open</span>(<span class="string">&quot;linux.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​捕获指定异常：&#x2F;&#x2F;异常的类型有多种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.捕获指定异常</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">except</span> NameError <span class="keyword">as</span> e://e：异常的类型</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;出现了变量未定义的异常&quot;</span>)</span><br><span class="line">      <span class="comment"># 2.捕获多个异常,可以把要捕获的异常类型的名字，放在except后，并使用元组的方式进行书写。</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">      <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">except</span> (NameError,ZeroDivisionError) <span class="keyword">as</span> e://e：异常的类型</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;出现了变量未定义的异常或者除0异常&quot;</span>)</span><br><span class="line">      <span class="comment"># 3.捕获所有异常</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">      <span class="built_in">print</span>(name)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e://e：异常的类型</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;出现异常&quot;</span>)</span><br></pre></td></tr></table></figure><p>​ 异常else：&#x2F;&#x2F;else表示的是如果没有异常要执行的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     <span class="built_in">print</span>(name)</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e: //e：异常的类型</span><br><span class="line">     <span class="built_in">print</span>(e)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;我是else，是没有异常的时候执行的代码&quot;</span>)</span><br></pre></td></tr></table></figure><p>​ 异常的finally：&#x2F;&#x2F;finally表示的是无论是否异常都要执行的代码，例如关闭文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">      f.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e: //e：异常的类型</span><br><span class="line">      f.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;我是else，是没有异常的时候执行的代码&quot;</span>)</span><br><span class="line">      <span class="keyword">finally</span>:</span><br><span class="line">          f.close()</span><br></pre></td></tr></table></figure><p>​   异常的传递</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%BC%82%E5%B8%B8%E4%BC%A0%E9%80%92%E6%80%A7.png"></p><p>​Python模块</p><p>​Python模块是一个Python代码文件，以.py结尾。模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><p>​作用:python中有很多各种不同的模块，每一个模块都可以帮助我们快速的实现一些<strong>功能</strong>，比如实现和时间相关的功能就可以使用time模块，我们可以认为<strong>一个模块就是一个工具包</strong>，每一个工具包中都有各种不同的工具供我们使用进而实现各种不同的功能。</p><p>​简而言之，模块就是一个Python文件，里面有类，函数，变量等，我们可以拿过来用。</p><p>​模块的导入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">from</span> 模块名] <span class="keyword">import</span> [模块|类|变量|函数|*] [<span class="keyword">as</span> 别名]  <span class="comment">#[]表示可选</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">常用的组合形式如:</span></span><br><span class="line"><span class="string">1.import 模块名</span></span><br><span class="line"><span class="string">    # 基本语法:---------------------</span></span><br><span class="line"><span class="string">import 模块名  //time</span></span><br><span class="line"><span class="string">import 模块名1，模块名2</span></span><br><span class="line"><span class="string">模块名.功能名() //time.sleep(5) </span></span><br><span class="line"><span class="string">    # -----------------------------</span></span><br><span class="line"><span class="string">2.from 模块名 import 类，变量，方法等</span></span><br><span class="line"><span class="string"># 基本语法:---------------------</span></span><br><span class="line"><span class="string">from time import sleep </span></span><br><span class="line"><span class="string">    print(&quot;开始&quot;)</span></span><br><span class="line"><span class="string">sleep(5)</span></span><br><span class="line"><span class="string">    print(&quot;结束&quot;)</span></span><br><span class="line"><span class="string">    # -----------------------------</span></span><br><span class="line"><span class="string">3.from 模块名 import *    # *表示全部的意识</span></span><br><span class="line"><span class="string"># 基本语法:---------------------</span></span><br><span class="line"><span class="string">from time import *</span></span><br><span class="line"><span class="string">    print(&quot;开始&quot;)</span></span><br><span class="line"><span class="string">sleep(5)</span></span><br><span class="line"><span class="string">    print(&quot;结束&quot;)</span></span><br><span class="line"><span class="string">    # -----------------------------</span></span><br><span class="line"><span class="string">4.import 模块名 as 别名</span></span><br><span class="line"><span class="string">5.from 模块名 import 功能名 as 别名</span></span><br><span class="line"><span class="string"># 基本语法:---------------------</span></span><br><span class="line"><span class="string">import time as t </span></span><br><span class="line"><span class="string">    print(&quot;开始&quot;)</span></span><br><span class="line"><span class="string">t.sleep(5)</span></span><br><span class="line"><span class="string">    print(&quot;结束&quot;)</span></span><br><span class="line"><span class="string">    # -----------------------------</span></span><br><span class="line"><span class="string">    # 基本语法:---------------------</span></span><br><span class="line"><span class="string">from time import sleep as sl </span></span><br><span class="line"><span class="string">    print(&quot;开始&quot;)</span></span><br><span class="line"><span class="string">sl(5)</span></span><br><span class="line"><span class="string">    print(&quot;结束&quot;)</span></span><br><span class="line"><span class="string">    # -----------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>​自定义模块:</p><p>​新建一个Python文件，命名为AA.py,并定义函数。</p><p>​当导入多个模块的时候，且模块内有同名功能，调用到的是后面导入的模块的功能(前面的被覆盖)</p><p>​_ _ <em>main</em> _ _:变量</p><p>​右键运行可以执行，import导入不能执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _ _name_ _ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 既满足了</span></span><br></pre></td></tr></table></figure><p>​_ _ _all _ <em>变量:如果一个模块文件中有</em> _ _all _ _变量，**当使用’from xxx import ***’,只能导入这个列表中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_module1.py</span><br><span class="line">_ _ <span class="built_in">all</span> _ _=[<span class="string">&#x27;test_A&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testA&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testB&#x27;</span>)</span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line">test_my_module1.py</span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> *  <span class="comment"># *来自all</span></span><br><span class="line">test_A()  <span class="comment">#这里只能使用test_A函数</span></span><br></pre></td></tr></table></figure><p>​Python包</p><p>​如果Python的模块太多了就可能造成一定的混乱，这就引出了模块如何管理的问题。</p><p>​从物理上来看，包就是一个文件夹，在该文件夹下包含了一个  —init—.py  文件，该文件夹可用于包含多个模块文件。</p><p>​从逻辑上看，包的本质依然是模块。</p><p>​包的作用:当我们的模块文件越来越多时，包可以帮助我们管理这些模块，包的作用就是包含多个模块，但包的本质依然是模块。</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%8C%85.png"></p><p>​包含___init___ .py(内容可以不写)文件就说包，不含就是文件夹。</p><p>​创建包的步骤：</p><p>​1.新键包’my_package’</p><p>​2.新建包内模块:’my_moducle’和’my_module2’</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%8C%852.png"></p><p>​导入包：</p><p>​ 方式1：import 包名.模块名   (导入)     包名.模块名.目标    (使用)</p><p>​方式2：from 包名 import 模块名 (导入)       模块名.目标   (使用)</p><p>​      from 包名.模块名 import 目标    目标</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E5%AF%BC%E5%85%A5%E5%8C%85.png"></p><pre><code>     安装第三方Python包</code></pre><p>​一个包就是一堆同类型功能的集合体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在Python程序的生态中，有许多非常多的第三方包，可以极大帮助我们提高开发效率</span><br><span class="line"></span><br><span class="line">​numpy包：科学计算中常用的</span><br><span class="line"></span><br><span class="line">​pandas包：数据分析中常用的</span><br><span class="line"></span><br><span class="line">​pyspark,apache-flink包：大数据计算中常用的</span><br><span class="line"></span><br><span class="line">​matplotlib,pyecharts:图形可视化常用的</span><br><span class="line"></span><br><span class="line">​tensorflow:人工智能常用的</span><br></pre></td></tr></table></figure><p>​安装第三方包：pip</p><p>​第一种安装:</p><p>第三方包的安装非常简单，我们只需要使用Python内置的pip程序即可</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/pip.png"></p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E4%B8%89%E6%96%B9%E5%AE%89%E8%A3%85.png"></p><p>​第二种安装:</p><p><img src="/../images/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%852.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;基础阶段&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linu上部署各类软件</title>
    <link href="https://readmengk90.github.io/2024/09/23/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>https://readmengk90.github.io/2024/09/23/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2024-09-23T08:45:45.926Z</published>
    <updated>2024-09-24T02:00:35.058Z</updated>
    
    <content type="html"><![CDATA[<p><strong>不要抱怨别人行不行，关键自己行不行</strong></p><h1 id="实战章节：在Linux上部署各类软件"><a href="#实战章节：在Linux上部署各类软件" class="headerlink" title="实战章节：在Linux上部署各类软件"></a>实战章节：在Linux上部署各类软件</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么学习各类软件在Linux上的部署"><a href="#为什么学习各类软件在Linux上的部署" class="headerlink" title="为什么学习各类软件在Linux上的部署"></a>为什么学习各类软件在Linux上的部署</h2><p>在前面，我们学习了许多的Linux命令和高级技巧，这些知识点比较零散，同学们跟随着课程的内容进行练习虽然可以基础掌握这些命令和技巧的使用，但是并没有一些具体的实操能够串联起来这些知识点。</p><p>所以，现在我们设计了各类软件在Linux上部署安装的实战章节，可以让同学们：</p><ul><li>对前面学习的各类操作命令进行复习和练习，从而深度掌握它们</li><li>本章节中演示部署的软件，包含了IT行业各类岗位中所必须使用的，如：Java后台、大数据开发、运维开发、测试、AI等。无论学习Linux后从事什么岗位，这些内容都会给你带来帮助</li></ul><blockquote><p>对于零基础学员，实战课程中所讲解的软件大概率多数大家并不了解。</p><p>所以，课程仅涉及到安装部署，不对软件的使用做详细说明。</p><p>同学们在这个过程中，可能会遇到各种各样的错误，<code>不要怕</code>，解决它，将会给你带来极大的提升。</p></blockquote><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>对于本部分的内容学习，我们设计两个目标：</p><ul><li><p>对于零基础或未从业的学员，不要求深入理解所安装部署的软件是什么，仅仅能够跟随课程成功的将其部署安装并运行成功即可</p><p>在这个过程中，主要锻炼大家对Linux操作系统的熟练度，此乃零基础未从业学员的第一学习目标</p></li><li><p>对于有基础或已从业的学员，本章节讲解的软件涵盖了大多数IT从业者所能接触到的，特别是大数据开发、后端开发两个主流方向，可以作为参考资料，以便在工作中有所帮助。</p></li></ul><p>本章节内的各类软件安装，&#x3D;&#x3D;不强制要求全部学习&#x3D;&#x3D;</p><ol><li>零基础学员，建议全部学习，作为前面学习内容的总结和实战</li><li>IT从业者、有经验学员，可以按需选择，选择工作中需要用到的进行学习</li></ol><blockquote><p>章节内包含的软件并非100%涵盖了IT开发领域中所需要的内容。</p><p>如果您对某些软件的安装有强烈需求，且课程中没有提供教程，可以私信B站：”黑马大数据曹老师”，老师会酌情根据时间安排补充上去哦。</p></blockquote><h2 id="为什么不使用PPT而是使用文档进行授课"><a href="#为什么不使用PPT而是使用文档进行授课" class="headerlink" title="为什么不使用PPT而是使用文档进行授课"></a>为什么不使用PPT而是使用文档进行授课</h2><p>从现在开始，将要进入到Linux的实操阶段，在这个阶段我们将会涉及到非常多的软件部署等操作，涉及到：</p><ul><li>各类命令的使用</li><li>各种过程的结果</li><li>复杂的流程步骤</li><li>等</li></ul><p>这些信息的展示，并不适合于使用PPT作为载体进行授课，所以从现在开始我们将使用操作文档的模式为大家进行讲解。</p><blockquote><p>使用文档模式还有一个好处，除了学习视频以外，拿到课程中使用的操作文档，同样可以作为重要的参考手册进行使用。</p><p>一举两得</p></blockquote><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol><li>实战章节要求同学们&#x3D;&#x3D;务必全部学习前面的知识点&#x3D;&#x3D;，即：初识Linux、Linux基础命令、Linux权限管理、Linux高阶技巧这4个章节，请勿跳过前面的章节学习实战章节。</li><li>实战章节中会开启多台虚拟机，请尽量确保电脑的内存在：8GB（包含8GB）以上。如内存不足可以扩充内存条或购买阿里云、UCloud等云服务器临时使用（1个月多台低配服务器几十块左右）</li></ol><blockquote><p>对于云平台上购买服务器，可以参阅最后的章节（云服务）</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。</p><p>一个合格的程序员要有良好的信息收集能力哦</p><h1 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p><p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p><p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p><p>本次课程分为2个版本进行安装：</p><ul><li>MySQL 5.7版本安装</li><li>MySQL 8.x版本安装</li></ul><blockquote><p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p></blockquote><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p><p>对于SQL语句我们并未涉及，所以可以跟随教程的内容，复制粘贴即可</p><p>如对MySQL感兴趣，可以学习BiliBili黑马程序员视频：<a href="https://www.bilibili.com/video/BV1iF411z7Pu">2022新版黑马程序员MySQL知识精讲+mysql实战案例_零基础mysql数据库入门到高级全套教程</a></p><blockquote><p>如有时间，建议可以在学习完Linux系统之后，学习一下MySQL数据库</p><p>无论从事什么方面的开发，Java后端、大数据、AI、前端、Linux运维等，都会要求掌握MySQL数据库的</p><p>可以说，MySQL是IT开发从业者必备的技能了。</p></blockquote><h2 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><p>MySQL的安装我们可以通过前面学习的yum命令进行。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182514.png" alt="image-20221012182514865"></p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：</p><ul><li>导入MySQL仓库的密钥</li><li>配置MySQLQ的yum仓库</li></ul></blockquote></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182556.png" alt="image-20221012182555420"></p></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182716.png" alt="image-20221012182716598"></p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182744.png" alt="image-20221012182744115"></p></li><li><p>登陆MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012182806.png" alt="image-20221012182805966"></p></li><li><p>修改root用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>; # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root运行远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012183746.png" alt="image-20221012183746802"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>主要修改root密码和允许root远程登录</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure></li><li><p>允许root远程登录，并设置远程登录密码</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/12/20221012192303.png" alt="image-20221012192303607"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载apt仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094103.png" alt="image-20221016094103315"></p></li><li><p>配置apt仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p>弹出框中选择：<code>ubuntu bionic</code> （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094142.png" alt="image-20221016094142343"></p><p>弹出框中选择：<code>MySQL Server &amp; Cluster</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094216.png" alt="image-20221016094216377"></p><p>弹出框中选择：<code>mysql-5.7</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094254.png" alt="image-20221016094254397"></p><p>最后选择：<code>ok</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094306.png" alt="image-20221016094306917"></p></li><li><p>更新apt仓库的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>检查是否成功配置MySQL5.7的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094546.png" alt="image-20221016094546943"></p><p>看到如图所示字样，即成功</p></li><li><p>安装MySQL5.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure><p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094941.png" alt="image-20221016094941439"></p><p>再次输入root密码确认</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016094954.png" alt="image-20221016094954505"></p></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095259.png" alt="image-20221016095259172"></p></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>登陆MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101524.png" alt="image-20221016101524498"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h2 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以直接可以通过apt安装即可</p></blockquote><blockquote><p>注意，课程是以WSL获得的Ubuntu操作系统环境。</p><p>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是&#x3D;&#x3D;完全一致的&#x3D;&#x3D;</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><ol><li><p>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure></li><li><p>更新apt仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>登陆MySQL设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>重新登陆MySQL（用更改后的密码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/16/20221016110414.png" alt="image-20221016110414182"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h1 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p><p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p><blockquote><p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p></blockquote><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><p>Tomcat的安装非常简单，主要分为2部分：</p><ol><li>安装JDK环境</li><li>解压并安装Tomcat</li></ol><blockquote><p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p><p>课程中使用的JDK版本是：JDK8u351版本</p></blockquote><h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ol><li><p>下载JDK软件</p><p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p><p>在页面下方找到：</p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163411.png" alt="image-20221017163411651" style="zoom: 67%;" /><p>下载<code>jdk-8u351-linux-x64.tar.gz</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163440.png" alt="image-20221017163440491"></p><p>&#x3D;&#x3D;在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）&#x3D;&#x3D;</p></li><li><p>登陆Linux系统，切换到root用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163607.png"></p></li><li><p>通过FinalShell，上传下载好的JDK安装包</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017163706.png" alt="image-20221017163706026"></p></li><li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：&#x2F;export&#x2F;server 内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server </span><br></pre></td></tr></table></figure></li><li><p>解压缩JDK安装文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>配置JDK的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure></li><li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME&#x2F;bin文件夹加入PATH环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>生效环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>配置java执行程序的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>执行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure></li></ol><h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote><p>Tomcat建议使用非Root用户安装并启动</p><p>可以创建一个用户：tomcat用以部署</p></blockquote><ol><li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p><blockquote><p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p><p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p><p>放行有2种操作方式：</p><ol><li>关闭防火墙</li><li>配置防火墙规则，放行端口</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭防火墙</span><br><span class="line">systemctl disable firewalld# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span></span><br><span class="line">firewall-cmd --reload# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure><blockquote><p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p><p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p></blockquote></li><li><p>以root用户操作，创建tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure></li><li><p>下载Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可</p><p>或者使用课程资料中提供的安装包</p></blockquote></li><li><p>解压Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>创建Tomcat软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure></li><li><p>修改tomcat安装目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure></li><li><p>切换到tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>tomcat启动在8080端口，可以检查是否正常启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017223814.png" alt="image-20221017223814737"></p></li><li><p>打开浏览器，输入：</p><p><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></p><p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017223915.png" alt="image-20221017223915498"></p></li></ol><p>至此，Tomcat安装配置完成。</p><h1 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p><p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p><blockquote><p>安装Nginx的操作需要root身份</p></blockquote><ol><li><p>安装yum依赖程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>手动添加，nginx的yum仓库</p><p>yum程序使用的仓库配置文件，存放在：<code>/etc/yum.repo.d</code>内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><blockquote><p>通过如上操作，我们手动添加了nginx的yum仓库</p></blockquote></li><li><p>通过yum安装最新稳定版的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx# 启动</span><br><span class="line">systemctl stop nginx# 停止</span><br><span class="line">systemctl status nginx# 运行状态</span><br><span class="line">systemctl enable nginx# 开机自启</span><br><span class="line">systemctl disable nginx# 关闭开机自启</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙放行</p><p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</p><p><a href="http://192.168.88.130/">http://192.168.88.130</a> 或 <a href="http://centos/">http://centos</a></p><blockquote><p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p><p>显示的指定端口也是可以的比如：</p><ul><li><strong><a href="http://192.168.88.130/">http://192.168.88.130:80</a></strong></li><li><a href="http://centos/">http://centos:80</a></li></ul></blockquote></li></ol><p>至此，Nginx安装配置完成。</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/18/20221018143113.png" alt="image-20221018143113053"></p><h1 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p><p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><blockquote><p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p></blockquote><ol><li><p>准备yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server# 启动</span><br><span class="line">systemctl stop rabbitmq-server# 关闭</span><br><span class="line">systemctl status rabbitmq-server# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动RabbitMQ的WEB管理控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li><li><p>添加admin用户，并赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></li><li><p>浏览器打开管理控制台</p><p><a href="http://192.168.88.130:15672/">http://192.168.88.130:15672</a></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/18/20221018154824.png" alt="image-20221018154823983"></p></li></ol><p>至此，RabbitMQ已经安装完成了。</p><h1 id="Redis安装部署【简单】"><a href="#Redis安装部署【简单】" class="headerlink" title="Redis安装部署【简单】"></a>Redis安装部署【简单】</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p><p>redis的特点就是：<code>快</code>，可以基于内存存储数据并提供超低延迟、超快的检索速度</p><p>一般用于在系统中提供快速缓存的能力。</p><h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置<code>EPEL</code>仓库</p><blockquote><p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：redis</span></span><br><span class="line">systemctl enable redis# 开机自启</span><br><span class="line">systemctl disable redis# 关闭开机自启</span><br><span class="line">systemctl start redis# 启动</span><br><span class="line">systemctl stop redis# 关闭</span><br><span class="line">systemctl status redis# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，redis使用端口6379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行6379端口</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent# 放行tcp规则下的6379端口，永久生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>进入redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行redis-cli</span></span><br><span class="line">[root@centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set mykey hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><p>至此，redis安装完成。</p><h1 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p><p>很多服务中的搜索功能，都是基于es来实现的。</p><h2 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h2><ol><li><p>添加yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>配置es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure></li><li><p>启动es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025085432.png" alt="image-20221025085432335"></p></li></ol><h1 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p><p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p><p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h3><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p><p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p><ol><li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行<code>init 0</code>来快速关机）</p></li><li><p>新建文件夹</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104157.png" alt="image-20221025104157628"></p><p>文件夹起名为：<code>虚拟机集群</code></p></li><li><p>克隆</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104131.png" alt="image-20221025104131303"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104312.png" alt="image-20221025104312091"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104329.png" alt="image-20221025104329109"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104345.png" alt="image-20221025104345484"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104414.png" alt="image-20221025104414576"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104427.png" alt="image-20221025104427160"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104432.png" alt="image-20221025104432927"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104446.png" alt="image-20221025104446044"></p></li><li><p>同样的操作克隆出：node2和node3</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025104825.png" alt="image-20221025104825204"></p></li><li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>同样的操作启动node2和node3,</p><p>修改node2主机名为node2，设置ip为192.168.88.132</p><p>修改node2主机名为node3，设置ip为192.168.88.133</p></li><li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p><blockquote><p>为了简单起见，建议配置root用户登录</p></blockquote></li></ol><h3 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h3><ol><li><p>在Windows系统中修改hosts文件，填入如下内容：</p><blockquote><p>如果同学们使用MacOS系统，请：</p><ol><li>sudo su -，切换到root</li><li>修改&#x2F;etc&#x2F;hosts文件</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li><li><p>在3台Linux的&#x2F;etc&#x2F;hosts文件中，填入如下内容（&#x3D;&#x3D;3台都要添加&#x3D;&#x3D;）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>SSH服务是一种用于远程登录的安全认证协议。</p><p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p><p>SSH服务支持：</p><ol><li>通过账户+密码的认证方式来做用户认证</li><li>通过账户+秘钥文件的方式做用户认证</li></ol><p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p><p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p><p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p><h4 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h4><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p><ol><li><p>在每一台机器都执行：<code>ssh-keygen -t rsa -b 4096</code>，一路回车到底即可</p></li><li><p>在每一台机器都执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure></li><li><p>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</p></li></ol><h3 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h3><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为&#x3D;&#x3D;每一台&#x3D;&#x3D;机器都配置JDK环境。</p><p>JDK配置参阅：<code>Tomcat</code>安装部署环节。</p><h3 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h3><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p><p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p><p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p><p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p><p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure><h3 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h3><p>为了避免后续出现问题，在完成上述设置后，为&#x3D;&#x3D;每一台虚拟机&#x3D;&#x3D;都制作快照，留待使用。</p><h2 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h2><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p><p>为了更加方面的互相传输，我们补充一个命令：scp</p><p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p><p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p><p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure><h1 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p><p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p><h2 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h2><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p><ol><li><p>首先，要确保已经完成了<code>集群化环境前置准备</code>环节的全部内容</p></li><li><p>【node1上操作】下载Zookeeper安装包，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】配置<code>myid</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure></li><li><p>【在node2和node3上操作】，创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】将Zookeeper 复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【在node2上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure></li><li><p>【在node3上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start# 启动Zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】验证Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure></li></ol><p>至此Zookeeper安装完成</p><h1 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>Kafka是一款<code>分布式的、去中心化的、高吞吐低延迟、订阅模式</code>的消息队列系统。</p><p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p><p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p><p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p><h2 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h2><ol><li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p><blockquote><p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p></blockquote></li><li><p>【在node1操作】下载并上传Kafka的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】将node1的kafka复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【在node2操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证Kafka启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/25/20221025174522.png" alt="image-20221025174522487"></p></li></ol><h2 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h2><ol><li>创建测试主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure><ol start="2"><li>运行测试，请在FinalShell中打开2个node1的终端页面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><h1 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p><p>Hadoop HDFS 提供分布式海量数据存储能力</p><p>Hadoop YARN 提供分布式集群资源管理能力</p><p>Hadoop MapReduce 提供分布式海量数据计算能力</p><h3 id="前置要求-1"><a href="#前置要求-1" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li>请确保完成了集群化环境前置准备章节的内容</li><li>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</li></ul><h3 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h3><p>Hadoop生态体系中总共会出现如下进程角色：</p><ol><li>Hadoop HDFS的管理角色：Namenode进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop HDFS的工作角色：Datanode进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop YARN的管理角色：ResourceManager进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop YARN的工作角色：NodeManager进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop 历史记录服务器角色：HistoryServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Hadoop 代理服务器角色：WebProxyServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Zookeeper的进程：QuorumPeerMain进程（<code>仅需1个即可（Zookeeper的工作者，越多越好）</code>）</li></ol><h3 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h3><p>角色分配如下：</p><ol><li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li><li>node2:Datanode、NodeManager、QuorumPeerMain</li><li>node3:Datanode、NodeManager、QuorumPeerMain</li></ol><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026202935.png" alt="image-20221026202935745"></p><h2 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h2><h3 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h3><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p><p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p><p>请在VMware中，对：</p><ol><li>node1设置4GB或以上内存</li><li>node2和node3设置2GB或以上内存</li></ol><blockquote><p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p><p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p></blockquote><h3 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h3><p>略</p><h3 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h3><ol><li><p>下载Hadoop安装包、解压、配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>hadoop-env.sh</code></p><blockquote><p>Hadoop的配置文件要修改的地方很多，请细心</p></blockquote><p>cd 进入到&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop，文件夹中，配置文件都在这里</p><p>修改hadoop-env.sh文件</p><blockquote><p>此文件是配置一些Hadoop用到的环境变量</p><p>这些是临时变量，在Hadoop运行时有用</p><p>如果要永久生效，需要写到&#x2F;etc&#x2F;profile中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>core-site.xml</code></p><p>如下，清空文件，填入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>hdfs-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改workers文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>分发hadoop到其它机器</p></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure><ol start="11"><li><p>在node2、node3执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>创建所需目录</p><ul><li><p>在node1执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node2执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node3执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置环境变量</p><p>在node1、node2、node3修改&#x2F;etc&#x2F;profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>生效</p></li><li><p>格式化NameNode，在node1执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><blockquote><p>hadoop这个命令来自于：$HADOOP_HOME&#x2F;bin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p></blockquote></li><li><p>启动hadoop的hdfs集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><blockquote><p>start-dfs.sh这个命令来自于：$HADOOP_HOME&#x2F;sbin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p></blockquote></li><li><p>启动hadoop的yarn集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li><li><p>启动web代理服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ol><li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p></li><li><p>验证HDFS，浏览器打开：<a href="http://node1:9870/">http://node1:9870</a></p><p>创建文件test.txt，随意填入内容，并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure></li><li><p>验证YARN，浏览器打开：<a href="http://node1:8088/">http://node1:8088</a></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure></li></ol><h1 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h1><h2 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h2><p>HBase 是一种<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>、可扩展、支持海量数据存储的 NoSQL 数据库。</p><p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p><p>不过和Redis设计方向不同</p><ul><li>Redis设计为少量数据，超快检索</li><li>HBase设计为海量数据，快速检索</li></ul><p>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</p><h2 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h2><ol><li><p>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</p><ul><li>集群化软件前置准备（JDK）</li><li>Zookeeper</li><li>Hadoop</li><li>这些环节的软件安装</li></ul></li><li><p>【node1执行】下载HBase安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-site.xml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件的全部内容替换成如下内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper的地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper快照的存储位置 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/export/server/apache-zookeeper-3.6.0-bin/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/regionservers</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，分发hbase到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】，配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1、node2、node3执行】，配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动HBase</p><blockquote><p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><blockquote><p>由于我们配置了环境变量export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin</p><p>start-hbase.sh即在$HBASE_HOME&#x2F;bin内，所以可以无论当前目录在哪，均可直接执行</p></blockquote></li><li><p>验证HBase</p><p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p></li><li><p>简单测试使用HBase</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h1><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h2><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p><h2 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1执行】下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>spark-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】分发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】设置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动Spark集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure></li><li><p>打开Spark监控页面，浏览器打开：<a href="http://node1:8081/">http://node1:8081</a></p></li><li><p>【node1执行】提交测试任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h1><h2 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h2><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p><p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p><h2 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1操作】下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】修改配置文件，<code>conf/flink-conf.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line"><span class="attr">taskmanager.memory.preallocate:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line"><span class="attr">jobmanager.web.port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，修改配置文件，<code>conf/slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】分发Flink安装包到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，启动Flink</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure></li><li><p>验证Flink启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure></li><li><p>提交测试任务</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h1><h2 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h2><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p><p>Zabbix 是一个&#x3D;&#x3D;企业级分布式开源监控解决方案&#x3D;&#x3D;。</p><p>Zabbix 软件能够&#x3D;&#x3D;监控&#x3D;&#x3D;众多网络参数和服务器的&#x3D;&#x3D;健康度、完整性&#x3D;&#x3D;。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p><h2 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h2><blockquote><p> 安装整体步骤:</p></blockquote><ol><li>准备Linux 服务器(虚拟机)</li><li>安装Mysql</li><li>安装zabbix( 包含 server  agent  web)</li><li>配置 mysql, 为zabbix创建表结构</li><li>配置zabbix server</li><li>启动并开启开机自启动</li></ol><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175324.png" alt="1574338996145"></p><h3 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h3><p>安装ZabbixServer需要先安装好<code>Mysql</code>数据库</p><p>课程使用<code>Mysql 5.7</code></p><p>安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4; # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h3 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h3><blockquote><p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。</p></blockquote><p>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&os_distribution=centos&os_version=7&db=mysql">https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql</a></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175330.png" alt="1571981197131"></p><p>选择对应的版本，然后再下面官网给出了具体的安装命令，使用<code>rpm</code>和<code>yum</code>来进行安装。</p><p>需要有网络。</p><p><code>以下内容来自官方页面</code></p><h4 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/installation/install_from_packages">documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h4 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/appendix/install/db_scripts">documentation</a></p><blockquote><p>在Mysql中操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure><p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p><p>Import initial schema and data. You will be prompted to enter your newly created password.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure><h4 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h4><p>Edit file &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure><h4 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h4><p>Edit file <code>/etc/httpd/conf.d/zabbix.conf</code>, uncomment and set the right timezone for you.<code># php_value date.timezone Asia/Shanghai</code></p><p>Start Zabbix server and agent processes and make it start at system boot:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure><p>Now your Zabbix server is up and running!</p><h3 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h3><p><strong>打开:<code>http://192.168.88.131/zabbix</code></strong></p><p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175338.png" alt="1571993951841"></p><p><strong>点击下一步，会检查相应的设置是否都正常</strong></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175341.png" alt="1571994018126"></p><p>如果一切正常，点击下一步。</p><p><strong>配置DB连接</strong></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175344.png" alt="1571994069689"></p><p>按具体情况填写即可</p><p><strong>配置Server细节</strong></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175347.png" alt="1571994111921"></p><p>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫<code>ITHEIMA-TEST</code></p><p><strong>安装前总结预览</strong></p><p>检查确认没有问题就下一步</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175349.png" alt="1571994206902"></p><p><strong>配置完成</strong></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175351.png" alt="1571994221531"></p><p><strong>初始管理员账户Admin密码zabbix</strong></p><p>输入账户密码后，就能进入zabbix页面了。</p><p>如下图：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175354.png" alt="1571994287036"></p><p>现在是一个崭新的zabbix等待我们去探索。</p><h1 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h1><h2 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p><code>Grafana</code>支持两种部署形式</p><ol><li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li><li><code>Grafana</code>官方托管. 无需安装, 在线注册即可得到一个专属于自己的<code>Grafana</code>, 但是要花钱的. 是一种<code>SaaS</code>服务</li></ol><p>我们课程选择方式1</p><h3 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h3><p><code>Grafana</code>支持常见的绝大多数操作系统, 如<code>windows</code> <code>mac</code> <code>linux</code> 同时也支持部署在<code>docker</code>中.</p><p>大多数情况下, <code>Grafana</code>都是部署在<code>linux</code>服务器之上. 所以本课程也是基于<code>Linux</code>系统来讲解.</p><p>对<code>windows</code> <code>mac</code>系统 或 <code>docker</code>部署有兴趣的同学, 请参考:  <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p><p>我们部署<code>Grafana</code>可以使用<code>YUM</code>来进行部署.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>grafana-server</code>具有许多配置选项，这些选项可以在<code>.ini</code>配置文件中指定，也可以使用环境变量指定。</p><blockquote><p> <strong>Note.</strong> <code>Grafana </code> needs to be restarted for any configuration changes to take effect. </p></blockquote><h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p><code>;</code>符号在<code>.ini</code>文件中全局表示注释 ()</p><h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p><ul><li>默认: <code>$WORKING_DIR/conf/defaults.ini</code></li><li>自定义:<code>$WORKING_DIR/conf/custom.ini</code></li><li>自定义配置文件路径可以被参数<code>--config</code>覆盖</li></ul><blockquote><p>对于<code>YUM</code> <code>RPM</code> 安装的方式, 配置文件在: <code>/etc/grafana/grafana.ini</code></p></blockquote><h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure><p>其中<code>SectionName</code>是方括号内的文本。一切都应为大写，<code>.</code>应替换为<code>_</code> 例如，给定以下配置设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure><p>Then you can override them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span><span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p><code>Grafana</code>支持使用<code>Sqlite3</code> <code>Postgresql</code> <code>Mysql</code>这三种数据库作为其<code>元数据</code>的存储.</p><p>我们课程使用<code>Mysql</code>. 和<code>zabbix</code>的元数据mysql共用一个实例</p><p>只需要配置如下内容即可:</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/26/20221026175713.png" alt="1573635500521"></p><p>并登陆mysql, 执行:</p><p><code>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p><p>创建<code>Grafana</code>使用的数据库作为元数据存储.</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://node1:3000/">http://node1:3000</a></p><p>默认账户密码：admin&#x2F;admin</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;Linux&lt;/center&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://readmengk90.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://readmengk90.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux从入门到精通</title>
    <link href="https://readmengk90.github.io/2024/09/20/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-5day/"/>
    <id>https://readmengk90.github.io/2024/09/20/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-5day/</id>
    <published>2024-09-20T00:11:45.071Z</published>
    <updated>2024-11-10T01:37:45.403Z</updated>
    
    <content type="html"><![CDATA[<p><strong>带着枷锁的舞者，枷锁一定是其成功的工具</strong></p><p>课程设计：</p><h3 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1.初识Linux"></a>1.初识Linux</h3><h4 id="1-1-操作系统概述"><a href="#1-1-操作系统概述" class="headerlink" title="1.1 操作系统概述"></a>1.1 操作系统概述</h4><p>​计算机由硬件和软件组成，操作系统属于软件，主要作用就是协助用户<strong>调度</strong>硬件工作，充当用户和计算机硬件的桥梁，常见的操作系统有MacOS,Linux,Windows(PC端)，安卓，iponeOS,HarmonyOS(移动端).</p><h4 id="1-2-Linux内核"><a href="#1-2-Linux内核" class="headerlink" title="1.2 Linux内核"></a>1.2 Linux内核</h4><p>​Linux是<strong>服务器操作系统</strong>领域的核心系统。</p><p>​Linux系统&#x3D;Linux系统内核+系统级应用程序</p><p>​内核提供系统最核心的功能：调度 CPU,内存,文件系统，网络通讯，IO等。</p><p>​系统级应用程序：供用户快速上手操作系统的出厂自带程序。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/Linux%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F.png"></p><p>​                Linux发行版:提供了内核+系统及应用程序的完成封装，市面上Centos,ubuntu是常使用的。</p><h4 id="1-3-了解虚拟机"><a href="#1-3-了解虚拟机" class="headerlink" title="1.3 了解虚拟机"></a>1.3 了解虚拟机</h4><p>​如何获得可用的Linux操作系统环境–借助虚拟机。</p><p>​虚拟机：通过虚拟化的软件得到虚拟化的硬件，然后给虚拟的硬件安装真实的操作系统(centos7),得到一台没有实体的完整电脑。</p><h4 id="1-4-如何构建虚拟机环境"><a href="#1-4-如何构建虚拟机环境" class="headerlink" title="1.4 如何构建虚拟机环境"></a>1.4 如何构建虚拟机环境</h4><p>​通过<strong>虚拟化的软件</strong>(VMware)来提供虚拟硬件的能力，然后在硬件上安装操作系统。</p><p>​VMware WorkStation安装和配置 </p><p>​1.软件安装：无脑下一步</p><p>​2.检测网络适配器</p><p>​通用的更改适配器打开方式: win+R输入ncpa.cpl，查看VM1和VM8是否存在，如果不存在建议删除VM,重启后重新安装。</p><h4 id="1-5-在VMware上安装Linux虚拟机-Windows-图形化"><a href="#1-5-在VMware上安装Linux虚拟机-Windows-图形化" class="headerlink" title="1.5 在VMware上安装Linux虚拟机(Windows)-图形化"></a>1.5 在VMware上安装Linux虚拟机(Windows)-图形化</h4><p>​下载DVD-1810.iso</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://vault.centos.org/7.6.1810/isos/x86_64/</span><br></pre></td></tr></table></figure><p>​打开VM,点击创建新的虚拟机-打开向导-典型-安装程序光盘映像文件浏览选择刚下载好的文件-配置账户名,用户名,密码-更改虚拟 机的名称和位置(可选)-40GB-自定义硬件(可选)-<strong>勾选</strong>后点击完成。</p><p>​漫长的等待………………………</p><p>​输入用户名和密码，就可以体验Linux系统了</p><h4 id="1-6-远程连接Linux系统"><a href="#1-6-远程连接Linux系统" class="headerlink" title="1.6 远程连接Linux系统"></a>1.6 远程连接Linux系统</h4><p>​Linux系统中多数情况下使用的命令行，因为Linux系统图形化界面不好用，不稳定。</p><p>​使用第三方软件(finalShell)操作Linux的必要性：在VM中操作Linux命令行不太方便，内容的复制粘贴，文件的上传下载跨越VM都不太方便</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exe</span><br></pre></td></tr></table></figure><p>​Linux桌面进入命令行：桌面右键点击：open in terminal</p><p>​查询Linux系统的IP地址：当前登陆用户~下输入ifconfig,ens3里的inet就是IP地址</p><p>​打开FinalShell–左上角文件夹–白色+号–ssh连接(Linux)–主机：linux的IP地址–双击连接管理器的链接–接受并保存–连接成功。</p><p>​<strong>注意</strong>：Linux虚拟机如果重启，有可能IP地址发生改变，如果改变需要在FinalShell中修该连接的地址。</p><p>​固定IP地址的方法：</p><h4 id="1-7-使用WSL获得Ubuntu系统环境-拓展"><a href="#1-7-使用WSL获得Ubuntu系统环境-拓展" class="headerlink" title="1.7 使用WSL获得Ubuntu系统环境(拓展)"></a>1.7 使用WSL获得Ubuntu系统环境(拓展)</h4><p>​WSL是Window10系统的新特性，可以以非常轻量化的方式，得到Linux系统环境，这种环境是完全直连我们计算机硬件的，并不需要通过虚拟机去虚拟硬件，不会影响Window系统本身的运行。</p><p>​WSL的部署：win键-右键-应用和功能-程序和功能-启用或关闭Windows功能-勾选适用于Linux的Windows子系统-立即重启自动。</p><p>​安装WSL的操作系统：搜索Miscrosoft Store-搜索ubuntu–下载第一个-获取安装-打开-设置用户名和密码。</p><p>​安装Windows Terminal软件：Ubuntu自带的终端窗口不太好用，可以直接在应用商店下载Terminal，</p><h4 id="1-8-虚拟机快照的制作和还原-Windows"><a href="#1-8-虚拟机快照的制作和还原-Windows" class="headerlink" title="1.8 虚拟机快照的制作和还原(Windows)"></a>1.8 虚拟机快照的制作和还原(Windows)</h4><p>​功能：为了避免由于系统损坏重装Linux操作系统的麻烦，可以通过快照功能将当前虚拟机的状态保存下来，在以后可以通过快照恢复虚拟机到保存的状态。</p><p>​制作：(确保虚拟机关机)右键虚拟机-快照-快照管理器-拍摄快照</p><p>​还原：测试快照-转到-是</p><h3 id="2-Linux基础命令"><a href="#2-Linux基础命令" class="headerlink" title="2.Linux基础命令"></a>2.Linux基础命令</h3><h4 id="2-1-Linux的目录结构"><a href="#2-1-Linux的目录结构" class="headerlink" title="2.1 Linux的目录结构"></a>2.1 Linux的目录结构</h4><p>​Linux没有盘符这个概念，只有一个根目录**&#x2F;<strong>，所以文件都在它下面，在Linux系统中，路径直接的层级关系用 &#x2F; 表示(</strong>&#x2F;**usr&#x2F;local&#x2F;hello.txt)。</p><h4 id="2-2-Linux的命令"><a href="#2-2-Linux的命令" class="headerlink" title="2.2 Linux的命令"></a>2.2 Linux的命令</h4><p>​命令的通用格式： command [options] [parameter]</p><h5 id="2-2-1-ls-列出内容"><a href="#2-2-1-ls-列出内容" class="headerlink" title="2.2.1 ls 列出内容"></a>2.2.1 ls 列出内容</h5><p>​<strong>ls : list简写，列出当前工作目录下&#x2F;home的内容(文件+文件夹)。</strong></p><pre><code>         ls /root:查看指定目录/root里面的内容。</code></pre><p>​ <strong>-options:</strong></p><pre><code>         ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all</code></pre><p>​                         ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(<strong>简写ll</strong>)。</p><p>​                         ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p><h5 id="2-22-cd-切换目录"><a href="#2-22-cd-切换目录" class="headerlink" title="2.22 cd 切换目录"></a>2.22 cd 切换目录</h5><p>​ cd : change directory,切换目录**</p><pre><code>         cd .. ：返回上一级目录          cd - :在临近的2个目录间切换          cd . : 返回登陆者的当前目录          cd / :切换到根目录</code></pre><p>​ cd或cd ~: 到达家目录</p><pre><code>         cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到/home/itcast,如果 是root用户登陆的就回到/root</code></pre><h5 id="2-23-pwd"><a href="#2-23-pwd" class="headerlink" title="2.23  pwd"></a>2.23  pwd</h5><p>​pwd(print work directory)显示当前所在的工作目录的<strong>绝对路径</strong>。</p><h5 id="2-24-相对-绝对路径"><a href="#2-24-相对-绝对路径" class="headerlink" title="2.24 相对&#x2F;绝对路径"></a>2.24 相对&#x2F;绝对路径</h5><p>​ 绝对路径：从根目录&#x2F;开始。</p><pre><code>         相对路径：从当前目录开始，不需要以/开头。</code></pre><h5 id="2-25-mkdir"><a href="#2-25-mkdir" class="headerlink" title="2.25 mkdir"></a>2.25 mkdir</h5><p>​<strong>mkdir: make directory,创建文件夹</strong></p><pre><code>            mkdir test1:没有层级的创建文件夹test1,当前目录下创建。</code></pre><p>​                        mkdir [<strong>-p</strong> ]  aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p><h5 id="2-26-touch"><a href="#2-26-touch" class="headerlink" title="2.26 touch"></a>2.26 touch</h5><p>​<strong>touch: 创建空文件</strong></p><pre><code>         touch a.txt #在当前目录创建a.txt文件          touch /root/a.txt #在/root目录创建a.txt文件</code></pre><h5 id="2-27-cat"><a href="#2-27-cat" class="headerlink" title="2.27 cat"></a>2.27 cat</h5><p>​cat Linux路径</p><p>​<strong>cat : 查看 整个文件内容</strong></p><p>​cat a.txt :查看文件全部内容</p><h5 id="2-28-more"><a href="#2-28-more" class="headerlink" title="2.28 more"></a>2.28 more</h5><p>​more Linux路径</p><p>​<strong>more :查看文件部分内容</strong></p><pre><code>         enter：多查一行数据          空 格 ： 查看新的一屏幕数据，翻页</code></pre><p>​ q：退出查看 </p><h5 id="2-29-cp-copy-复制粘贴"><a href="#2-29-cp-copy-复制粘贴" class="headerlink" title="2.29 cp  copy , 复制粘贴"></a>2.29 cp  <strong>copy , 复制粘贴</strong></h5><p>​语法：cp [-r]  参数1 参数2</p><p>​<strong>针对文件</strong></p><p>​cp a.txt b.txt</p><pre><code>            a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。</code></pre><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-1.png"></p><p>​a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-2.png"></p><p>​【无论有没有创建后一个空文件，都会把前一个文件的内容复制过去】</p><p>​a.txt 内容存在 b.txt<strong>内容存在</strong>———将a的内容覆盖到b里。</p><p>​(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p><p>​<strong>针对文件夹</strong></p><p>​【 当test2文件夹存在：将test1整个复制一份到test2目录中】</p><p>​ cp test1 test2 -r</p><p>​当test2文件夹和内容不存在：将test1下面的内容复制一份，写到test2目录下。<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-3.png"></p><p>​test1内容存在 test2内容存在. —-将test1目录整体复制到test2目录中<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-4.png"></p><p>​<strong>针对文件文件夹</strong></p><p>​cp a.txt test2 :复制a.txt并写入到 test2 目录中<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-5.png"></p><p>scp命令是cp命令的升级版，即：ssh cp,通过SSH协议完成文件的复制</p><p>其主要功能就是：在不同的LInux服务器之间，通过SSH协议互相传输文件，只要知晓服务器的账户和密码(密钥),即可通过SCP互传文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scp语法</span></span><br><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">-r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">参数1:本机路径或远程目标路径</span><br><span class="line">参数2：远程目标路径或本机路径</span><br><span class="line"></span><br><span class="line">scp -r /export/server/jdk root@node02:/export/server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本机上的jdk文件夹，以root的身份复制到node2的/export/server/内同SSH登陆一样，账户名可以省略(使用本机当前的同名账户登陆)</span></span><br><span class="line"></span><br><span class="line">scp -r node2:/export/server/jdk /export/server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程node2的jdk文件夹，复制到本机的/export/server内</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:&#x27;pwd&#x27;/  #将本机当前路径jdk文件案件，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD##将本机当前路径jdk文件案件，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure><h5 id="2-30-mv移动文件或者文件夹"><a href="#2-30-mv移动文件或者文件夹" class="headerlink" title="2.30 mv移动文件或者文件夹"></a>2.30 mv移动文件或者文件夹</h5><p>​mv:文件,目录的移动和重命名</p><p>​<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p><p>​ mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-001.png"></p><p>​ mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-002.png"></p><p>​                     当test2不存在：重命名</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-003.png"></p><p>​ mv a.txt  test1 :移动文件到指定目录test1下面</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-004.png"></p><h5 id="2-31-rm-用于文件和文件夹的删除"><a href="#2-31-rm-用于文件和文件夹的删除" class="headerlink" title="2.31 rm 用于文件和文件夹的删除"></a>2.31 rm 用于文件和文件夹的删除</h5><p>​<strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></p><p>​  rm a.txt : 删除文件会提示，输入以y开头都会被删除，其他都不会被删除。</p><p>​ -r: 递归,先进入最里的一层，然后从里向外删除</p><p>​rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p><p>​         -f: force,强制</p><p>​rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p><p>​rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示</p><h5 id="2-32-which和find查找命令"><a href="#2-32-which和find查找命令" class="headerlink" title="2.32  which和find查找命令"></a>2.32  which和find查找命令</h5><p>​which：通过which命令，查看所使用的一系列命令的程序文件放在那里(which  cd)。</p><p>​find: </p><p>​【按文件名查找文件语法】:<strong>find 起始路径  -name  “被查找文件名”</strong></p><p>​可以搭配通配符*进行模糊搜索</p><p>​【按文件大小查找文件语法】:<strong>find 起始路径 -size | -n[KMG]</strong></p><p>​示例：查找小于10KB的文件：find &#x2F; -size -10k</p><p>​   查找大于100MB的文件：find &#x2F; -size +100M</p><h5 id="2-33-grep-wc和管道"><a href="#2-33-grep-wc和管道" class="headerlink" title="2.33 grep ,wc和管道|"></a>2.33 grep ,wc和管道|</h5><p>​grep关键字过滤:通过grep命令，从文件中<strong>通过关键字过滤文件行</strong>。</p><p>​语法：grep [-n] 关键字 关键路径</p><p>​-n,可选项，表示在结果中显示匹配的行的行号</p><p>​ grep -ir hadoop &#x2F;root:不区分大小写。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/gerp001.png"></p><p>​wc:通过wc命令统计文件的行数，单词数量等</p><p>​语法：wc [-c -m -l -w ]  <strong>文件路径</strong>(输入)</p><p>​-c:统计bytes数量</p><p>​-m:统计字符数量</p><p>​-l:统计行数</p><p>​-w:统计单词数量</p><p>​管道符|：将管道符左边命令的结果，作为右边命令的输入</p><p>​管道符可以嵌套。</p><h5 id="2-34-echo-tail和重定向符"><a href="#2-34-echo-tail和重定向符" class="headerlink" title="2.34 echo,tail和重定向符"></a>2.34 echo,tail和重定向符</h5><p>​echo:在命令行输出指定内容，类似编程语言的print</p><p>​语法：echo  “输出的内容”&#x2F;输出的内容</p><p>​反引号’ ‘:被它包围的内容会被作为命令去执行而不是普通字符。</p><p>​重定向符：</p><p>​&gt;:将左侧命令的结果，<strong>覆盖</strong>写入到符号右侧指定的文件中</p><p>​&gt;&gt;:将左侧命令的结果，<strong>追加</strong>写入符号右侧指定的文件中</p><p>​tail:可以查看文件尾部内容，跟踪文件的最新更改**(从后向前看)**</p><p>​语法：tail [-f -num] Linux路径</p><p>​Linux路径，表示被跟踪的文件路径</p><p>​-f:表示持续跟踪，程序一直运行(ctrl+c终止运行)</p><p>​-num:表示，查看尾部多少行，不填写默认10行(-5)</p><h5 id="2-35-vi编辑器"><a href="#2-35-vi编辑器" class="headerlink" title="2.35 vi编辑器"></a>2.35 vi编辑器</h5><p>​命令模式：vi  a.txt回车进入命令模式。</p><p>​编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p><p>​保持退出： 输入：进入末行模式，再输入wq保存退出。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/vi%E7%BC%96%E8%BE%91.png"></p><h3 id="2-Linux权限管控"><a href="#2-Linux权限管控" class="headerlink" title="2.Linux权限管控"></a>2.Linux权限管控</h3><h4 id="3-1-认知root用户"><a href="#3-1-认知root用户" class="headerlink" title="3.1 认知root用户"></a>3.1 认知root用户</h4><p>​ 在Linux系统中，root**(超级管理员)**拥有系统的最大操作权限，而普通用户在许多地方的权限是受限的。</p><p>​普通用户的权限，一般在器HOME目录内是不受限的，一旦出了HOME目录，大多数地方，普通用户仅有只读和执行的 权限，无修改权限。</p><p>​ 切换用户的命令语法：su [-]  [用户名]    （su:switch User）</p><p>​ - 符号是可选的，表示是否在切换用户后加载环境变量，建议带上</p><p>​ 用户名：表示要切换的用户，用户名也可以省略，省略表示切换到root。</p><p>​ 切换用户后，可以通过<strong>exit</strong>命令退回上一个用户，也可以使用快捷键：ctrl+d。</p><p>​  不建议长期使用root用户，避免错误操作带来的系统损伤，可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>​    <strong>语法：sudo  其他命令</strong></p><p>​     在其他命令之前，带上sudo,即可为这一条命令临时赋予root授权</p><p>​     但是并不是所以的用户，抖音权力使用sudo，我们需要为<strong>普通用户配置sudo认证。</strong></p><p>​     <strong>为普通用户配置sudo认证</strong></p><p>​      切换到root用户，执行visudo命令，会自动通过vi编辑器打开：&#x2F;etc&#x2F;sudoers</p><p>​在文件的最后添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">itheima   ALL=(ALL)         NOPASSWD: ALL</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">no pass word</span></span><br></pre></td></tr></table></figure><p>​最后通过wq保存</p><p>​切换回普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[itheima@localhost  ~]$ sudo  ls  /root</span><br><span class="line">anaconda-ks.cfg    original  -ks.cfg</span><br><span class="line">[itheima@localhost  ~]$ sudo  mkdir /test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行的命令均以root运行</span></span><br></pre></td></tr></table></figure><h4 id="3-2-用户-用户组"><a href="#3-2-用户-用户组" class="headerlink" title="3.2  用户 用户组"></a>3.2  用户 用户组</h4><p>​Linux系统中可以配置多个用户，也可以配置多个 用户组，并且用户可以加入多个用户组中。</p><p>​<strong>用户组管理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户组</span></span></span><br><span class="line">groupadd 用户组名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户组</span></span></span><br><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure><p>​<strong>用户管理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户</span></span></span><br><span class="line">useradd [-g -d] 用户名</span><br><span class="line">-g:指定用户的组,不指定-g会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</span><br><span class="line">-d:指定用户HOME路径，不指定，HOME目录默认在：/home/用户名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户</span></span></span><br><span class="line">userdel [-r] 用户名</span><br><span class="line">-r:删除用户的HOME目录，不使用-r,删除用户时，HOME目录保留</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#查看用户所属组</span></span></span><br><span class="line">id [用户名]</span><br><span class="line">用户名：被查看的用户，如果不提供则查看自身</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#修改用户所属组</span></span></span><br><span class="line">usermod -aG 用户组 用户名,将指定用户加入指定用户组</span><br></pre></td></tr></table></figure><p>​getent: 查看当前系统中有哪些用户(语法：getent passwd)</p><p>​     查看当前系统中有那些用户组(语法：getent group)</p><h4 id="3-3-查看权限管控信息"><a href="#3-3-查看权限管控信息" class="headerlink" title="3.3 查看权限管控信息"></a>3.3 查看权限管控信息</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/user03.png"></p><table><thead><tr><th align="center">r w x</th><th align="center">针对文件</th><th align="center">针对文件夹</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">可以查看文件内容</td><td align="center">可以查看文件夹内容，如ls命令</td></tr><tr><td align="center">w</td><td align="center">可以修改此文件</td><td align="center">可以在文件夹内创建删除改名等操作</td></tr><tr><td align="center">x</td><td align="center">可以将文件作为程序执行</td><td align="center">可以更改工作目录到此文件夹，即cd进入</td></tr></tbody></table><h4 id="3-4-修改权限控制chmod"><a href="#3-4-修改权限控制chmod" class="headerlink" title="3.4 修改权限控制chmod"></a>3.4 修改权限控制chmod</h4><p>​使用chmod命令，修改文件，文件夹的权限信息。</p><p>​注意，只有文件，文件夹的所属用户或者root用户可以修改</p><p>​语法：chmod [-R]  权限  文件或文件夹</p><p>​    -R:对文件夹内的全部内容应用统一的操作</p><p>​示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x hello.txt #将文件权限修改为：rwx r-x --x</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中：u表示user所属用户权限,g表示group组权限,o表示other其他权限</span></span><br><span class="line">chmod -R u=rwx,g=rx,o=x test #将文件夹test以及文件夹内前部内容权限设置为：rwxr-x--x</span><br></pre></td></tr></table></figure><p>​权限的数字符号：数字的细节如下：r记为5，w记为2，x记为1</p><p>​0：无任何权限，即—</p><p>​1：仅有x权限，即–x</p><p>​2:   仅有w权限，即-w-</p><p>​3:   有w和x权限，即-wx</p><p>​4:   仅有r权限， 即r–</p><p>​5:   仅有r和x权限，即r-x</p><p>​6:   仅有r和w权限，即rw-</p><p>​7:   有全部权限，即rwx</p><h4 id="3-5-修改权限控制chown"><a href="#3-5-修改权限控制chown" class="headerlink" title="3.5 修改权限控制chown"></a>3.5 修改权限控制chown</h4><p>​3.51 掌握使用chown修改<em>所属用户，用户组</em></p><p>​普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行。</p><p>​语法：chown [-R] [用户] [ : ] [用户组] 文件或文件夹。</p><p>​-R：同chmod,对文件夹内部内容应用相同规则</p><p>​用户：修改所属用户</p><p>​选项：用户组，修改所属用户组</p><p>​：用于分隔用户和用户组</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown root hello.txt,将hello.txt所属用户修改为root</span><br><span class="line">chown :root hello.txt,将hello.txt所属用户组修改为root</span><br><span class="line">chown root:itheima hello.txt,将hello.txt所属用户修改为root，用户组修改为itheima</span><br><span class="line">chown -R root test,将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</span><br></pre></td></tr></table></figure><h3 id="4-Linux实用操作"><a href="#4-Linux实用操作" class="headerlink" title="4.Linux实用操作"></a>4.Linux实用操作</h3><h4 id="4-1-Linux实用小技巧"><a href="#4-1-Linux实用小技巧" class="headerlink" title="4.1 Linux实用小技巧"></a>4.1 Linux实用小技巧</h4><p>​ctrl+c:强制停止</p><p>​ctrl+d:退出账户的登陆或者退出某些特定程序的专属页面。</p><p>​history：历史命令搜索</p><p>​ctrl+a,命令跳到开头</p><p>​ctrl+e,命令跳到结尾</p><p>​ctrl+键盘左键，向左跳一个单词</p><p>​ctrl+键盘右键，向右跳一个单词</p><p>​ctrl+l:可以清空终端内容，或者clear命令得到同样得效果</p><h4 id="4-2-软件安装"><a href="#4-2-软件安装" class="headerlink" title="4.2 软件安装"></a>4.2 软件安装</h4><p>​      1.掌握使用yum为Centos系统安装软件</p><p>​  yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法 yum [-y]  [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-y,自动确认，无需手动确认安装或卸载过程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install:安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove:卸载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">search:搜索</span></span><br><span class="line">yum命令需要联网和root权限</span><br></pre></td></tr></table></figure><p>​   安装wget程序(从网络上下载程序)   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">yum -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">yum -y search wget</span><br></pre></td></tr></table></figure><p>​    2.掌握使用apt为Ubuntu安装软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：apt [-y] [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">apt -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">apt -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">apt -y search wget</span><br></pre></td></tr></table></figure><h4 id="4-3-systemctl命令"><a href="#4-3-systemctl命令" class="headerlink" title="4.3 systemctl命令"></a>4.3 systemctl命令</h4><p>Linux系统很多软件均支持使用systemctl命令控制，能够被systemctl管理的软件，一般也称为：服务</p><p>系统内置的服务有：</p><p>​NetworkManager,主网络服务</p><p>​network:副网络服务</p><p>​firewalld:防火墙服务</p><p>​sshd,ssh服务(FinalShell远程登陆Linux使用的就算这个服务)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：systemctl start | stop | status | enable | disable 服务名</span><br></pre></td></tr></table></figure><p>部分第三方软件安装后也可以用systemctl进行控制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp,安装ntp软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过ntpd服务器，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y heepd,安装apache服务器软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过httpd服务器名，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure><h4 id="4-4-软连接"><a href="#4-4-软连接" class="headerlink" title="4.4 软连接"></a>4.4 软连接</h4><p>​使用ln命令创建软链接，类似Windows系统中的快捷方式们可以将文件，文件夹链接到其它位置</p><p>​语法： ln -s 参数1 参数2     （-s选项 ，创建软连接；参数1，被链接的文件或文件夹；参数2，要链接的目的地）</p><p>​实例：ln -s &#x2F;etc&#x2F;yum.conf ~&#x2F;yum.conf</p><p>​    ln -s &#x2F;etc&#x2F;yum ~&#x2F;yum</p><h4 id="4-5-日期和时区"><a href="#4-5-日期和时区" class="headerlink" title="4.5 日期和时区"></a>4.5 日期和时区</h4><p>​date命令：可以在命令行中查看系统时间</p><p>​语法：date [-d] [+格式化字符串]</p><p>​-d按照给定的字符串显示日期，一般用于日期计算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 10:16:00 CST</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不符合中国人阅读日期的习惯</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date +%Y-%m-%d</span><br><span class="line">2024-09-22</span><br><span class="line">[root@node1 ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2024-09-22 10:22:25</span><br></pre></td></tr></table></figure><p>​date命令进行日期加减</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date -d &quot;+1 day&quot; +%Y-%m-%d</span><br><span class="line">2024-09-23  #显示加一天(+,-,day,month,year)</span><br></pre></td></tr></table></figure><p>​修改Linux时区：</p><p>​修改时区需要使用root权限，修改时区为东八区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/localtime</span><br><span class="line">sudo ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rm -rf /etc/localtime</span><br><span class="line">[root@node1 ~]# ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 11:23:43 CST</span><br></pre></td></tr></table></figure><p>​ntp程序：自动校准系统时间</p><p>​安装ntp:<strong>yum -y install ntp</strong></p><p>​启动并设置开机自启：</p><p>​systemctl start ntpd</p><p>​systemctl enable ntpd</p><p>​当ntpd启动后会定期的帮助我们联网校准系统时间</p><p>​也可以手动校准(需要root权限):ntpdate -u ntp.aliyun.com</p><p>​通过阿里云提供的服务网址配合ntpdate(安装ntp后会附带这个命令)命令自动校准</p><h4 id="4-6-IP地址-主机名"><a href="#4-6-IP地址-主机名" class="headerlink" title="4.6 IP地址&amp;主机名"></a>4.6 IP地址&amp;主机名</h4><p>​IP地址：每台联网的电脑都会有一个地址，可以通过ifconfig,查看本机的。</p><p>​主机名：每一台电脑除了对外联络地址(IP地址)以外，还可以有自己的主机名</p><p>​hostnamectl set-hostname  新的主机名：修改主机名</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BB%E6%9C%BA%E5%90%8D.png"></p><p>​域名解析：</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png"></p><p>​配置主机名和ip的映射关系：</p><p>​以管理员身份打开记事本，打开找到hosts,编写保持映射关系。</p><p>​虚拟机配置固定IP</p><p>​为什么需要固定IP ?</p><p>​以前使用的Linux操作系统通过DHCP服务获取的IP地址会频繁变更，不利于远程操作和私人本地的虚拟机IP地址和主机名映射。</p><p>​1.在VMware Workstation中配置IP地址网关和网段(IP地址的范围)</p><p>​2.在Linux系统中手动修改配置文件，固定IP</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1n84y1i7td?p=35&amp;spm_id_from=pageDriver&amp;vd_source=d8733037a2c6216f5b8db97d9c49da5f</span><br></pre></td></tr></table></figure><h4 id="4-7-网络传输"><a href="#4-7-网络传输" class="headerlink" title="4.7 网络传输"></a>4.7 网络传输</h4><p>4.7.1 下载和网络请求</p><p>使用<strong>ping命令</strong>，检查指定的网络服务器是否是可联通的</p><p>语法：ping [-c num] ip或主机名</p><p><strong>wget命令</strong>：非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：wget [-b] url</p><p>-b:可选，后台下载，会将日志写入到当前工作目录的wget-log文件</p><p>curl命令：类似于浏览器打开网页（发起网络请求&amp;下载文件[-O]）</p><p>4.7.2 端口</p><p>物理端口：</p><p>虚拟端口：计算机内程序间的相互查找就需要端口来解决，IP地址只能锁定计算机。</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%AB%AF%E5%8F%A3.png"></p><p><strong>查看端口占用情况</strong></p><p>语法 ：nmap 被查看的IP地址端口的占用情况,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# yum install nmap #安装nmap</span><br><span class="line">[root@node1 ~]# nmap 127.0.0.1  </span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2024-09-22 20:04 CST</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.0000030s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">25/tcp  open  smtp</span><br><span class="line">111/tcp open  rpcbind</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>netstat命令：查看指定端口的占用情况</p><p>语法：netstat  -anp <strong>|</strong> grep 端口号，安装netstat:  yum -y install net-tools</p><h4 id="4-8-进程管理"><a href="#4-8-进程管理" class="headerlink" title="4.8 进程管理"></a>4.8 进程管理</h4><p>​操作系统中运行的程序会被一个独立的进程ID标记，就算进程。</p><p>​<strong>查看进程</strong>：ps [-e -f]</p><p>​-e:显示出全部的进程</p><p>​-f：以完全格式化的形式展示信息</p><p>​一般来说ps -ef 列出全部进程的去全部信息，可以配合管道符，gerp过滤一下。</p><p>​<strong>关闭进程</strong>：kill [-9] 进程ID,-9表示强制关闭，不使用-9只是发送关闭信号，不保证关闭。</p><h4 id="4-9-主机状态"><a href="#4-9-主机状态" class="headerlink" title="4.9 主机状态"></a>4.9 主机状态</h4><p>​查看系统资源占用：</p><p>​可以通过top命令查看CPU，内存使用情况，类时Windows的任务管理器。</p><p>​语法：直接输入top即可，按ctrl+c&#x2F;q退出。</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top.png"></p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top02.png"></p><p>磁盘监控：使用df命令，可以查看硬盘的使用情况</p><p>​语法：df [-h]  -h,以更加人性的单位显示</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4.png"></p><p>​使用iostat查看CPU，磁盘的相关信息；语法：iostat [-x] [num1] [num2]   ,-x可以显示更多信息，num1秒刷新一次刷新num2次。</p><p>网络监控：sar命令查看网络的相关统计</p><p>​语法： sar -n DEV num1 num2    ,-n代表查看网络，DEV表示查看网络接口，num同上。</p><h4 id="4-10-环境变量"><a href="#4-10-环境变量" class="headerlink" title="4.10 环境变量"></a>4.10 环境变量</h4><p>​<strong>环境变量PATH:</strong></p><p>​在Linux系统中执行env命令即可查到环境变量。</p><p>​无论在哪一个目录都能准确的执行&#x2F;usr&#x2F;bin&#x2F;cd这个程序，就是因为PATH记录了系统执行任何命令的搜索路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# env | grep PATH</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>​<strong>$符号：</strong>被用于取”变量”的值</p><p>​环境变量记录中的信息，除了给操作系统自己使用外，如果我们想要取用，可以通过$符号来取，具体语法：$环境变量名</p><p>通过echo语句输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>当和其他内容混合在一起，通过{}来标注取得变量是谁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>​<strong>自行设置环境变量：</strong></p><p>​临时设置：语法：export 变量名&#x3D;变量值</p><p>​永久生效：针对当前用户生效，配置在当前用户得：~&#x2F;.bashrc文件中</p><p>​    针对所有用户生效，配置在系统得：&#x2F;etc&#x2F;profile文件中</p><p>​    并通过语法：source <strong>配置文件</strong>，进行立刻生效，或重新登陆FinalShell生效。</p><p>​<strong>自定义环境变量PATH：</strong></p><p>​环境变量PATH这个项目里面记录了系统执行命令得搜索路径，这些搜索路径我们可以自行添加到PATH中去</p><p>​测试：在当前HOME目录内创建文件夹，myenv,在文件夹内创建文件mkhaha</p><p>​    通过vim编辑器，在mkhaha文件内填入：echo hahaha</p><p>​完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行</p><p>​    文件想要执行需要程序执行权限X: chmod 755</p><p>​     执行文件： .&#x2F;mkhahaha</p><p>​修改PATH的值</p><p>​临时修改PATH:export PATH &#x3D; <strong>$PATH</strong>:&#x2F;home&#x2F;itheima&#x2F;myenv,再次执行mkhaha,无论到哪里都能执行。</p><p>​或将export PATH&#x3D;<strong>$PATH</strong> :&#x2F;home&#x2F;itheima&#x2F;mkenv填入用户环境变量文件或系统环境变量文件中去。</p><h4 id="4-11-Linux文件的上传和下载"><a href="#4-11-Linux文件的上传和下载" class="headerlink" title="4.11 Linux文件的上传和下载"></a>4.11 Linux文件的上传和下载</h4><p>​1.掌握通过FinalShell在Linux系统中进行上传和下载</p><p>​2.掌握rz,sz命令</p><p>​除了通过FinalShell的下方窗体进行文件的传输以外，还可以通过rz,sz命令进行文件传输。</p><p>​rz,sz命令需要安装，可以通过：yum -y install lrzsz,即可安装。</p><p>​rz命令，进行上传，语法：直接输入rz即可，弹出框</p><p>​sz命令，进行下载，语法：sz   要下载的文件</p><p>​文件会自动下载到桌面的fsdownload文件夹中。</p><h4 id="4-12-压缩和解压"><a href="#4-12-压缩和解压" class="headerlink" title="4.12 压缩和解压"></a>4.12 压缩和解压</h4><p>​1.掌握使用tar命令压缩或解压tar或gzip文件</p><p>​.tar：简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装。</p><p>​.gz:也常见为.tar.gz,.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积。</p><p>​针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>​语法:tar [-c  -v  -x  -f  -z  -C]  参数1  参数2  ….参数N</p><p>​-c，创建压缩文件，用于压缩模式</p><p>​-v，显示压缩，解压过程，用于查看进度</p><p>​-x，解压模式</p><p>​-f，要创建的文件，或要解压的文件，-f选项必须在所以选项中位置处于最后一个</p><p>​-z，gzip模式，不使用-z就算普通的tarball格式(建议放开头)</p><p>​-C，选择解压的目的地，用于解压模式 (单独使用，和解压所需的其他参数分开)</p><p>​常见压缩组合：</p><p>​tar  -cvf  test.tar  1.txt  2.txt 3.txt:将1.txt  2.txt 3.txt压缩到test.tar文件内</p><p>​tar -zcvf  test.tar.gz    1.txt  2.txt 3.txt:将  1.txt  2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式。</p><p>​常见解压组合：</p><p>​tar -xvf  test.tar  ：解压test.tar,将文件压缩至当前目录</p><p>​tar -xvf test.tar -C &#x2F;home&#x2F;itheima :解压test.tar,将文件压缩至指定目录</p><p>​tar -zxvf test.tar.gz -C &#x2F;home&#x2F;itheima：以GZip模式解压test.tar.gz,将文件解压至指定目录</p><p>​2.掌握使用zip，unzip，命令压缩或解压zip文件</p><p>​可以使用zip命令，压缩文件为zip压缩包</p><p>​语法：zip [-r] 参数1，参数2……参数N</p><p>​-r,被压缩的包含文件夹的时候需要使用到-r</p><p>​示例：</p><p>​zip test.zip a.txt b.txt c.txt:将a.txt b.txt c.txt压缩到test.zip文件内</p><p>​zip -r test.zip test itheima a.txt:将test，itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p><p>​可以使用unzip命令，可以方便的解压zip压缩包</p><p>​语法：unzip [-d] 参数</p><p>​-d,指定要解压去的位置，同tar的-C选项</p><p>​参数，被解压的zip压缩包文件</p><p>​示例：</p><p>​unzip  test.zip,将test.zip解压到当前目录。</p><p>​unzip test.zip -d &#x2F;home&#x2F;itheima,将test.zip解压到指定文件夹内。</p><h3 id="5-实战软件部署"><a href="#5-实战软件部署" class="headerlink" title="5.实战软件部署"></a>5.实战软件部署</h3><h4 id="5-1-MySQL数据库管理系统安装部署"><a href="#5-1-MySQL数据库管理系统安装部署" class="headerlink" title="5.1 MySQL数据库管理系统安装部署"></a>5.1 MySQL数据库管理系统安装部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">MySQL5.7版本在Centos系统安装</span><br><span class="line"></span><br><span class="line">1.配置yum仓库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line">2.yum安装Mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">3.安装完成后，启动MySql并配置开机自启动</span><br><span class="line">systemctl start mysqld  #启动</span><br><span class="line">systemctl enable mysqld #开机自启动</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySql安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</span></span></span><br><span class="line">4.主要配置管理员用户root的密码以及配置允许远程登陆的权限</span><br><span class="line">获取MySQL的初始密码：cat /var/log/mysqld.log | grep &quot;temporary password&quot;</span><br><span class="line">登陆MySQL数据库系统：mysql -uroot -p</span><br><span class="line">修改root用户密码:(在mysql控制台内执行)ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;密码&#x27; --密码需要大于8位，有大写字母，特殊字符，不能是连续的简单语句。</span><br><span class="line">配置root的简单密码：</span><br><span class="line">set global validate_password_policy=LOW;#密码安全级别低</span><br><span class="line">set global validate_password_length=6;#密码长度最低6位即可</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;简单密码&#x27;;#非正式使用，仅限学习时</span><br><span class="line">配置root的远程登陆[拓展]:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">授权root远程登陆</span></span><br><span class="line">grant all privileges on *.* to root@&quot;IP地址&quot; identified by &#x27;密码&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">IP地址即允许登陆的IP地址，也可以填写%，表示允许任何地址</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">密码表示给远程登陆独立设置密码，和本地登陆的密码可以不同</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刷新权限，生效</span></span><br><span class="line">flush privileges;</span><br><span class="line">5.退出MySql控制台页面</span><br><span class="line">exit</span><br><span class="line">6.检查端口</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MySQL默认绑定了3306端口，可以通过端口占用检查Mysql的网络状态</span></span><br><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MySQL8.0版本在Centos系统安装</span><br><span class="line">1.配置yum仓库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql80-community-release-el7-2.noarch.rpm</span><br><span class="line">2.yum安装Mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">3.安装完成后，启动MySql并配置开机自启动</span><br><span class="line">systemctl start mysqld  #启动</span><br><span class="line">systemctl enable mysqld #开机自启动</span><br><span class="line">systemctl status mysqld #查看允许状态</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySql安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理</span></span></span><br><span class="line">允许root远程登陆，并设置远程登陆密码</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一次设置root远程登陆，并设置远程登陆密码</span></span><br><span class="line">create user &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后续修改密码使用如下SQL命令</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MySQL5.7版本在Ubuntu(WSL环境)系统安装</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line">1.通过 sudo su -,切换到root用户；或者再每一个命令前，加上sudo，用来零时提升权限</span><br><span class="line">安装--下载apt</span><br><span class="line">1.下载apt仓库文件,wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br><span class="line">2.配置apt仓库 dpkg -i mysql-apt-config_0.8.12-1_all.deb 弹出框中选择:ubuntu  bianic</span><br><span class="line">3.更新apt仓库的信息</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL8.0版本在Ubuntu(WSL环境)系统安装（不全）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装操作需要root权限</span></span><br><span class="line">1.通过 sudo su -,切换到root用户；或者再每一个命令前，加上sudo，用来零时提升权限</span><br><span class="line">安装</span><br><span class="line">1.如果已经安装过MySql5.7版本，需要卸载仓库信息</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br><span class="line">2.更新apt仓库信息</span><br><span class="line">apt update</span><br><span class="line">3.安装mysql</span><br><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure><p>​Tomcat安装部署</p><p>​Tomcat是一个WEB应用程序的托管平台，可以让用户编写WEB应用程序，被Tomcat所托管，并提供网站服务。即让用户开发的WEB应用程序，变成可以被访问的网页。</p><p>​<strong>安装：</strong></p><p>​1.安装JDK环境</p><p>​下载JDK软件</p><p>​2.解压安装Tomcat</p><h3 id="6-脚本＆自动化"><a href="#6-脚本＆自动化" class="headerlink" title="6.脚本＆自动化"></a>6.脚本＆自动化</h3><h3 id="7-项目实战"><a href="#7-项目实战" class="headerlink" title="7.项目实战"></a>7.项目实战</h3><h3 id="8-云平台技术"><a href="#8-云平台技术" class="headerlink" title="8.云平台技术"></a>8.云平台技术</h3><h3 id="9-问题汇总和解决方案"><a href="#9-问题汇总和解决方案" class="headerlink" title="9.问题汇总和解决方案"></a>9.问题汇总和解决方案</h3><h4 id="9-1-解决切换用户出现bash-4-2-问题"><a href="#9-1-解决切换用户出现bash-4-2-问题" class="headerlink" title="9.1 解决切换用户出现bash-4.2$问题"></a>9.1 解决切换用户出现bash-4.2$问题</h4><p>​<strong>问题描述</strong>：linux中创建了一个xhh用户，然后使用su命令切换用户后，终端提示符显示成“bash-4.2$”而不是[root@localhost xhh]#，导致ll等命令无法执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /] su itheima</span><br><span class="line">bash -4.2$</span><br></pre></td></tr></table></figure><p>​<strong>原因分析</strong>:没有在home目录下创建对应的目录导致。</p><p>​<strong>解决方案</strong>：使用root用户登录，再home目录中创建用户对应的文件夹，mkdir &#x2F;home&#x2F;user，这里的user是用户的名字，然后执行如下两个命令：<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/problem1.png"></p><p>​执行成功后，再次使用su命令切换用户，发现一切正常。</p><h4 id="9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64"><a href="#9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64" class="headerlink" title="9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)"></a>9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/yum%E6%97%B6%E7%9A%84%E5%91%BD%E4%BB%A4.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一步</span></span><br><span class="line">sudo sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二步</span></span><br><span class="line">sudo sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">鸣谢：https://blog.csdn.net/kitesxian/article/details/142356833</span></span><br></pre></td></tr></table></figure><h4 id="9-3-Linux解压并部署Tomcat"><a href="#9-3-Linux解压并部署Tomcat" class="headerlink" title="9.3 Linux解压并部署Tomcat"></a>9.3 Linux解压并部署Tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[tomcat@node1 ~]$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</span><br><span class="line">--2024-09-23 18:59:24--  https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.27/bin/apache-tomcat-9.0.27.tar.gz</span><br><span class="line">正在解析主机 mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)... 101.6.15.130, 2402:f000:1:400::2</span><br><span class="line">正在连接 mirrors.tuna.tsinghua.edu.cn (mirrors.tuna.tsinghua.edu.cn)|101.6.15.130|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 404 Not Found</span><br><span class="line">2024-09-23 18:59:24 错误 404：Not Found。</span><br></pre></td></tr></table></figure><p>上官网复制连接放进去,试试保准行。</p><h4 id="9-4-登录rabbitMQ管理界面时浏览器显示要求进行身份验证，与此站点连接不安全解决办法"><a href="#9-4-登录rabbitMQ管理界面时浏览器显示要求进行身份验证，与此站点连接不安全解决办法" class="headerlink" title="9.4 登录rabbitMQ管理界面时浏览器显示要求进行身份验证，与此站点连接不安全解决办法"></a>9.4 登录rabbitMQ管理界面时浏览器显示要求进行身份验证，与此站点连接不安全解决办法</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E9%97%AE%E9%A2%981.png"></p><p>鸣谢：<a href="https://blog.csdn.net/m0_61399406/article/details/132536144">登录rabbitMQ管理界面时浏览器显示要求进行身份验证，与此站点连接不安全解决办法_登录以访问此站点 要求进行身份验证-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;Python&lt;/center&gt;</summary>
    
    
    
    <category term="Python" scheme="https://readmengk90.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://readmengk90.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://readmengk90.github.io/2024/09/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80-Linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://readmengk90.github.io/2024/09/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80-Linux%E5%91%BD%E4%BB%A4/</id>
    <published>2024-09-18T02:20:52.244Z</published>
    <updated>2024-09-18T02:35:03.352Z</updated>
    
    <content type="html"><![CDATA[<p><strong>—–  有自觉才有自由   —–</strong></p><p>大数据解决海量<em><strong>数据的存储</strong></em>(存不下)与<em><strong>计算</strong></em>(查询慢)的问题。</p><p>大数据：处理出有价值的数据</p><p>大数据分析的业务流程：</p><ul><li><p><input disabled="" type="checkbox"> ​明确数据分析的目的和思路(搞清楚数据在哪，要做什么?)</p></li><li><p><input disabled="" type="checkbox"> ​ 数据收集(读数据)</p></li><li><p><input disabled="" type="checkbox"> ​                 数据处理：提取，清洗，转化，加载(Sqoop,kettle即对数据进行处理，过滤掉不需要的数据)</p></li><li><p><input disabled="" type="checkbox"> ​                 数据分析：统计，建模，挖掘，（Hive,Spark,Flik即指标统计，根据需求算出结果，存储结果）</p></li><li><p><input disabled="" type="checkbox"> ​                 数据可视化(Superset,Echarts),将结果放入一个查询非常快的数据库，例如hbse,redis,MySQL</p></li><li><p><input disabled="" type="checkbox"> ​                 报告撰写(如图所示，那个数据最明显)</p></li><li><p>Linux文件系统的特点：</p></li></ul><p>​Linux文件系统没有盘符的概念，所以的文件入口是从根目录开始的，系统自带的文件不要修改和删除。</p><p>Linux命令：</p><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><blockquote><ul><li><strong>cd : change directory,切换目录</strong></li></ul></blockquote><p>​cd .. ：返回上一级目录</p><p>​        cd -  :在临近的2个目录间切换</p><p>​cd :  返回登陆者的<strong>家目录</strong></p><p>​cd &#x2F; :切换到根目录</p><p>​     ~:&#x2F;root</p><p>​cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果          是root用户登陆的就回到&#x2F;root</p><h3 id="mkdir-make-directory-创建文件夹"><a href="#mkdir-make-directory-创建文件夹" class="headerlink" title="mkdir:  make directory,创建文件夹"></a><strong>mkdir:  make directory,创建文件夹</strong></h3><p>​ mkdir test1:没有层级的创建文件夹test1,当前目录下创建。</p><p>​                 mkdir -p aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p><h3 id="rm-remove的缩写，默认删除文件-，可以删除文件夹-d"><a href="#rm-remove的缩写，默认删除文件-，可以删除文件夹-d" class="headerlink" title="rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)"></a><strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></h3><p>​ rm a.txt : 删除文件会提示，以y开头都会被删除，其他都不会被删除。</p><p>​ -r: 递归,先进入最里的一层，然后从里向外删除</p><p>​rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p><p>​         -f: force,强制</p><p>​rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p><p>​rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示。</p><h3 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch: 创建空文件"></a><strong>touch: 创建空文件</strong></h3><p>​ touch a.txt  #在当前目录创建a.txt文件</p><p>​ touch &#x2F;root&#x2F;a.txt  #在&#x2F;root目录创建a.txt文件</p><h3 id="mv-文件，目录的移动和重命名"><a href="#mv-文件，目录的移动和重命名" class="headerlink" title="mv:文件，目录的移动和重命名"></a>mv:文件，目录的移动和重命名</h3><p>​<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p><p>​ mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加0)。</p><p>​ mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p><p>​                     当test2不存在：重命名</p><p>​ mv a.txt  test1 :移动文件到指定目录test1下面a</p><h3 id="cat-查看-整个文件-内容"><a href="#cat-查看-整个文件-内容" class="headerlink" title="cat : 查看 整个文件 内容"></a><strong>cat : 查看 整个<em>文件</em> 内容</strong></h3><p>​                  cat  a.txt :查看文件内容</p><h3 id="more-查看文件部分内容"><a href="#more-查看文件部分内容" class="headerlink" title="more :查看文件部分内容"></a><strong>more :查看文件部分内容</strong></h3><p>​ enter：多查一行数据</p><p>​ 空 格 ： 查看新的一屏幕数据</p><h3 id="cp-copy-复制粘贴"><a href="#cp-copy-复制粘贴" class="headerlink" title="cp : copy , 复制粘贴"></a><strong>cp : copy , 复制粘贴</strong></h3><p>​ cp a.txt  b.txt  </p><p>​  a.txt 内容存在  b.txt 内容不存在—复制a内容到b里。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp01.png"></p><p>​ a.txt 内容存在  b.txt内容存在———将a的内容覆盖到b里。</p><p>​                 cp test1 test2 -r</p><p>​当test2文件夹不存在：将test1下面的内容复制一份，写到test2目录下。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-9.png"></p><p>​当test2文件夹存在：将test1整个复制一份到test2目录中</p><p>​        test1内容存在    test2内容为空。—复制test1整体复制到test2中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-32.png"></p><p>​         test1内容存在    test2内容存在. —-将test1整体到test2目录中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-6.png"></p><p>​cp a.txt test2 :复制a.txt并写入到 test2 目录中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-24.png"></p><h3 id="ps-process-status-进程状态"><a href="#ps-process-status-进程状态" class="headerlink" title="ps: process status ,进程状态"></a><strong>ps: process status ,进程状态</strong></h3><p>​ps -ef : 查看当前正在运行的进程</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/ps-1.png"></p><p>​UID：进程是谁执行的</p><p>​PID:   进程的ID</p><p>​PPID：进程的父ID</p><h3 id="kill-终止"><a href="#kill-终止" class="headerlink" title="kill : 终止"></a><strong>kill : 终止</strong></h3><p>​kill 进程ID，终止进程，有时候不一定会终止进程。</p><p>​kill -9 进程ID,一定能杀死进程。（9：kill,双杀）</p><p>​kill -1:查看kill命令的所以信号。</p><h3 id="ifconfig-查看虚拟机的网络配置信息"><a href="#ifconfig-查看虚拟机的网络配置信息" class="headerlink" title="ifconfig: 查看虚拟机的网络配置信息"></a><strong>ifconfig: 查看虚拟机的网络配置信息</strong></h3><p>​Windows：ipconfig</p><p>​<strong>Linux命令(重点)</strong></p><p>​命令格式： command -options paramaters</p><p>​绝对路径：从根目录开始。</p><p>​相对路径：从当前目录开始。</p><h3 id="ls-list简写，列出当前目录下的内容-文件-文件夹-。"><a href="#ls-list简写，列出当前目录下的内容-文件-文件夹-。" class="headerlink" title="ls : list简写，列出当前目录下的内容(文件+文件夹)。"></a><strong>ls : list简写，列出当前目录下的内容(文件+文件夹)。</strong></h3><p>​ls &#x2F;root:查看指定目录&#x2F;root里面的内容。</p><p>​<strong>-options:</strong></p><p>​ ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all</p><p>​ ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(简写ll)。</p><p>​ ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p><h3 id="clear-命令用来清屏，可以使用ctrl-l来替换。"><a href="#clear-命令用来清屏，可以使用ctrl-l来替换。" class="headerlink" title="clear:命令用来清屏，可以使用ctrl+l来替换。"></a><strong>clear:命令用来清屏，可以使用ctrl+l来替换</strong>。</h3><h3 id="pwd-显示当前目录的绝对路径。"><a href="#pwd-显示当前目录的绝对路径。" class="headerlink" title="pwd:显示当前目录的绝对路径。"></a><strong>pwd:显示当前目录的绝对路径</strong>。</h3><h3 id="reboot-重启命令"><a href="#reboot-重启命令" class="headerlink" title="reboot:重启命令"></a><strong>reboot:重启命令</strong></h3><p>shutdown -h now:立刻关机(断电关机)</p><p>**halt:立刻关机(不断电关机)**<strong>cd: change directory,切换目录</strong></p><p>​cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果          是root用户登陆的就回到&#x2F;root</p><h3 id="hostname-查看主机名称"><a href="#hostname-查看主机名称" class="headerlink" title="hostname: 查看主机名称"></a><strong>hostname: 查看主机名称</strong></h3><h3 id="tar：压缩，打包，解包，解压缩命令"><a href="#tar：压缩，打包，解包，解压缩命令" class="headerlink" title="tar：压缩，打包，解包，解压缩命令"></a><strong>tar：压缩，打包，解包，解压缩命令</strong></h3><p>​options:</p><p>​c:打包</p><p>​v:看过程</p><p>​f:打包成那个文件</p><p>​z:打包成压缩格式的文件.gzip格式</p><p>​x:解包，解压缩</p><p>​-C：指定文件的解压位置</p><p>打包：是指将一大堆文件或目录变成一个总的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf test1.tar  test1</span><br></pre></td></tr></table></figure><p>打压缩包：则是将一个大文件通过压缩算法变成一个小文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf test1.tar.gz test1</span><br></pre></td></tr></table></figure><p>解包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf test1.tar -c /big59/test3</span><br></pre></td></tr></table></figure><p>解压缩包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf test1.tar.gz -C /big59/test2</span><br></pre></td></tr></table></figure><h3 id="grep-全文检索"><a href="#grep-全文检索" class="headerlink" title="grep:全文检索"></a><strong>grep:全文检索</strong></h3><p>​grep hadoop a.txt: 在a.txt里面查找包含hadoop的内容。</p><p>​grep -ir hadoop &#x2F;root:不区分大小写，</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/gerp-1.png"></p><p><strong>| :管道，将上一个命令的输出当成下一个命令的输入</strong></p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/%E7%AE%A1%E9%81%93.png"></p><h3 id="which-查看系统命令"><a href="#which-查看系统命令" class="headerlink" title="which-查看系统命令"></a><strong>which-查看系统命令</strong></h3><p>​ 查看执行命令的位置</p><p>​ <img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/which.png"></p><h3 id="vi-vi编辑器"><a href="#vi-vi编辑器" class="headerlink" title="vi : vi编辑器"></a><strong>vi : vi编辑器</strong></h3><p>​命令模式：vi  a.txt回车进入命令模式。</p><p>​编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p><p>​保持退出： 输入：进入末行模式，再输入wq保存退出。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/vi%E7%BC%96%E8%BE%91.png"></p><h3 id="用户创建命令：useradd-root超级管理员才可以添加用户"><a href="#用户创建命令：useradd-root超级管理员才可以添加用户" class="headerlink" title="用户创建命令：useradd(root超级管理员才可以添加用户)"></a><strong>用户创建命令：useradd</strong>(root超级管理员才可以添加用户)</h3><p>​添加用户：useradd  用户名</p><p>​设置密码：passwd   用户名</p><p>​删除用户：userdel -r 用户名</p><p>​切换用户：su  用户名</p><h3 id="chmod-权限管理"><a href="#chmod-权限管理" class="headerlink" title="chmod:权限管理"></a><strong>chmod:权限管理</strong></h3><p>​角色：</p><p>​创建者：一个文件或者文件夹的创建者(拥有者)，userid简称uid.</p><p>​用户组：针对文件或者文件夹而言，默认与创建者同名，groupid简称gid&#x2F;g.</p><p>​其他用户：创建者之外的用户，就是其他用户，other简称o.</p><p>​权限：</p><p>​第1列：文件属性(  - :文件，d:文件夹)</p><p>​第2-4列：创建者对文件或者文件夹的权限</p><p>​第5-7列：用户组的权限</p><p>​第8-10列：其他用户的权限</p><p>​权限的解读：</p><p>​r :read ，读权限，r   4</p><p>​w :write，写权限，w 2</p><p>​x ：执行权限，x     1</p><p>​权限操作：(文件和文件夹都可以进行权限操作)</p><p>​chmod o**+**w a.txt:对其他用户添加一个写权限。</p><p>​chmod g**-**r a.txt:给用户组删除读权限。</p><p>​chmod o**&#x3D;**wx a.txt的其他用户赋予写和执行权限</p><p>​数字权限的操作：</p><p>​chmod 777 a.txt:给所以角色赋予所以权限</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;大数据基础-Linux命令&lt;/center&gt;</summary>
    
    
    
    <category term="Linux命令" scheme="https://readmengk90.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="大数据" scheme="https://readmengk90.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>endNode的使用</title>
    <link href="https://readmengk90.github.io/2024/09/08/%E5%B7%A5%E5%85%B7_endNode%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://readmengk90.github.io/2024/09/08/%E5%B7%A5%E5%85%B7_endNode%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-09-08T07:41:01.862Z</published>
    <updated>2024-09-10T13:57:00.063Z</updated>
    
    <content type="html"><![CDATA[<p>1.endnode的下载和安装：</p><p>​<a href="https://mp.weixin.qq.com/s/dVgeXShxAsyfyVfzJkREMw">EndNote21.4安装教程 (qq.com)</a></p><p>2.导入文献</p><p>​2.1数据库导入</p><p>​<strong>PubMed</strong>(<a href="https://pubmed.ncbi.nlm.nih.gov/">PubMed (nih.gov)</a>)是文摘型数据库，也就意味着PubMed的强项是<strong>检索</strong>，这与全文数据库是不同的，点击create file会生成一个nbib文件。</p><p>​nbib文件导入endNode的方式：</p><p>​(1):直接双击文件，文件就会自动导入到endNode.</p><p>​                (2):通过文献过滤器导入，File-&gt;Import-&gt;File(&#x2F;import⬇),选择导入文件，导入选择选择其他过滤器-&gt;PubMed(NLM).</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/pubmed%E4%BD%BF%E7%94%A8.png" alt=" "></p><p>​<strong>web of science</strong>(<a href="https://webofscience.clarivate.cn/wos/alldb/basic-search">Document Search - All Databases (clarivate.cn)</a>),输入关键词点击搜索，勾选你需要的文献，点击导出(export)–EndNode desktop,生成一个ciw文件，双击即可导入文件。</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/web-of-science.png"></p><p>​<strong>Google Scholar学术导入</strong>，在谷歌学术进行检索，点击引用–EndNote格式–会下载一个enw文件，双击即可导入(选择….XML这个选项)，批量导出需要先收藏–我的图书馆–全部导出。</p><p>​<strong>知网导入</strong>，勾选文献–导出与分析–EndNote格式–点击导出–生成TXT文件；点击Import⬇.</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%9F%A5%E7%BD%91.png"></p><p>​    《《<em>文献标题和期刊在一起的问题》》：</em>这是EndNote Import过滤器的问题，方法为Edit–Import Filters–Open Filter Manager–找到EndNote Import这个过滤器–点击编辑Edit–左侧的Templates–文件类型选择Journal Article–将Journal一行前的标签%B改成%J–关闭–是–重命名–重新导入–过滤器选择刚才修改的。</p><p>​    《《<em>补充缺失信息</em>》》：因为某些原因，可能有些文件会缺失一些信息，按CTRL批量选择缺失信息的文献—鼠标右键—Find Reference Updates—Update All Files–Y.(只对英文文献有效，中文缺失双击手动添加)。</p><p>​<strong>PDF导入</strong>，通过识别PDF的DOI号，从而提取文献信息，不建议导入中文文献论文，从中文数据库中直接导入。</p><p>​    《《PDF导入英文文献信息缺失》》：主要是没检测到DOI号，方法：复制文件标题到浏览器搜索—复制DOI—-双击文献下拉到<strong>DOI</strong>–左上角查找全文更新—Update  Files</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/PDF.png"></p><p>​    《《导入文件夹所有PDF》》:File–import–文件夹</p><p>3.管理文献</p><p>​<strong>3.1 分组</strong>    对导入的文件可以对其进行分组，只能有二级分类；在我的分组里点击–创建组，然后将同类型文献批量拖拽进组内.</p><p>​**3.2 文献去重 ** 从同一个研究主题，往往会从不同数据库导入文献，会涉及到文献重复，点击All Reference—Reference(导航栏)—Find Duplicates—cancle–在左侧会新增一个重复文献文件夹—里面的文献数量就代表重复数量2倍，有灰色阴影的文献就是重复的文献—-鼠标右键单击Move Reference to Trash</p><p>​<strong>3.3 文献排序</strong>  </p><p>​查找全文：全选文献—右键查找全文–查找全文–出现回形针表示能找到</p><p>​查找全文对于中文文献是不适用的，对于没有中文文献和没有查找到全文的英文文献，可以先将PDF下载到本地，这篇文献就会被链接到一个全文，该PDF文件会被自动存储到数据库文件夹中(删除后无影响)</p><p>​<strong>3.4 对文献做笔记</strong></p><p>​1,2步骤后 然后调出reserch Notes，保存。</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%AC%94%E8%AE%B0.png"></p><p>4.引用文献</p><p>​<strong>预览样式</strong>：在引用文献前，可以在EndNote预览参考文献样式</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%88%E6%A0%B7%E5%BC%8F.png"></p><p>​<strong>添加样式：</strong><a href="https://endnote.com/downloads/styles/?wpv_aux_current_post_id=12829&wpv_view_count=12764-TCPID12829">Output styles - EndNote</a></p><p>​下载后粘贴到endnote下载位置的Style中</p><p>​<strong>引入到word中</strong>：在word中EndNote(导航栏)—选择好style—在EndNote里选择好要导入的文件—在word里Insert Citation—Insert  selected Citation.</p><p>​<strong>去除参考文献域代码</strong>：域代码去除就无法恢复（Ctrl+A–Ctrl+Shift+F9）</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%9F%9F%E4%BB%A3%E7%A0%81.png"></p><p>​<strong>更改作者数：</strong></p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B0.png"></p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B02.png"></p><p>​<strong>引用网页文献的问题</strong>：</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%BD%91%E9%A1%B5%E6%96%87%E7%8C%AE.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;科研软件&lt;/center&gt;</summary>
    
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/categories/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/tags/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>可行性研究</title>
    <link href="https://readmengk90.github.io/2024/03/02/02%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>https://readmengk90.github.io/2024/03/02/02%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</id>
    <published>2024-03-02T09:40:25.581Z</published>
    <updated>2024-03-02T10:26:14.366Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">考试内容</th><th align="left">考试要求</th></tr></thead><tbody><tr><td align="left">1. 可行性研究的任务</td><td align="left">1.了解可行性研究的任务</td></tr><tr><td align="left">2. 数据流图和数据字典</td><td align="left"></td></tr><tr><td align="left">3.成本效益分析</td><td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td></tr><tr><td align="left">4. 需求分析的任务</td><td align="left">4.了解需求分析的任务</td></tr><tr><td align="left">5.实体联系图，状态转换图，层次方框图，IPO图</td><td align="left">掌握可行性研究和需求分析的建模方法：数据流图，数据字典，实体联系图，状态转换图，层次方框图，IPO图</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;可行性研究&lt;/center&gt;</summary>
    
    
    
    <category term="软件工程" scheme="https://readmengk90.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="考研复试" scheme="https://readmengk90.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件危机/软件工程/软件生命周期/软件过程</title>
    <link href="https://readmengk90.github.io/2024/02/27/01%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/"/>
    <id>https://readmengk90.github.io/2024/02/27/01%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/</id>
    <published>2024-02-27T02:21:01.665Z</published>
    <updated>2024-03-02T09:36:19.820Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">考试内容</th><th align="left">考试要求</th></tr></thead><tbody><tr><td align="left">1. 软件和软件工程的含义、软件工程的基本原理</td><td align="left">1.理解软件和软件工程的含义、软件工程的基本原理。</td></tr><tr><td align="left">2. 软件危机的原因、表现和消除途径。</td><td align="left">2.理解产生软件危机的原因和消除软件危机的途径。</td></tr><tr><td align="left">3. 软件生命周期各个阶段的基本任务。</td><td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td></tr><tr><td align="left">4. 软件生命周期模型。</td><td align="left">4.了解各种软件生命周期模型的优缺点和适用场合：瀑布模型、增量模型、快速原型模型、螺旋模型。</td></tr></tbody></table><p><strong>软件定义</strong></p><p>程序、数据及相关文档的完整集合。其中，程序是能够完成预定功能和性能的可执行的指令序列；数据是使程序能够适当地处理信息的数据结构；文档是开发、使用和维护程序所需要的图文资料。</p><p><strong>软件工程定义</strong></p><p>1）把系统的、规范的、可度量的途经用于软件开发、运行和维护过程，也就是把工程应用于软件；</p><p>2）研究1）中提到的途径</p><p><strong>软件危机：</strong></p><p>​定义：在计算机软件的<strong>开发</strong>和<strong>维护</strong>过程中所遇到的一系列严重问题。</p><p>​范围： 1.如何维护数量不断膨胀的已有软件。</p><p>​     2.如何开发软件，以满足对软件日益增长的需求。</p><p>​        典型表现：1.对软件成本和开发进度的估计不准确。</p><p>​   2.用户对“已完成的”软件系统不满意的现象经常发生。</p><p>​   3.软件产品质量往往靠不住</p><p>​   4.软件常常是不可维护的</p><p>​   5.软件通常没有适当的文档资料</p><p>​           6.软件成本在计算机系统总成本中所占比例逐年上升。</p><p>​   7.软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</p><p><strong>产生的原因</strong>：</p><table><thead><tr><th>与软件本身的特点有关(客观)</th><th>与软件本身的特点无关(主观)</th></tr></thead><tbody><tr><td>缺乏可见性，进展较难衡量，软件质量较难评价(用户与产品之间的矛盾)</td><td>软件开发与维护的方法不准确，即采用了错误的方法和技术。</td></tr><tr><td>不会用坏，难维护</td><td>忽视软件需求分析的重要性</td></tr><tr><td>复杂性随规模的增加呈指数上升</td><td>轻视软件维护</td></tr></tbody></table><p><strong>消除途径</strong>：</p><p>​1.对计算机软件有一个正确的认识(软件是程序，数据，及相关文档的完整集合)</p><p>​2.软件是一个工程项目(软件开发是一种组织良好，管理严密，各类人员协同配合，共同完成的工程项目)</p><p>​3.推广使用成功的技术和方法，探索更有效地技术和方法。</p><p>​4.开发和使用更好的软件工具 </p><p>**软件工程( Software Engineering)**：</p><p>定义：是指导计算机软件开发和维护的一门工程学科，采用工程的概念，原理，技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它。</p><p>方法学：通常把软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也称为范型。</p><p>软件工程方法学包含3要素：方法(回答“怎么做”的问题)</p><p>​工具(软件工程支撑环境)</p><p>​过程(任务框架)         </p><p><strong>软件生命周期</strong>：                                     </p><p>​定义：一个软件从提出开发要求开始直到该软件报废为止得这个时期。</p><p>​阶段：软件定义-问题定义，可行性研究，需求分析</p><p>​   软件开发-总体设计，详细设计，实现</p><p>​   软件维护-软件维护</p><p><strong>软件周期的各个时期及其阶段的基本作用</strong></p><p>软件生命周期分为3个时期：软件定义、软件开发、运行维护。</p><p>软件定义分为3个阶段：问题定义、可行性研究和需求分析。</p><p>软件开发分为4个阶段：总体设计，详细设计，编码和单元测试，综合测试。</p><p>其中，总体设计和详细设计又称为系统设计，编码和单元测试，综合测试又称为系统实现。</p><p><strong>软件过程：</strong></p><p>​瀑布模型：必须等前一阶段得工作完成之后，才能开始后一阶段的工作</p><p>​    优点：可强迫开发人员采用规范的方法；严格地规定了每个阶段必须提交的文档；要求每个阶段交出的所有产品都必须经过质量保证小组的仔细验证。</p><p>​    缺点：由于瀑布模型完全依赖于书面的规格说明，很可能导致最终开发出的软件产品不能真正满足用户的需求</p><p>​快速原型模型：快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集</p><p>​    软件设计人员快速建立一个能反映用户主要需求的原型系统，让用户试用后提出许多修改意见，开发人员按照用户的意    见快速修改原型系统，用户再次使用，反复执行上述操作，直到用户任务符合他们的需求，开发人员据此书写规格说明文档。</p><p>​增量模型：把软件产品作为一系列的增量构件来设计，每个构件由多个相互作用的模块构成，并且能够完成特定的功能。</p><p>​ 优点：能在较短时间内向用户提交可完成部分工作的产品；</p><p>​    逐步增加产品功能可以使用户有较宽裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的    冲击；</p><p>​螺旋模型：使用原型及其他方法来尽量降低风险，可以理解为每个阶段之前都增加了风险分析过程的快速原型模型。</p><p>​    优点：1.对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标，有助       于把软件质量作为软件开发的一个重要目标；</p><p>​2.减少了过多测试或测试不足所带来的风险；</p><p>​3.维护和开发之间没有本质的区别；</p><p>​    缺点：风险驱动型的特点会由于风险评估不准确给项目带来的风险。</p><p>​喷泉模型：是一种以用户需求为动力，以对象为驱动的模型，主要用于描述面向对象的软件开发过程。</p><p>​   体现了面向对象软件开发过程迭代和无缝的特性</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;软件工程学概论&lt;/center&gt;</summary>
    
    
    
    <category term="软件工程" scheme="https://readmengk90.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="考研复试" scheme="https://readmengk90.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GUI图形化用户界面</title>
    <link href="https://readmengk90.github.io/2024/02/25/java%E5%9F%BA%E7%A1%80-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
    <id>https://readmengk90.github.io/2024/02/25/java%E5%9F%BA%E7%A1%80-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</id>
    <published>2024-02-25T15:44:18.430Z</published>
    <updated>2024-02-27T02:07:59.913Z</updated>
    
    <content type="html"><![CDATA[<p>GUI</p><p>​JFrame:最外层的窗体</p><p>​JMenuBar:最上层的菜单</p><p>​JLabel:管理文字和图片的容器</p><p>​IMageIcon</p><p>​取消隐藏容器中居中的默认方式：setLayout(null)</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;GUI&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
</feed>
