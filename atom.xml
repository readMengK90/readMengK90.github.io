<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东瓶西镜</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="https://readmengk90.github.io/atom.xml" rel="self"/>
  
  <link href="https://readmengk90.github.io/"/>
  <updated>2024-09-23T04:04:06.368Z</updated>
  <id>https://readmengk90.github.io/</id>
  
  <author>
    <name>Amber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux从入门到精通</title>
    <link href="https://readmengk90.github.io/2024/09/20/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/"/>
    <id>https://readmengk90.github.io/2024/09/20/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/</id>
    <published>2024-09-20T00:11:45.071Z</published>
    <updated>2024-09-23T04:04:06.368Z</updated>
    
    <content type="html"><![CDATA[<p><strong>带着枷锁的舞者，枷锁一定是其成功的工具</strong></p><p>课程设计：</p><h3 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1.初识Linux"></a>1.初识Linux</h3><h4 id="1-1-操作系统概述"><a href="#1-1-操作系统概述" class="headerlink" title="1.1 操作系统概述"></a>1.1 操作系统概述</h4><p>​计算机由硬件和软件组成，操作系统属于软件，主要作用就是协助用户<strong>调度</strong>硬件工作，充当用户和计算机硬件的桥梁，常见的操作系统有MacOS,Linux,Windows(PC端)，安卓，iponeOS,HarmonyOS(移动端).</p><h4 id="1-2-Linux内核"><a href="#1-2-Linux内核" class="headerlink" title="1.2 Linux内核"></a>1.2 Linux内核</h4><p>​Linux是<strong>服务器操作系统</strong>领域的核心系统。</p><p>​Linux系统&#x3D;Linux系统内核+系统级应用程序</p><p>​内核提供系统最核心的功能：调度 CPU,内存,文件系统，网络通讯，IO等。</p><p>​系统级应用程序：供用户快速上手操作系统的出厂自带程序。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/Linux%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F.png"></p><p>​                Linux发行版:提供了内核+系统及应用程序的完成封装，市面上Centos,ubuntu是常使用的。</p><h4 id="1-3-了解虚拟机"><a href="#1-3-了解虚拟机" class="headerlink" title="1.3 了解虚拟机"></a>1.3 了解虚拟机</h4><p>​如何获得可用的Linux操作系统环境–借助虚拟机。</p><p>​虚拟机：通过虚拟化的软件得到虚拟化的硬件，然后给虚拟的硬件安装真实的操作系统(centos7),得到一台没有实体的完整电脑。</p><h4 id="1-4-如何构建虚拟机环境"><a href="#1-4-如何构建虚拟机环境" class="headerlink" title="1.4 如何构建虚拟机环境"></a>1.4 如何构建虚拟机环境</h4><p>​通过<strong>虚拟化的软件</strong>(VMware)来提供虚拟硬件的能力，然后在硬件上安装操作系统。</p><p>​VMware WorkStation安装和配置 </p><p>​1.软件安装：无脑下一步</p><p>​2.检测网络适配器</p><p>​通用的更改适配器打开方式: win+R输入ncpa.cpl，查看VM1和VM8是否存在，如果不存在建议删除VM,重启后重新安装。</p><h4 id="1-5-在VMware上安装Linux虚拟机-Windows-图形化"><a href="#1-5-在VMware上安装Linux虚拟机-Windows-图形化" class="headerlink" title="1.5 在VMware上安装Linux虚拟机(Windows)-图形化"></a>1.5 在VMware上安装Linux虚拟机(Windows)-图形化</h4><p>​下载DVD-1810.iso</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://vault.centos.org/7.6.1810/isos/x86_64/</span><br></pre></td></tr></table></figure><p>​打开VM,点击创建新的虚拟机-打开向导-典型-安装程序光盘映像文件浏览选择刚下载好的文件-配置账户名,用户名,密码-更改虚拟 机的名称和位置(可选)-40GB-自定义硬件(可选)-<strong>勾选</strong>后点击完成。</p><p>​漫长的等待………………………</p><p>​输入用户名和密码，就可以体验Linux系统了</p><h4 id="1-6-远程连接Linux系统"><a href="#1-6-远程连接Linux系统" class="headerlink" title="1.6 远程连接Linux系统"></a>1.6 远程连接Linux系统</h4><p>​Linux系统中多数情况下使用的命令行，因为Linux系统图形化界面不好用，不稳定。</p><p>​使用第三方软件(finalShell)操作Linux的必要性：在VM中操作Linux命令行不太方便，内容的复制粘贴，文件的上传下载跨越VM都不太方便</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exe</span><br></pre></td></tr></table></figure><p>​Linux桌面进入命令行：桌面右键点击：open in terminal</p><p>​查询Linux系统的IP地址：当前登陆用户~下输入ifconfig,ens3里的inet就是IP地址</p><p>​打开FinalShell–左上角文件夹–白色+号–ssh连接(Linux)–主机：linux的IP地址–双击连接管理器的链接–接受并保存–连接成功。</p><p>​<strong>注意</strong>：Linux虚拟机如果重启，有可能IP地址发生改变，如果改变需要在FinalShell中修该连接的地址。</p><p>​固定IP地址的方法：</p><h4 id="1-7-使用WSL获得Ubuntu系统环境-拓展"><a href="#1-7-使用WSL获得Ubuntu系统环境-拓展" class="headerlink" title="1.7 使用WSL获得Ubuntu系统环境(拓展)"></a>1.7 使用WSL获得Ubuntu系统环境(拓展)</h4><p>​WSL是Window10系统的新特性，可以以非常轻量化的方式，得到Linux系统环境，这种环境是完全直连我们计算机硬件的，并不需要通过虚拟机去虚拟硬件，不会影响Window系统本身的运行。</p><p>​WSL的部署：win键-右键-应用和功能-程序和功能-启用或关闭Windows功能-勾选适用于Linux的Windows子系统-立即重启自动。</p><p>​安装WSL的操作系统：搜索Miscrosoft Store-搜索ubuntu–下载第一个-获取安装-打开-设置用户名和密码。</p><p>​安装Windows Terminal软件：Ubuntu自带的终端窗口不太好用，可以直接在应用商店下载Terminal，</p><h4 id="1-8-虚拟机快照的制作和还原-Windows"><a href="#1-8-虚拟机快照的制作和还原-Windows" class="headerlink" title="1.8 虚拟机快照的制作和还原(Windows)"></a>1.8 虚拟机快照的制作和还原(Windows)</h4><p>​功能：为了避免由于系统损坏重装Linux操作系统的麻烦，可以通过快照功能将当前虚拟机的状态保存下来，在以后可以通过快照恢复虚拟机到保存的状态。</p><p>​制作：(确保虚拟机关机)右键虚拟机-快照-快照管理器-拍摄快照</p><p>​还原：测试快照-转到-是</p><h3 id="2-Linux基础命令"><a href="#2-Linux基础命令" class="headerlink" title="2.Linux基础命令"></a>2.Linux基础命令</h3><h4 id="2-1-Linux的目录结构"><a href="#2-1-Linux的目录结构" class="headerlink" title="2.1 Linux的目录结构"></a>2.1 Linux的目录结构</h4><p>​Linux没有盘符这个概念，只有一个根目录**&#x2F;<strong>，所以文件都在它下面，在Linux系统中，路径直接的层级关系用 &#x2F; 表示(</strong>&#x2F;**usr&#x2F;local&#x2F;hello.txt)。</p><h4 id="2-2-Linux的命令"><a href="#2-2-Linux的命令" class="headerlink" title="2.2 Linux的命令"></a>2.2 Linux的命令</h4><p>​命令的通用格式： command [options] [parameter]</p><h5 id="2-2-1-ls-列出内容"><a href="#2-2-1-ls-列出内容" class="headerlink" title="2.2.1 ls 列出内容"></a>2.2.1 ls 列出内容</h5><p>​<strong>ls : list简写，列出当前工作目录下&#x2F;home的内容(文件+文件夹)。</strong></p><pre><code>         ls /root:查看指定目录/root里面的内容。</code></pre><p>​ <strong>-options:</strong></p><pre><code>         ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all</code></pre><p>​                         ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(<strong>简写ll</strong>)。</p><p>​                         ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p><h5 id="2-22-cd-切换目录"><a href="#2-22-cd-切换目录" class="headerlink" title="2.22 cd 切换目录"></a>2.22 cd 切换目录</h5><p>​ cd : change directory,切换目录**</p><pre><code>         cd .. ：返回上一级目录          cd - :在临近的2个目录间切换          cd . : 返回登陆者的当前目录          cd / :切换到根目录</code></pre><p>​ cd或cd ~: 到达家目录</p><pre><code>         cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到/home/itcast,如果 是root用户登陆的就回到/root</code></pre><h5 id="2-23-pwd"><a href="#2-23-pwd" class="headerlink" title="2.23  pwd"></a>2.23  pwd</h5><p>​pwd(print work directory)显示当前所在的工作目录的<strong>绝对路径</strong>。</p><h5 id="2-24-相对-绝对路径"><a href="#2-24-相对-绝对路径" class="headerlink" title="2.24 相对&#x2F;绝对路径"></a>2.24 相对&#x2F;绝对路径</h5><p>​ 绝对路径：从根目录&#x2F;开始。</p><pre><code>         相对路径：从当前目录开始，不需要以/开头。</code></pre><h5 id="2-25-mkdir"><a href="#2-25-mkdir" class="headerlink" title="2.25 mkdir"></a>2.25 mkdir</h5><p>​<strong>mkdir: make directory,创建文件夹</strong></p><pre><code>            mkdir test1:没有层级的创建文件夹test1,当前目录下创建。</code></pre><p>​                        mkdir [<strong>-p</strong> ]  aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p><h5 id="2-26-touch"><a href="#2-26-touch" class="headerlink" title="2.26 touch"></a>2.26 touch</h5><p>​<strong>touch: 创建空文件</strong></p><pre><code>         touch a.txt #在当前目录创建a.txt文件          touch /root/a.txt #在/root目录创建a.txt文件</code></pre><h5 id="2-27-cat"><a href="#2-27-cat" class="headerlink" title="2.27 cat"></a>2.27 cat</h5><p>​cat Linux路径</p><p>​<strong>cat : 查看 整个文件内容</strong></p><p>​cat a.txt :查看文件全部内容</p><h5 id="2-28-more"><a href="#2-28-more" class="headerlink" title="2.28 more"></a>2.28 more</h5><p>​more Linux路径</p><p>​<strong>more :查看文件部分内容</strong></p><pre><code>         enter：多查一行数据          空 格 ： 查看新的一屏幕数据，翻页</code></pre><p>​ q：退出查看 </p><h5 id="2-29-cp-copy-复制粘贴"><a href="#2-29-cp-copy-复制粘贴" class="headerlink" title="2.29 cp  copy , 复制粘贴"></a>2.29 cp  <strong>copy , 复制粘贴</strong></h5><p>​语法：cp [-r]  参数1 参数2</p><p>​<strong>针对文件</strong></p><p>​cp a.txt b.txt</p><pre><code>            a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。</code></pre><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-1.png"></p><p>​a.txt 内容存在 b.txt 文件存在内容不存在—复制a内容到b里。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-2.png"></p><p>​【无论有没有创建后一个空文件，都会把前一个文件的内容复制过去】</p><p>​a.txt 内容存在 b.txt<strong>内容存在</strong>———将a的内容覆盖到b里。</p><p>​(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p><p>​<strong>针对文件夹</strong></p><p>​【 当test2文件夹存在：将test1整个复制一份到test2目录中】</p><p>​ cp test1 test2 -r</p><p>​当test2文件夹和内容不存在：将test1下面的内容复制一份，写到test2目录下。<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-3.png"></p><p>​test1内容存在 test2内容存在. —-将test1目录整体复制到test2目录中<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-4.png"></p><p>​<strong>针对文件文件夹</strong></p><p>​cp a.txt test2 :复制a.txt并写入到 test2 目录中<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/cpp-5.png"></p><h5 id="2-30-mv移动文件或者文件夹"><a href="#2-30-mv移动文件或者文件夹" class="headerlink" title="2.30 mv移动文件或者文件夹"></a>2.30 mv移动文件或者文件夹</h5><p>​mv:文件,目录的移动和重命名</p><p>​<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p><p>​ mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加)。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-001.png"></p><p>​ mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-002.png"></p><p>​                     当test2不存在：重命名</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-003.png"></p><p>​ mv a.txt  test1 :移动文件到指定目录test1下面</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/mv-004.png"></p><h5 id="2-31-rm-用于文件和文件夹的删除"><a href="#2-31-rm-用于文件和文件夹的删除" class="headerlink" title="2.31 rm 用于文件和文件夹的删除"></a>2.31 rm 用于文件和文件夹的删除</h5><p>​<strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></p><p>​  rm a.txt : 删除文件会提示，输入以y开头都会被删除，其他都不会被删除。</p><p>​ -r: 递归,先进入最里的一层，然后从里向外删除</p><p>​rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p><p>​         -f: force,强制</p><p>​rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p><p>​rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示</p><h5 id="2-32-which和find查找命令"><a href="#2-32-which和find查找命令" class="headerlink" title="2.32  which和find查找命令"></a>2.32  which和find查找命令</h5><p>​which：通过which命令，查看所使用的一系列命令的程序文件放在那里(which  cd)。</p><p>​find: </p><p>​【按文件名查找文件语法】:<strong>find 起始路径  -name  “被查找文件名”</strong></p><p>​可以搭配通配符*进行模糊搜索</p><p>​【按文件大小查找文件语法】:<strong>find 起始路径 -size | -n[KMG]</strong></p><p>​示例：查找小于10KB的文件：find &#x2F; -size -10k</p><p>​   查找大于100MB的文件：find &#x2F; -size +100M</p><h5 id="2-33-grep-wc和管道"><a href="#2-33-grep-wc和管道" class="headerlink" title="2.33 grep ,wc和管道|"></a>2.33 grep ,wc和管道|</h5><p>​grep关键字过滤:通过grep命令，从文件中<strong>通过关键字过滤文件行</strong>。</p><p>​语法：grep [-n] 关键字 关键路径</p><p>​-n,可选项，表示在结果中显示匹配的行的行号</p><p>​ grep -ir hadoop &#x2F;root:不区分大小写。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/gerp001.png"></p><p>​wc:通过wc命令统计文件的行数，单词数量等</p><p>​语法：wc [-c -m -l -w ]  <strong>文件路径</strong>(输入)</p><p>​-c:统计bytes数量</p><p>​-m:统计字符数量</p><p>​-l:统计行数</p><p>​-w:统计单词数量</p><p>​管道符|：将管道符左边命令的结果，作为右边命令的输入</p><p>​管道符可以嵌套。</p><h5 id="2-34-echo-tail和重定向符"><a href="#2-34-echo-tail和重定向符" class="headerlink" title="2.34 echo,tail和重定向符"></a>2.34 echo,tail和重定向符</h5><p>​echo:在命令行输出指定内容，类似编程语言的print</p><p>​语法：echo  “输出的内容”&#x2F;输出的内容</p><p>​反引号’ ‘:被它包围的内容会被作为命令去执行而不是普通字符。</p><p>​重定向符：</p><p>​&gt;:将左侧命令的结果，<strong>覆盖</strong>写入到符号右侧指定的文件中</p><p>​&gt;&gt;:将左侧命令的结果，<strong>追加</strong>写入符号右侧指定的文件中</p><p>​tail:可以查看文件尾部内容，跟踪文件的最新更改**(从后向前看)**</p><p>​语法：tail [-f -num] Linux路径</p><p>​Linux路径，表示被跟踪的文件路径</p><p>​-f:表示持续跟踪，程序一直运行(ctrl+c终止运行)</p><p>​-num:表示，查看尾部多少行，不填写默认10行(-5)</p><h5 id="2-35-vi编辑器"><a href="#2-35-vi编辑器" class="headerlink" title="2.35 vi编辑器"></a>2.35 vi编辑器</h5><p>​命令模式：vi  a.txt回车进入命令模式。</p><p>​编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p><p>​保持退出： 输入：进入末行模式，再输入wq保存退出。</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/vi%E7%BC%96%E8%BE%91.png"></p><h3 id="3-Linux权限管控"><a href="#3-Linux权限管控" class="headerlink" title="3.Linux权限管控"></a>3.Linux权限管控</h3><h4 id="3-1-认知root用户"><a href="#3-1-认知root用户" class="headerlink" title="3.1 认知root用户"></a>3.1 认知root用户</h4><p>​ 在Linux系统中，root**(超级管理员)**拥有系统的最大操作权限，而普通用户在许多地方的权限是受限的。</p><p>​普通用户的权限，一般在器HOME目录内是不受限的，一旦出了HOME目录，大多数地方，普通用户仅有只读和执行的 权限，无修改权限。</p><p>​ 切换用户的命令语法：su [-]  [用户名]    （su:switch User）</p><p>​ - 符号是可选的，表示是否在切换用户后加载环境变量，建议带上</p><p>​ 用户名：表示要切换的用户，用户名也可以省略，省略表示切换到root。</p><p>​ 切换用户后，可以通过<strong>exit</strong>命令退回上一个用户，也可以使用快捷键：ctrl+d。</p><p>​  不建议长期使用root用户，避免错误操作带来的系统损伤，可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>​    <strong>语法：sudo  其他命令</strong></p><p>​     在其他命令之前，带上sudo,即可为这一条命令临时赋予root授权</p><p>​     但是并不是所以的用户，抖音权力使用sudo，我们需要为<strong>普通用户配置sudo认证。</strong></p><p>​     <strong>为普通用户配置sudo认证</strong></p><p>​      切换到root用户，执行visudo命令，会自动通过vi编辑器打开：&#x2F;etc&#x2F;sudoers</p><p>​在文件的最后添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">itheima   ALL=(ALL)         NOPASSWD: ALL</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">no pass word</span></span><br></pre></td></tr></table></figure><p>​最后通过wq保存</p><p>​切换回普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[itheima@localhost  ~]$ sudo  ls  /root</span><br><span class="line">anaconda-ks.cfg    original  -ks.cfg</span><br><span class="line">[itheima@localhost  ~]$ sudo  mkdir /test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行的命令均以root运行</span></span><br></pre></td></tr></table></figure><h4 id="3-2-用户-用户组"><a href="#3-2-用户-用户组" class="headerlink" title="3.2  用户 用户组"></a>3.2  用户 用户组</h4><p>​Linux系统中可以配置多个用户，也可以配置多个 用户组，并且用户可以加入多个用户组中。</p><p>​<strong>用户组管理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户组</span></span></span><br><span class="line">groupadd 用户组名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户组</span></span></span><br><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure><p>​<strong>用户管理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以下命令需root用户执行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#创建用户</span></span></span><br><span class="line">useradd [-g -d] 用户名</span><br><span class="line">-g:指定用户的组,不指定-g会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</span><br><span class="line">-d:指定用户HOME路径，不指定，HOME目录默认在：/home/用户名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#删除用户</span></span></span><br><span class="line">userdel [-r] 用户名</span><br><span class="line">-r:删除用户的HOME目录，不使用-r,删除用户时，HOME目录保留</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#查看用户所属组</span></span></span><br><span class="line">id [用户名]</span><br><span class="line">用户名：被查看的用户，如果不提供则查看自身</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#修改用户所属组</span></span></span><br><span class="line">usermod -aG 用户组 用户名,将指定用户加入指定用户组</span><br></pre></td></tr></table></figure><p>​getent: 查看当前系统中有哪些用户(语法：getent passwd)</p><p>​     查看当前系统中有那些用户组(语法：getent group)</p><h4 id="3-3-查看权限管控信息"><a href="#3-3-查看权限管控信息" class="headerlink" title="3.3 查看权限管控信息"></a>3.3 查看权限管控信息</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/user03.png"></p><table><thead><tr><th align="center">r w x</th><th align="center">针对文件</th><th align="center">针对文件夹</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">可以查看文件内容</td><td align="center">可以查看文件夹内容，如ls命令</td></tr><tr><td align="center">w</td><td align="center">可以修改此文件</td><td align="center">可以在文件夹内创建删除改名等操作</td></tr><tr><td align="center">x</td><td align="center">可以将文件作为程序执行</td><td align="center">可以更改工作目录到此文件夹，即cd进入</td></tr></tbody></table><h4 id="3-4-修改权限控制chmod"><a href="#3-4-修改权限控制chmod" class="headerlink" title="3.4 修改权限控制chmod"></a>3.4 修改权限控制chmod</h4><p>​使用chmod命令，修改文件，文件夹的权限信息。</p><p>​注意，只有文件，文件夹的所属用户或者root用户可以修改</p><p>​语法：chmod [-R]  权限  文件或文件夹</p><p>​    -R:对文件夹内的全部内容应用统一的操作</p><p>​示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=x hello.txt #将文件权限修改为：rwx r-x --x</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中：u表示user所属用户权限,g表示group组权限,o表示other其他权限</span></span><br><span class="line">chmod -R u=rwx,g=rx,o=x test #将文件夹test以及文件夹内前部内容权限设置为：rwxr-x--x</span><br></pre></td></tr></table></figure><p>​权限的数字符号：数字的细节如下：r记为5，w记为2，x记为1</p><p>​0：无任何权限，即—</p><p>​1：仅有x权限，即–x</p><p>​2:   仅有w权限，即-w-</p><p>​3:   有w和x权限，即-wx</p><p>​4:   仅有r权限， 即r–</p><p>​5:   仅有r和x权限，即r-x</p><p>​6:   仅有r和w权限，即rw-</p><p>​7:   有全部权限，即rwx</p><h4 id="3-5-修改权限控制chown"><a href="#3-5-修改权限控制chown" class="headerlink" title="3.5 修改权限控制chown"></a>3.5 修改权限控制chown</h4><p>​3.51 掌握使用chown修改<em>所属用户，用户组</em></p><p>​普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行。</p><p>​语法：chown [-R] [用户] [ : ] [用户组] 文件或文件夹。</p><p>​-R：同chmod,对文件夹内部内容应用相同规则</p><p>​用户：修改所属用户</p><p>​选项：用户组，修改所属用户组</p><p>​：用于分隔用户和用户组</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown root hello.txt,将hello.txt所属用户修改为root</span><br><span class="line">chown :root hello.txt,将hello.txt所属用户组修改为root</span><br><span class="line">chown root:itheima hello.txt,将hello.txt所属用户修改为root，用户组修改为itheima</span><br><span class="line">chown -R root test,将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</span><br></pre></td></tr></table></figure><h3 id="4-Linux实用操作"><a href="#4-Linux实用操作" class="headerlink" title="4.Linux实用操作"></a>4.Linux实用操作</h3><h4 id="4-1-Linux实用小技巧"><a href="#4-1-Linux实用小技巧" class="headerlink" title="4.1 Linux实用小技巧"></a>4.1 Linux实用小技巧</h4><p>​ctrl+c:强制停止</p><p>​ctrl+d:退出账户的登陆或者退出某些特定程序的专属页面。</p><p>​history：历史命令搜索</p><p>​ctrl+a,命令跳到开头</p><p>​ctrl+e,命令跳到结尾</p><p>​ctrl+键盘左键，向左跳一个单词</p><p>​ctrl+键盘右键，向右跳一个单词</p><p>​ctrl+l:可以清空终端内容，或者clear命令得到同样得效果</p><h4 id="4-2-软件安装"><a href="#4-2-软件安装" class="headerlink" title="4.2 软件安装"></a>4.2 软件安装</h4><p>​      1.掌握使用yum为Centos系统安装软件</p><p>​  yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法 yum [-y]  [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-y,自动确认，无需手动确认安装或卸载过程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install:安装</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove:卸载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">search:搜索</span></span><br><span class="line">yum命令需要联网和root权限</span><br></pre></td></tr></table></figure><p>​   安装wget程序(从网络上下载程序)   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">yum -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">yum -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">yum -y search wget</span><br></pre></td></tr></table></figure><p>​    2.掌握使用apt为Ubuntu安装软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：apt [-y] [install | remove | search] 软件名称</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令安装wget程序</span></span><br><span class="line">apt -y install wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令卸载wget程序</span></span><br><span class="line">apt -y remove wget</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过yum命令搜索是否wget程序</span></span><br><span class="line">apt -y search wget</span><br></pre></td></tr></table></figure><h4 id="4-3-systemctl命令"><a href="#4-3-systemctl命令" class="headerlink" title="4.3 systemctl命令"></a>4.3 systemctl命令</h4><p>Linux系统很多软件均支持使用systemctl命令控制，能够被systemctl管理的软件，一般也称为：服务</p><p>系统内置的服务有：</p><p>​NetworkManager,主网络服务</p><p>​network:副网络服务</p><p>​firewalld:防火墙服务</p><p>​sshd,ssh服务(FinalShell远程登陆Linux使用的就算这个服务)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：systemctl start | stop | status | enable | disable 服务名</span><br></pre></td></tr></table></figure><p>部分第三方软件安装后也可以用systemctl进行控制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp,安装ntp软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过ntpd服务器，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y heepd,安装apache服务器软件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以通过httpd服务器名，配合systemctl进行控制</span></span><br></pre></td></tr></table></figure><h4 id="4-4-软连接"><a href="#4-4-软连接" class="headerlink" title="4.4 软连接"></a>4.4 软连接</h4><p>​使用ln命令创建软链接，类似Windows系统中的快捷方式们可以将文件，文件夹链接到其它位置</p><p>​语法： ln -s 参数1 参数2     （-s选项 ，创建软连接；参数1，被链接的文件或文件夹；参数2，要链接的目的地）</p><p>​实例：ln -s &#x2F;etc&#x2F;yum.conf ~&#x2F;yum.conf</p><p>​    ln -s &#x2F;etc&#x2F;yum ~&#x2F;yum</p><h4 id="4-5-日期和时区"><a href="#4-5-日期和时区" class="headerlink" title="4.5 日期和时区"></a>4.5 日期和时区</h4><p>​date命令：可以在命令行中查看系统时间</p><p>​语法：date [-d] [+格式化字符串]</p><p>​-d按照给定的字符串显示日期，一般用于日期计算</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 10:16:00 CST</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不符合中国人阅读日期的习惯</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date +%Y-%m-%d</span><br><span class="line">2024-09-22</span><br><span class="line">[root@node1 ~]# date +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2024-09-22 10:22:25</span><br></pre></td></tr></table></figure><p>​date命令进行日期加减</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# date -d &quot;+1 day&quot; +%Y-%m-%d</span><br><span class="line">2024-09-23  #显示加一天(+,-,day,month,year)</span><br></pre></td></tr></table></figure><p>​修改Linux时区：</p><p>​修改时区需要使用root权限，修改时区为东八区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/localtime</span><br><span class="line">sudo ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rm -rf /etc/localtime</span><br><span class="line">[root@node1 ~]# ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br><span class="line">[root@node1 ~]# date</span><br><span class="line">2024年 09月 22日 星期日 11:23:43 CST</span><br></pre></td></tr></table></figure><p>​ntp程序：自动校准系统时间</p><p>​安装ntp:<strong>yum -y install ntp</strong></p><p>​启动并设置开机自启：</p><p>​systemctl start ntpd</p><p>​systemctl enable ntpd</p><p>​当ntpd启动后会定期的帮助我们联网校准系统时间</p><p>​也可以手动校准(需要root权限):ntpdate -u ntp.aliyun.com</p><p>​通过阿里云提供的服务网址配合ntpdate(安装ntp后会附带这个命令)命令自动校准</p><h4 id="4-6-IP地址-主机名"><a href="#4-6-IP地址-主机名" class="headerlink" title="4.6 IP地址&amp;主机名"></a>4.6 IP地址&amp;主机名</h4><p>​IP地址：每台联网的电脑都会有一个地址，可以通过ifconfig,查看本机的。</p><p>​主机名：每一台电脑除了对外联络地址(IP地址)以外，还可以有自己的主机名</p><p>​hostnamectl set-hostname  新的主机名：修改主机名</p><p>​<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BB%E6%9C%BA%E5%90%8D.png"></p><p>​域名解析：</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png"></p><p>​配置主机名和ip的映射关系：</p><p>​以管理员身份打开记事本，打开找到hosts,编写保持映射关系。</p><p>​虚拟机配置固定IP</p><p>​为什么需要固定IP ?</p><p>​以前使用的Linux操作系统通过DHCP服务获取的IP地址会频繁变更，不利于远程操作和私人本地的虚拟机IP地址和主机名映射。</p><p>​1.在VMware Workstation中配置IP地址网关和网段(IP地址的范围)</p><p>​2.在Linux系统中手动修改配置文件，固定IP</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1n84y1i7td?p=35&amp;spm_id_from=pageDriver&amp;vd_source=d8733037a2c6216f5b8db97d9c49da5f</span><br></pre></td></tr></table></figure><h4 id="4-7-网络传输"><a href="#4-7-网络传输" class="headerlink" title="4.7 网络传输"></a>4.7 网络传输</h4><p>4.7.1 下载和网络请求</p><p>使用<strong>ping命令</strong>，检查指定的网络服务器是否是可联通的</p><p>语法：ping [-c num] ip或主机名</p><p><strong>wget命令</strong>：非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：wget [-b] url</p><p>-b:可选，后台下载，会将日志写入到当前工作目录的wget-log文件</p><p>curl命令：类似于浏览器打开网页（发起网络请求&amp;下载文件[-O]）</p><p>4.7.2 端口</p><p>物理端口：</p><p>虚拟端口：计算机内程序间的相互查找就需要端口来解决，IP地址只能锁定计算机。</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%AB%AF%E5%8F%A3.png"></p><p><strong>查看端口占用情况</strong></p><p>语法 ：nmap 被查看的IP地址端口的占用情况,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# yum install nmap #安装nmap</span><br><span class="line">[root@node1 ~]# nmap 127.0.0.1  </span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2024-09-22 20:04 CST</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.0000030s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">25/tcp  open  smtp</span><br><span class="line">111/tcp open  rpcbind</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>netstat命令：查看指定端口的占用情况</p><p>语法：netstat  -anp <strong>|</strong> grep 端口号，安装netstat:  yum -y install net-tools</p><h4 id="4-8-进程管理"><a href="#4-8-进程管理" class="headerlink" title="4.8 进程管理"></a>4.8 进程管理</h4><p>​操作系统中运行的程序会被一个独立的进程ID标记，就算进程。</p><p>​<strong>查看进程</strong>：ps [-e -f]</p><p>​-e:显示出全部的进程</p><p>​-f：以完全格式化的形式展示信息</p><p>​一般来说ps -ef 列出全部进程的去全部信息，可以配合管道符，gerp过滤一下。</p><p>​<strong>关闭进程</strong>：kill [-9] 进程ID,-9表示强制关闭，不使用-9只是发送关闭信号，不保证关闭。</p><h4 id="4-9-主机状态"><a href="#4-9-主机状态" class="headerlink" title="4.9 主机状态"></a>4.9 主机状态</h4><p>​查看系统资源占用：</p><p>​可以通过top命令查看CPU，内存使用情况，类时Windows的任务管理器。</p><p>​语法：直接输入top即可，按ctrl+c&#x2F;q退出。</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top.png"></p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/top02.png"></p><p>磁盘监控：使用df命令，可以查看硬盘的使用情况</p><p>​语法：df [-h]  -h,以更加人性的单位显示</p><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4.png"></p><p>​使用iostat查看CPU，磁盘的相关信息；语法：iostat [-x] [num1] [num2]   ,-x可以显示更多信息，num1秒刷新一次刷新num2次。</p><p>网络监控：sar命令查看网络的相关统计</p><p>​语法： sar -n DEV num1 num2    ,-n代表查看网络，DEV表示查看网络接口，num同上。</p><h4 id="4-10-环境变量"><a href="#4-10-环境变量" class="headerlink" title="4.10 环境变量"></a>4.10 环境变量</h4><p>​<strong>环境变量PATH:</strong></p><p>​在Linux系统中执行env命令即可查到环境变量。</p><p>​无论在哪一个目录都能准确的执行&#x2F;usr&#x2F;bin&#x2F;cd这个程序，就是因为PATH记录了系统执行任何命令的搜索路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# env | grep PATH</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>​<strong>$符号：</strong>被用于取”变量”的值</p><p>​环境变量记录中的信息，除了给操作系统自己使用外，如果我们想要取用，可以通过$符号来取，具体语法：$环境变量名</p><p>通过echo语句输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>当和其他内容混合在一起，通过{}来标注取得变量是谁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>​<strong>自行设置环境变量：</strong></p><p>​临时设置：语法：export 变量名&#x3D;变量值</p><p>​永久生效：针对当前用户生效，配置在当前用户得：~&#x2F;.bashrc文件中</p><p>​    针对所有用户生效，配置在系统得：&#x2F;etc&#x2F;profile文件中</p><p>​    并通过语法：source <strong>配置文件</strong>，进行立刻生效，或重新登陆FinalShell生效。</p><p>​<strong>自定义环境变量PATH：</strong></p><p>​环境变量PATH这个项目里面记录了系统执行命令得搜索路径，这些搜索路径我们可以自行添加到PATH中去</p><p>​测试：在当前HOME目录内创建文件夹，myenv,在文件夹内创建文件mkhaha</p><p>​    通过vim编辑器，在mkhaha文件内填入：echo hahaha</p><p>​完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行</p><p>​    文件想要执行需要程序执行权限X: chmod 755</p><p>​     执行文件： .&#x2F;mkhahaha</p><p>​修改PATH的值</p><p>​临时修改PATH:export PATH &#x3D; <strong>$PATH</strong>:&#x2F;home&#x2F;itheima&#x2F;myenv,再次执行mkhaha,无论到哪里都能执行。</p><p>​或将export PATH&#x3D;<strong>$PATH</strong> :&#x2F;home&#x2F;itheima&#x2F;mkenv填入用户环境变量文件或系统环境变量文件中去。</p><h4 id="4-11-Linux文件的上传和下载"><a href="#4-11-Linux文件的上传和下载" class="headerlink" title="4.11 Linux文件的上传和下载"></a>4.11 Linux文件的上传和下载</h4><p>​1.掌握通过FinalShell在Linux系统中进行上传和下载</p><p>​2.掌握rz,sz命令</p><p>​除了通过FinalShell的下方窗体进行文件的传输以外，还可以通过rz,sz命令进行文件传输。</p><p>​rz,sz命令需要安装，可以通过：yum -y install lrzsz,即可安装。</p><p>​rz命令，进行上传，语法：直接输入rz即可，弹出框</p><p>​sz命令，进行下载，语法：sz   要下载的文件</p><p>​文件会自动下载到桌面的fsdownload文件夹中。</p><h4 id="4-12-压缩和解压"><a href="#4-12-压缩和解压" class="headerlink" title="4.12 压缩和解压"></a>4.12 压缩和解压</h4><p>​1.掌握使用tar命令压缩或解压tar或gzip文件</p><p>​.tar：简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装。</p><p>​.gz:也常见为.tar.gz,.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积。</p><p>​针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>​语法:tar [-c  -v  -x  -f  -z  -C]  参数1  参数2  ….参数N</p><p>​-c，创建压缩文件，用于压缩模式</p><p>​-v，显示压缩，解压过程，用于查看进度</p><p>​-x，解压模式</p><p>​-f，要创建的文件，或要解压的文件，-f选项必须在所以选项中位置处于最后一个</p><p>​-z，gzip模式，不使用-z就算普通的tarball格式(建议放开头)</p><p>​-C，选择解压的目的地，用于解压模式 (单独使用，和解压所需的其他参数分开)</p><p>​常见压缩组合：</p><p>​tar  -cvf  test.tar  1.txt  2.txt 3.txt:将1.txt  2.txt 3.txt压缩到test.tar文件内</p><p>​tar -zcvf  test.tar.gz    1.txt  2.txt 3.txt:将  1.txt  2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式。</p><p>​常见解压组合：</p><p>​tar -xvf  test.tar  ：解压test.tar,将文件压缩至当前目录</p><p>​tar -xvf test.tar -C &#x2F;home&#x2F;itheima :解压test.tar,将文件压缩至指定目录</p><p>​tar -zxvf test.tar.gz -C &#x2F;home&#x2F;itheima：以GZip模式解压test.tar.gz,将文件解压至指定目录</p><p>​2.掌握使用zip，unzip，命令压缩或解压zip文件</p><p>​可以使用zip命令，压缩文件为zip压缩包</p><p>​语法：zip [-r] 参数1，参数2……参数N</p><p>​-r,被压缩的包含文件夹的时候需要使用到-r</p><p>​示例：</p><p>​zip test.zip a.txt b.txt c.txt:将a.txt b.txt c.txt压缩到test.zip文件内</p><p>​zip -r test.zip test itheima a.txt:将test，itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p><p>​可以使用unzip命令，可以方便的解压zip压缩包</p><p>​语法：unzip [-d] 参数</p><p>​-d,指定要解压去的位置，同tar的-C选项</p><p>​参数，被解压的zip压缩包文件</p><p>​示例：</p><p>​unzip  test.zip,将test.zip解压到当前目录。</p><p>​unzip test.zip -d &#x2F;home&#x2F;itheima,将test.zip解压到指定文件夹内。</p><h3 id="5-实战软件部署"><a href="#5-实战软件部署" class="headerlink" title="5.实战软件部署"></a>5.实战软件部署</h3><p>​</p><h3 id="6-脚本＆自动化"><a href="#6-脚本＆自动化" class="headerlink" title="6.脚本＆自动化"></a>6.脚本＆自动化</h3><h3 id="7-项目实战"><a href="#7-项目实战" class="headerlink" title="7.项目实战"></a>7.项目实战</h3><h3 id="8-云平台技术"><a href="#8-云平台技术" class="headerlink" title="8.云平台技术"></a>8.云平台技术</h3><h3 id="9-问题汇总和解决方案"><a href="#9-问题汇总和解决方案" class="headerlink" title="9.问题汇总和解决方案"></a>9.问题汇总和解决方案</h3><h4 id="9-1-解决切换用户出现bash-4-2-问题"><a href="#9-1-解决切换用户出现bash-4-2-问题" class="headerlink" title="9.1 解决切换用户出现bash-4.2$问题"></a>9.1 解决切换用户出现bash-4.2$问题</h4><p>​<strong>问题描述</strong>：linux中创建了一个xhh用户，然后使用su命令切换用户后，终端提示符显示成“bash-4.2$”而不是[root@localhost xhh]#，导致ll等命令无法执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /] su itheima</span><br><span class="line">bash -4.2$</span><br></pre></td></tr></table></figure><p>​<strong>原因分析</strong>:没有在home目录下创建对应的目录导致。</p><p>​<strong>解决方案</strong>：使用root用户登录，再home目录中创建用户对应的文件夹，mkdir &#x2F;home&#x2F;user，这里的user是用户的名字，然后执行如下两个命令：<img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/problem1.png"></p><p>​执行成功后，再次使用su命令切换用户，发现一切正常。</p><h4 id="9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64"><a href="#9-2-使用yum命令时的问题-Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64" class="headerlink" title="9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)"></a>9.2 使用yum命令时的问题(Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64)</h4><p><img src="/../images/Linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A-day1/yum%E6%97%B6%E7%9A%84%E5%91%BD%E4%BB%A4.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一步</span></span><br><span class="line">sudo sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二步</span></span><br><span class="line">sudo sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">鸣谢：https://blog.csdn.net/kitesxian/article/details/142356833</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;Linux&lt;/center&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://readmengk90.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://readmengk90.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://readmengk90.github.io/2024/09/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80-Linux%E5%91%BD%E4%BB%A4/"/>
    <id>https://readmengk90.github.io/2024/09/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80-Linux%E5%91%BD%E4%BB%A4/</id>
    <published>2024-09-18T02:20:52.244Z</published>
    <updated>2024-09-18T02:35:03.352Z</updated>
    
    <content type="html"><![CDATA[<p><strong>—–  有自觉才有自由   —–</strong></p><p>大数据解决海量<em><strong>数据的存储</strong></em>(存不下)与<em><strong>计算</strong></em>(查询慢)的问题。</p><p>大数据：处理出有价值的数据</p><p>大数据分析的业务流程：</p><ul><li><p><input disabled="" type="checkbox"> ​明确数据分析的目的和思路(搞清楚数据在哪，要做什么?)</p></li><li><p><input disabled="" type="checkbox"> ​ 数据收集(读数据)</p></li><li><p><input disabled="" type="checkbox"> ​                 数据处理：提取，清洗，转化，加载(Sqoop,kettle即对数据进行处理，过滤掉不需要的数据)</p></li><li><p><input disabled="" type="checkbox"> ​                 数据分析：统计，建模，挖掘，（Hive,Spark,Flik即指标统计，根据需求算出结果，存储结果）</p></li><li><p><input disabled="" type="checkbox"> ​                 数据可视化(Superset,Echarts),将结果放入一个查询非常快的数据库，例如hbse,redis,MySQL</p></li><li><p><input disabled="" type="checkbox"> ​                 报告撰写(如图所示，那个数据最明显)</p></li><li><p>Linux文件系统的特点：</p></li></ul><p>​Linux文件系统没有盘符的概念，所以的文件入口是从根目录开始的，系统自带的文件不要修改和删除。</p><p>Linux命令：</p><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><blockquote><ul><li><strong>cd : change directory,切换目录</strong></li></ul></blockquote><p>​cd .. ：返回上一级目录</p><p>​        cd -  :在临近的2个目录间切换</p><p>​cd :  返回登陆者的<strong>家目录</strong></p><p>​cd &#x2F; :切换到根目录</p><p>​     ~:&#x2F;root</p><p>​cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果          是root用户登陆的就回到&#x2F;root</p><h3 id="mkdir-make-directory-创建文件夹"><a href="#mkdir-make-directory-创建文件夹" class="headerlink" title="mkdir:  make directory,创建文件夹"></a><strong>mkdir:  make directory,创建文件夹</strong></h3><p>​ mkdir test1:没有层级的创建文件夹test1,当前目录下创建。</p><p>​                 mkdir -p aaa&#x2F;bbb&#x2F;ccc&#x2F;ddd:有层级的创建文件夹，绝对路径创建(-p先检查后创建文件夹)。</p><h3 id="rm-remove的缩写，默认删除文件-，可以删除文件夹-d"><a href="#rm-remove的缩写，默认删除文件-，可以删除文件夹-d" class="headerlink" title="rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)"></a><strong>rm:   remove的缩写，默认删除文件(-)，可以删除文件夹(d)</strong></h3><p>​ rm a.txt : 删除文件会提示，以y开头都会被删除，其他都不会被删除。</p><p>​ -r: 递归,先进入最里的一层，然后从里向外删除</p><p>​rm -r test1：删除<em><strong>文件夹</strong></em> test1,但是会提示。</p><p>​         -f: force,强制</p><p>​rm a.txt -f  :    强制删除**文件 **a.txt, 并且不提示。</p><p>​rm -rf test1 :   强制删除<em><strong>文件夹</strong></em> test1不提示。</p><h3 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch: 创建空文件"></a><strong>touch: 创建空文件</strong></h3><p>​ touch a.txt  #在当前目录创建a.txt文件</p><p>​ touch &#x2F;root&#x2F;a.txt  #在&#x2F;root目录创建a.txt文件</p><h3 id="mv-文件，目录的移动和重命名"><a href="#mv-文件，目录的移动和重命名" class="headerlink" title="mv:文件，目录的移动和重命名"></a>mv:文件，目录的移动和重命名</h3><p>​<strong>mv:  move用于文件，目录的移动和重命名(剪切粘贴，重命名和移动功能)</strong></p><p>​ mv  a.txt  b.txt :    当b.txt存在和不存在都是重命名，a的内容<strong>覆盖</strong>b的内容(a的名字变成b的名字)，即b变成了a的内容(覆盖：把b杯子先清空，然后把a被子里的水倒入b中，不同于追加0)。</p><p>​ mv test1 test2 : 当test2存在：将test1整个文件夹<strong>移动到</strong>test2目录下</p><p>​                     当test2不存在：重命名</p><p>​ mv a.txt  test1 :移动文件到指定目录test1下面a</p><h3 id="cat-查看-整个文件-内容"><a href="#cat-查看-整个文件-内容" class="headerlink" title="cat : 查看 整个文件 内容"></a><strong>cat : 查看 整个<em>文件</em> 内容</strong></h3><p>​                  cat  a.txt :查看文件内容</p><h3 id="more-查看文件部分内容"><a href="#more-查看文件部分内容" class="headerlink" title="more :查看文件部分内容"></a><strong>more :查看文件部分内容</strong></h3><p>​ enter：多查一行数据</p><p>​ 空 格 ： 查看新的一屏幕数据</p><h3 id="cp-copy-复制粘贴"><a href="#cp-copy-复制粘贴" class="headerlink" title="cp : copy , 复制粘贴"></a><strong>cp : copy , 复制粘贴</strong></h3><p>​ cp a.txt  b.txt  </p><p>​  a.txt 内容存在  b.txt 内容不存在—复制a内容到b里。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp01.png"></p><p>​ a.txt 内容存在  b.txt内容存在———将a的内容覆盖到b里。</p><p>​                 cp test1 test2 -r</p><p>​当test2文件夹不存在：将test1下面的内容复制一份，写到test2目录下。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-9.png"></p><p>​当test2文件夹存在：将test1整个复制一份到test2目录中</p><p>​        test1内容存在    test2内容为空。—复制test1整体复制到test2中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-32.png"></p><p>​         test1内容存在    test2内容存在. —-将test1整体到test2目录中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-6.png"></p><p>​cp a.txt test2 :复制a.txt并写入到 test2 目录中</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/cp-24.png"></p><h3 id="ps-process-status-进程状态"><a href="#ps-process-status-进程状态" class="headerlink" title="ps: process status ,进程状态"></a><strong>ps: process status ,进程状态</strong></h3><p>​ps -ef : 查看当前正在运行的进程</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/ps-1.png"></p><p>​UID：进程是谁执行的</p><p>​PID:   进程的ID</p><p>​PPID：进程的父ID</p><h3 id="kill-终止"><a href="#kill-终止" class="headerlink" title="kill : 终止"></a><strong>kill : 终止</strong></h3><p>​kill 进程ID，终止进程，有时候不一定会终止进程。</p><p>​kill -9 进程ID,一定能杀死进程。（9：kill,双杀）</p><p>​kill -1:查看kill命令的所以信号。</p><h3 id="ifconfig-查看虚拟机的网络配置信息"><a href="#ifconfig-查看虚拟机的网络配置信息" class="headerlink" title="ifconfig: 查看虚拟机的网络配置信息"></a><strong>ifconfig: 查看虚拟机的网络配置信息</strong></h3><p>​Windows：ipconfig</p><p>​<strong>Linux命令(重点)</strong></p><p>​命令格式： command -options paramaters</p><p>​绝对路径：从根目录开始。</p><p>​相对路径：从当前目录开始。</p><h3 id="ls-list简写，列出当前目录下的内容-文件-文件夹-。"><a href="#ls-list简写，列出当前目录下的内容-文件-文件夹-。" class="headerlink" title="ls : list简写，列出当前目录下的内容(文件+文件夹)。"></a><strong>ls : list简写，列出当前目录下的内容(文件+文件夹)。</strong></h3><p>​ls &#x2F;root:查看指定目录&#x2F;root里面的内容。</p><p>​<strong>-options:</strong></p><p>​ ls -a :查看(.)隐藏和非隐藏的文件(白色)和文件夹(蓝色),all</p><p>​ ls -l :list简写，列表显示，以列表形势显示指定目录下的文件和文件夹(简写ll)。</p><p>​ ls -h :显示大小，带单位(必须与-l结合使用 ls -l -h)</p><h3 id="clear-命令用来清屏，可以使用ctrl-l来替换。"><a href="#clear-命令用来清屏，可以使用ctrl-l来替换。" class="headerlink" title="clear:命令用来清屏，可以使用ctrl+l来替换。"></a><strong>clear:命令用来清屏，可以使用ctrl+l来替换</strong>。</h3><h3 id="pwd-显示当前目录的绝对路径。"><a href="#pwd-显示当前目录的绝对路径。" class="headerlink" title="pwd:显示当前目录的绝对路径。"></a><strong>pwd:显示当前目录的绝对路径</strong>。</h3><h3 id="reboot-重启命令"><a href="#reboot-重启命令" class="headerlink" title="reboot:重启命令"></a><strong>reboot:重启命令</strong></h3><p>shutdown -h now:立刻关机(断电关机)</p><p>**halt:立刻关机(不断电关机)**<strong>cd: change directory,切换目录</strong></p><p>​cd:切换到当前登陆用户的家目录，如果是itcast用户登陆的，就回到&#x2F;home&#x2F;itcast,如果          是root用户登陆的就回到&#x2F;root</p><h3 id="hostname-查看主机名称"><a href="#hostname-查看主机名称" class="headerlink" title="hostname: 查看主机名称"></a><strong>hostname: 查看主机名称</strong></h3><h3 id="tar：压缩，打包，解包，解压缩命令"><a href="#tar：压缩，打包，解包，解压缩命令" class="headerlink" title="tar：压缩，打包，解包，解压缩命令"></a><strong>tar：压缩，打包，解包，解压缩命令</strong></h3><p>​options:</p><p>​c:打包</p><p>​v:看过程</p><p>​f:打包成那个文件</p><p>​z:打包成压缩格式的文件.gzip格式</p><p>​x:解包，解压缩</p><p>​-C：指定文件的解压位置</p><p>打包：是指将一大堆文件或目录变成一个总的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf test1.tar  test1</span><br></pre></td></tr></table></figure><p>打压缩包：则是将一个大文件通过压缩算法变成一个小文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf test1.tar.gz test1</span><br></pre></td></tr></table></figure><p>解包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf test1.tar -c /big59/test3</span><br></pre></td></tr></table></figure><p>解压缩包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf test1.tar.gz -C /big59/test2</span><br></pre></td></tr></table></figure><h3 id="grep-全文检索"><a href="#grep-全文检索" class="headerlink" title="grep:全文检索"></a><strong>grep:全文检索</strong></h3><p>​grep hadoop a.txt: 在a.txt里面查找包含hadoop的内容。</p><p>​grep -ir hadoop &#x2F;root:不区分大小写，</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/gerp-1.png"></p><p><strong>| :管道，将上一个命令的输出当成下一个命令的输入</strong></p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/%E7%AE%A1%E9%81%93.png"></p><h3 id="which-查看系统命令"><a href="#which-查看系统命令" class="headerlink" title="which-查看系统命令"></a><strong>which-查看系统命令</strong></h3><p>​ 查看执行命令的位置</p><p>​ <img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/which.png"></p><h3 id="vi-vi编辑器"><a href="#vi-vi编辑器" class="headerlink" title="vi : vi编辑器"></a><strong>vi : vi编辑器</strong></h3><p>​命令模式：vi  a.txt回车进入命令模式。</p><p>​编辑模式： 输入i,o,O,a,s都可以从命令模式进入编辑模式，输入esc进入命令模式。</p><p>​保持退出： 输入：进入末行模式，再输入wq保存退出。</p><p>​<img src="/../images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D-%E5%A4%84%E7%90%86%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E6%95%B0%E6%8D%AE/vi%E7%BC%96%E8%BE%91.png"></p><h3 id="用户创建命令：useradd-root超级管理员才可以添加用户"><a href="#用户创建命令：useradd-root超级管理员才可以添加用户" class="headerlink" title="用户创建命令：useradd(root超级管理员才可以添加用户)"></a><strong>用户创建命令：useradd</strong>(root超级管理员才可以添加用户)</h3><p>​添加用户：useradd  用户名</p><p>​设置密码：passwd   用户名</p><p>​删除用户：userdel -r 用户名</p><p>​切换用户：su  用户名</p><h3 id="chmod-权限管理"><a href="#chmod-权限管理" class="headerlink" title="chmod:权限管理"></a><strong>chmod:权限管理</strong></h3><p>​角色：</p><p>​创建者：一个文件或者文件夹的创建者(拥有者)，userid简称uid.</p><p>​用户组：针对文件或者文件夹而言，默认与创建者同名，groupid简称gid&#x2F;g.</p><p>​其他用户：创建者之外的用户，就是其他用户，other简称o.</p><p>​权限：</p><p>​第1列：文件属性(  - :文件，d:文件夹)</p><p>​第2-4列：创建者对文件或者文件夹的权限</p><p>​第5-7列：用户组的权限</p><p>​第8-10列：其他用户的权限</p><p>​权限的解读：</p><p>​r :read ，读权限，r   4</p><p>​w :write，写权限，w 2</p><p>​x ：执行权限，x     1</p><p>​权限操作：(文件和文件夹都可以进行权限操作)</p><p>​chmod o**+**w a.txt:对其他用户添加一个写权限。</p><p>​chmod g**-**r a.txt:给用户组删除读权限。</p><p>​chmod o**&#x3D;**wx a.txt的其他用户赋予写和执行权限</p><p>​数字权限的操作：</p><p>​chmod 777 a.txt:给所以角色赋予所以权限</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;大数据基础-Linux命令&lt;/center&gt;</summary>
    
    
    
    <category term="Linux命令" scheme="https://readmengk90.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="大数据" scheme="https://readmengk90.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>endNode的使用</title>
    <link href="https://readmengk90.github.io/2024/09/08/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://readmengk90.github.io/2024/09/08/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-09-08T07:41:01.862Z</published>
    <updated>2024-09-10T13:57:00.063Z</updated>
    
    <content type="html"><![CDATA[<p>1.endnode的下载和安装：</p><p>​<a href="https://mp.weixin.qq.com/s/dVgeXShxAsyfyVfzJkREMw">EndNote21.4安装教程 (qq.com)</a></p><p>2.导入文献</p><p>​2.1数据库导入</p><p>​<strong>PubMed</strong>(<a href="https://pubmed.ncbi.nlm.nih.gov/">PubMed (nih.gov)</a>)是文摘型数据库，也就意味着PubMed的强项是<strong>检索</strong>，这与全文数据库是不同的，点击create file会生成一个nbib文件。</p><p>​nbib文件导入endNode的方式：</p><p>​(1):直接双击文件，文件就会自动导入到endNode.</p><p>​                (2):通过文献过滤器导入，File-&gt;Import-&gt;File(&#x2F;import⬇),选择导入文件，导入选择选择其他过滤器-&gt;PubMed(NLM).</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/pubmed%E4%BD%BF%E7%94%A8.png" alt=" "></p><p>​<strong>web of science</strong>(<a href="https://webofscience.clarivate.cn/wos/alldb/basic-search">Document Search - All Databases (clarivate.cn)</a>),输入关键词点击搜索，勾选你需要的文献，点击导出(export)–EndNode desktop,生成一个ciw文件，双击即可导入文件。</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/web-of-science.png"></p><p>​<strong>Google Scholar学术导入</strong>，在谷歌学术进行检索，点击引用–EndNote格式–会下载一个enw文件，双击即可导入(选择….XML这个选项)，批量导出需要先收藏–我的图书馆–全部导出。</p><p>​<strong>知网导入</strong>，勾选文献–导出与分析–EndNote格式–点击导出–生成TXT文件；点击Import⬇.</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%9F%A5%E7%BD%91.png"></p><p>​    《《<em>文献标题和期刊在一起的问题》》：</em>这是EndNote Import过滤器的问题，方法为Edit–Import Filters–Open Filter Manager–找到EndNote Import这个过滤器–点击编辑Edit–左侧的Templates–文件类型选择Journal Article–将Journal一行前的标签%B改成%J–关闭–是–重命名–重新导入–过滤器选择刚才修改的。</p><p>​    《《<em>补充缺失信息</em>》》：因为某些原因，可能有些文件会缺失一些信息，按CTRL批量选择缺失信息的文献—鼠标右键—Find Reference Updates—Update All Files–Y.(只对英文文献有效，中文缺失双击手动添加)。</p><p>​<strong>PDF导入</strong>，通过识别PDF的DOI号，从而提取文献信息，不建议导入中文文献论文，从中文数据库中直接导入。</p><p>​    《《PDF导入英文文献信息缺失》》：主要是没检测到DOI号，方法：复制文件标题到浏览器搜索—复制DOI—-双击文献下拉到<strong>DOI</strong>–左上角查找全文更新—Update  Files</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/PDF.png"></p><p>​    《《导入文件夹所有PDF》》:File–import–文件夹</p><p>3.管理文献</p><p>​<strong>3.1 分组</strong>    对导入的文件可以对其进行分组，只能有二级分类；在我的分组里点击–创建组，然后将同类型文献批量拖拽进组内.</p><p>​**3.2 文献去重 ** 从同一个研究主题，往往会从不同数据库导入文献，会涉及到文献重复，点击All Reference—Reference(导航栏)—Find Duplicates—cancle–在左侧会新增一个重复文献文件夹—里面的文献数量就代表重复数量2倍，有灰色阴影的文献就是重复的文献—-鼠标右键单击Move Reference to Trash</p><p>​<strong>3.3 文献排序</strong>  </p><p>​查找全文：全选文献—右键查找全文–查找全文–出现回形针表示能找到</p><p>​查找全文对于中文文献是不适用的，对于没有中文文献和没有查找到全文的英文文献，可以先将PDF下载到本地，这篇文献就会被链接到一个全文，该PDF文件会被自动存储到数据库文件夹中(删除后无影响)</p><p>​<strong>3.4 对文献做笔记</strong></p><p>​1,2步骤后 然后调出reserch Notes，保存。</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%AC%94%E8%AE%B0.png"></p><p>4.引用文献</p><p>​<strong>预览样式</strong>：在引用文献前，可以在EndNote预览参考文献样式</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E9%A2%84%E8%A7%88%E6%A0%B7%E5%BC%8F.png"></p><p>​<strong>添加样式：</strong><a href="https://endnote.com/downloads/styles/?wpv_aux_current_post_id=12829&wpv_view_count=12764-TCPID12829">Output styles - EndNote</a></p><p>​下载后粘贴到endnote下载位置的Style中</p><p>​<strong>引入到word中</strong>：在word中EndNote(导航栏)—选择好style—在EndNote里选择好要导入的文件—在word里Insert Citation—Insert  selected Citation.</p><p>​<strong>去除参考文献域代码</strong>：域代码去除就无法恢复（Ctrl+A–Ctrl+Shift+F9）</p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E5%9F%9F%E4%BB%A3%E7%A0%81.png"></p><p>​<strong>更改作者数：</strong></p><p>​<img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B0.png"></p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E4%BD%9C%E8%80%85%E6%95%B02.png"></p><p>​<strong>引用网页文献的问题</strong>：</p><p><img src="/../images/endNode%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%BD%91%E9%A1%B5%E6%96%87%E7%8C%AE.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;科研软件&lt;/center&gt;</summary>
    
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/categories/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="科研软件" scheme="https://readmengk90.github.io/tags/%E7%A7%91%E7%A0%94%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>可行性研究</title>
    <link href="https://readmengk90.github.io/2024/03/02/02%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>https://readmengk90.github.io/2024/03/02/02%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</id>
    <published>2024-03-02T09:40:25.581Z</published>
    <updated>2024-03-02T10:26:14.366Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">考试内容</th><th align="left">考试要求</th></tr></thead><tbody><tr><td align="left">1. 可行性研究的任务</td><td align="left">1.了解可行性研究的任务</td></tr><tr><td align="left">2. 数据流图和数据字典</td><td align="left"></td></tr><tr><td align="left">3.成本效益分析</td><td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td></tr><tr><td align="left">4. 需求分析的任务</td><td align="left">4.了解需求分析的任务</td></tr><tr><td align="left">5.实体联系图，状态转换图，层次方框图，IPO图</td><td align="left">掌握可行性研究和需求分析的建模方法：数据流图，数据字典，实体联系图，状态转换图，层次方框图，IPO图</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;可行性研究&lt;/center&gt;</summary>
    
    
    
    <category term="软件工程" scheme="https://readmengk90.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="考研复试" scheme="https://readmengk90.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件危机/软件工程/软件生命周期/软件过程</title>
    <link href="https://readmengk90.github.io/2024/02/27/01%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/"/>
    <id>https://readmengk90.github.io/2024/02/27/01%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%A6%82%E8%BF%B0/</id>
    <published>2024-02-27T02:21:01.665Z</published>
    <updated>2024-03-02T09:36:19.820Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">考试内容</th><th align="left">考试要求</th></tr></thead><tbody><tr><td align="left">1. 软件和软件工程的含义、软件工程的基本原理</td><td align="left">1.理解软件和软件工程的含义、软件工程的基本原理。</td></tr><tr><td align="left">2. 软件危机的原因、表现和消除途径。</td><td align="left">2.理解产生软件危机的原因和消除软件危机的途径。</td></tr><tr><td align="left">3. 软件生命周期各个阶段的基本任务。</td><td align="left">3.了解什么是软件生命周期，了解生命周期各个阶段：可行性分析、需求分析、系统设计、详细设计、实现、测试的基本任务。</td></tr><tr><td align="left">4. 软件生命周期模型。</td><td align="left">4.了解各种软件生命周期模型的优缺点和适用场合：瀑布模型、增量模型、快速原型模型、螺旋模型。</td></tr></tbody></table><p><strong>软件定义</strong></p><p>程序、数据及相关文档的完整集合。其中，程序是能够完成预定功能和性能的可执行的指令序列；数据是使程序能够适当地处理信息的数据结构；文档是开发、使用和维护程序所需要的图文资料。</p><p><strong>软件工程定义</strong></p><p>1）把系统的、规范的、可度量的途经用于软件开发、运行和维护过程，也就是把工程应用于软件；</p><p>2）研究1）中提到的途径</p><p><strong>软件危机：</strong></p><p>​定义：在计算机软件的<strong>开发</strong>和<strong>维护</strong>过程中所遇到的一系列严重问题。</p><p>​范围： 1.如何维护数量不断膨胀的已有软件。</p><p>​     2.如何开发软件，以满足对软件日益增长的需求。</p><p>​        典型表现：1.对软件成本和开发进度的估计不准确。</p><p>​   2.用户对“已完成的”软件系统不满意的现象经常发生。</p><p>​   3.软件产品质量往往靠不住</p><p>​   4.软件常常是不可维护的</p><p>​   5.软件通常没有适当的文档资料</p><p>​           6.软件成本在计算机系统总成本中所占比例逐年上升。</p><p>​   7.软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</p><p><strong>产生的原因</strong>：</p><table><thead><tr><th>与软件本身的特点有关(客观)</th><th>与软件本身的特点无关(主观)</th></tr></thead><tbody><tr><td>缺乏可见性，进展较难衡量，软件质量较难评价(用户与产品之间的矛盾)</td><td>软件开发与维护的方法不准确，即采用了错误的方法和技术。</td></tr><tr><td>不会用坏，难维护</td><td>忽视软件需求分析的重要性</td></tr><tr><td>复杂性随规模的增加呈指数上升</td><td>轻视软件维护</td></tr></tbody></table><p><strong>消除途径</strong>：</p><p>​1.对计算机软件有一个正确的认识(软件是程序，数据，及相关文档的完整集合)</p><p>​2.软件是一个工程项目(软件开发是一种组织良好，管理严密，各类人员协同配合，共同完成的工程项目)</p><p>​3.推广使用成功的技术和方法，探索更有效地技术和方法。</p><p>​4.开发和使用更好的软件工具 </p><p>**软件工程( Software Engineering)**：</p><p>定义：是指导计算机软件开发和维护的一门工程学科，采用工程的概念，原理，技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它。</p><p>方法学：通常把软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也称为范型。</p><p>软件工程方法学包含3要素：方法(回答“怎么做”的问题)</p><p>​工具(软件工程支撑环境)</p><p>​过程(任务框架)         </p><p><strong>软件生命周期</strong>：                                     </p><p>​定义：一个软件从提出开发要求开始直到该软件报废为止得这个时期。</p><p>​阶段：软件定义-问题定义，可行性研究，需求分析</p><p>​   软件开发-总体设计，详细设计，实现</p><p>​   软件维护-软件维护</p><p><strong>软件周期的各个时期及其阶段的基本作用</strong></p><p>软件生命周期分为3个时期：软件定义、软件开发、运行维护。</p><p>软件定义分为3个阶段：问题定义、可行性研究和需求分析。</p><p>软件开发分为4个阶段：总体设计，详细设计，编码和单元测试，综合测试。</p><p>其中，总体设计和详细设计又称为系统设计，编码和单元测试，综合测试又称为系统实现。</p><p><strong>软件过程：</strong></p><p>​瀑布模型：必须等前一阶段得工作完成之后，才能开始后一阶段的工作</p><p>​    优点：可强迫开发人员采用规范的方法；严格地规定了每个阶段必须提交的文档；要求每个阶段交出的所有产品都必须经过质量保证小组的仔细验证。</p><p>​    缺点：由于瀑布模型完全依赖于书面的规格说明，很可能导致最终开发出的软件产品不能真正满足用户的需求</p><p>​快速原型模型：快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集</p><p>​    软件设计人员快速建立一个能反映用户主要需求的原型系统，让用户试用后提出许多修改意见，开发人员按照用户的意    见快速修改原型系统，用户再次使用，反复执行上述操作，直到用户任务符合他们的需求，开发人员据此书写规格说明文档。</p><p>​增量模型：把软件产品作为一系列的增量构件来设计，每个构件由多个相互作用的模块构成，并且能够完成特定的功能。</p><p>​ 优点：能在较短时间内向用户提交可完成部分工作的产品；</p><p>​    逐步增加产品功能可以使用户有较宽裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的    冲击；</p><p>​螺旋模型：使用原型及其他方法来尽量降低风险，可以理解为每个阶段之前都增加了风险分析过程的快速原型模型。</p><p>​    优点：1.对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标，有助       于把软件质量作为软件开发的一个重要目标；</p><p>​2.减少了过多测试或测试不足所带来的风险；</p><p>​3.维护和开发之间没有本质的区别；</p><p>​    缺点：风险驱动型的特点会由于风险评估不准确给项目带来的风险。</p><p>​喷泉模型：是一种以用户需求为动力，以对象为驱动的模型，主要用于描述面向对象的软件开发过程。</p><p>​   体现了面向对象软件开发过程迭代和无缝的特性</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;软件工程学概论&lt;/center&gt;</summary>
    
    
    
    <category term="软件工程" scheme="https://readmengk90.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="考研复试" scheme="https://readmengk90.github.io/tags/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GUI图形化用户界面</title>
    <link href="https://readmengk90.github.io/2024/02/25/java%E5%9F%BA%E7%A1%80-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
    <id>https://readmengk90.github.io/2024/02/25/java%E5%9F%BA%E7%A1%80-GUI%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</id>
    <published>2024-02-25T15:44:18.430Z</published>
    <updated>2024-02-27T02:07:59.913Z</updated>
    
    <content type="html"><![CDATA[<p>GUI</p><p>​JFrame:最外层的窗体</p><p>​JMenuBar:最上层的菜单</p><p>​JLabel:管理文字和图片的容器</p><p>​IMageIcon</p><p>​取消隐藏容器中居中的默认方式：setLayout(null)</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;GUI&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-内部类</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2024-02-23T15:55:18.010Z</published>
    <updated>2024-02-25T13:05:30.243Z</updated>
    
    <content type="html"><![CDATA[<p>内部类–是类的五大成员之一(属性，方法，构造方法，内部类)，在一个类的里面，在定义一个类。</p><p><strong>应用场景</strong>：</p><p>​需求：写一个javabean类描述汽车</p><p>​属性：汽车的品牌，车龄，颜色，发动机的品牌，使用年限。(汽车和发动机属于两个类，又有联系)</p><p>内部类表示的事物是外部类的一部分，内部类单独出现没有任何意义</p><p><strong>访问特点</strong>：</p><p>​内部类可以直接访问外部类的成员，包括私有&#x2F;&#x2F;Outer.this.变量名</p><p>​外部类要访问内部类的成员，必须创建对象</p><p><strong>成员内部类</strong>：</p><p>​如何书写？：写在成员位置(类中方法外)，属于外部类的成员。</p><p>​成员内部类可以被一些修饰符所修饰，比如：private(本类)，默认(本包)，protected(本包其他类，其他包的子类)，public(所有地方)，static(静态的)等。</p><p>​在成员内部类里面，JDK16之前不能定义<strong>静态变量</strong>，JDK16开始才可以定义<strong>静态变量</strong>。</p><p>​如何创建成员内部类的对象？：</p><p>​ <strong>方式一</strong>：在外部类中编写方法，对外提供内部类的对象</p><p>​&#x2F;&#x2F;使用场景：用在private修饰内部类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> o.getInstance();<span class="comment">//获取内部类对象</span></span><br></pre></td></tr></table></figure><p>​ <strong>方式二</strong>：直接创建格式：外部类名.内部类名  对象名 &#x3D; 外部类对象.内部类对象；范例：Outer.Inner oi &#x3D; new Outer().new Inner();   &#x2F;&#x2F;使用场景：不是用private修饰内部类的</p><p><strong>静态内部类</strong>：静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建外部类的对象</p><p>​<strong>创建静态内部类对象的格式</strong>：外部类名.内部类名  <em>对象</em>名 &#x3D;  new  外部类名.内部类名( );</p><p>​<strong>调用非静态方法的格式</strong>：先创建对象，用<em>对象</em>调用</p><p>​<strong>调用静态方法的格式</strong>：外部类名.内部类名.方法名();</p><p>​静态内部类是一种特殊的成员内部类</p><p><strong>局部内部类</strong>：1.将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量，</p><p>​       2.外界是无法直接使用，需要在方法内部创建对象并使用。</p><p>​       3.该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p><p><strong>匿名内部类</strong>(重点)：本质就是隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="keyword">new</span> 类名或接口名()&#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//包含了继承或实现，方法重写，创建对象</span></span><br><span class="line"><span class="comment">//整体就是一个类的子类对象或者接口的实现类对象</span></span><br></pre></td></tr></table></figure><p><img src="/../images/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%86%85%E9%83%A8%E7%B1%BB/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240225202806.png" alt="接口"></p><p>使用场景：当方法的参数是接口或类时，以接口为例，可以传递这个接口的实现类对象，如果实现类只要使用一次，就可以用匿名内部类简化代码。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;内部类&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-接口</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8E%A5%E5%8F%A3/</id>
    <published>2024-02-23T05:53:28.788Z</published>
    <updated>2024-02-23T15:06:25.969Z</updated>
    
    <content type="html"><![CDATA[<p><strong>接口：</strong>就是一种规则，对行为的抽象。</p><p><img src="C:\Users\Administrator\Desktop\MyBlog\source\images\微信截图_20240223135234.png"></p><p><strong>如何定义</strong>：</p><p>​接口用关键字interface来定义，<strong>public interface 接口名{ }</strong></p><p>​<strong>接口不能实例化</strong></p><p>​接口和类之间是实现关系，通过<strong>implements</strong>关键字表示，<strong>public class 类名 implements 接口名{}</strong></p><p>​接口的子类称为实现类</p><p>​<strong>要么重写接口中的所有抽象方法。</strong></p><p>​要么是抽象类。</p><p><strong>注意点1</strong>：接口和类的实现关系，可以单实现，也可以多实现。<strong>pubic class 类名 implements 接口名1 ，接口名2{ }</strong></p><p><strong>注意到2</strong>：实现类还可以在继承一个类的同时实现多个接口。<strong>public class 类名 extends 父类 implements 接口名1，接口名2{}</strong></p><p><strong>如何使用：</strong></p><p>​方法可以是抽象类，默认类，静态类</p><p><strong>成员特点：</strong></p><p>​成员变量：接口中的成员变量只能是常量，默认修饰符：public static final</p><p>​构造方法：没有，因为接口不能创建对象，而且接口当中也不需要给子类去赋值。</p><p>​成员方法：只能是抽象方法，默认修饰符：public abstract</p><p>​  JDK7以前：接口中只能定义抽象方法。</p><p>​  JDK8的新特性：接口中可以定义有方法体的方法(<strong>默认，静态</strong>)。</p><p>​<strong>默认</strong></p><p>​作用：加新规则and代码不报错，解决接口升级问题</p><p>​<strong>注意事项</strong>：默认方法不是抽象方法，所以不强制被重写，但是如果被重写，重写的时候去掉default关键字。</p><p>​   public可以省略，default不能省略。</p><p>​   如果实现了多个接口，<em>多个接口中</em>存在相同名字的默认方法，子类就必须对该方法进行重写。</p><p>​<strong>静态</strong></p><p>​作用：运行在接口中定义静态方法，需要用static修饰</p><p>​接口中静态方法的定义格式：public static 返回值类型 方法名(参数列表){    }</p><p>​<strong>注意事项</strong>：静态方法只能通过接口名调用，不能通过实现类名或者对象名调用。</p><p>​   public可以省略，static不能省略。</p><p>​  JDK9的新特性：接口中可以定义私有方法。</p><p>​需求：抽取出来的<strong>重复代码</strong>无需被外界调用，可以设置为私有方法，此方法只为Inter接口提供服务，不需要外类访问。&#x2F;&#x2F;普通的私有方法，给默认方法服务，，静态的私有方法，给静态方法服务</p><p>​格式1：private 返回值类型 方法名(参数列表){}</p><p>​格式2：private static 返回值类型 方法名(参数列表){}</p><p><strong>接口和类之间的关系：</strong></p><p>​类和类的关系：继承关系，只能单继承，不能多继承，但是可以多层继承</p><p>​类和接口的关系：实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p><p>​接口和接口的关系：继承关系，可以单继承，也可以多继承。</p><p><strong>接口的应用：</strong></p><p>​1.接口代表规则，是行为的抽象。想要让哪一个类拥有一个行为，就让这个类实现对应的接口就可以了。</p><p>​2.当一个方法的参数是接口时，可以传递接口所有实现类的对象，这种方式称为接口多态。</p><p><strong>适配器设计模式</strong>：</p><p>​设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性，程序的重用性。简单来说，设计模式就是各种套路。</p><p>​适配器设计模式：解决接口与接口实现类之间的矛盾问题</p><p>​1.当接口中抽象方法较多，而你执行操作其他一个，这时在实现类，就需要重写全部方法，影响阅读和操作，可以新建一个抽象类来存储所有的重写方法(空实现，即方法体空着)，然后让实现类来继承这个类，这时实现类就可以任意重写某一个方法。</p><p>（为了避免其他类创建适配器类的对象，中间的适配器类用abstract进行修饰）</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;抽象类和抽象方法&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-抽象类和抽象方法</title>
    <link href="https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>https://readmengk90.github.io/2024/02/23/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2024-02-23T02:04:42.634Z</published>
    <updated>2024-02-23T03:25:43.451Z</updated>
    
    <content type="html"><![CDATA[<p>抽象类：抽象方法所在的类叫做抽象类，子类必须强制重写，否则子类代码直接报错</p><p>定义格式：public abstract class 类名{}</p><p>抽象方法：将共性的行为抽取到父类之后，由于每一个子类执行的内容是不一样，所以，<strong>在父类中不能确定具体的方法体</strong>，该方法就可以定义为抽象方法。</p><p>定义格式：public abstract 返回值类型 方法名(参数列表)；alt+回车</p><p>注意事项：1.抽象类不能实例化-不能创建对象</p><p>​   2.抽象类中不一定有抽象方法，但是抽象方法的类一定是抽象类</p><p>​   3.可能有构造方法</p><p>​   4.<strong>抽象类的子类</strong></p><p>​<strong>要么重写抽象类中的所有抽象方法</strong>(推荐使用)</p><p>​要么是抽象类</p><p>意义：强制子类必须按照统一格式书写</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;抽象类和抽象方法&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-包-final-权限修饰符-代码块</title>
    <link href="https://readmengk90.github.io/2024/02/23/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>https://readmengk90.github.io/2024/02/23/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97/</id>
    <published>2024-02-23T00:55:45.618Z</published>
    <updated>2024-02-23T00:55:45.673Z</updated>
    
    <content type="html"><![CDATA[<p><strong>包：</strong></p><p>定义：包就是文件夹，用来管理各种不同功能的Java类，方便后期代码维护</p><p>规则：公司域名反写+包的作用名，需要全部英文小写，见名知意，com.itheima.domain</p><p>使用其他类的规则：</p><p>​1.使用同一个包中的类时，不需要导包</p><p>​2.使用java.lang包中的类时，不需要导包 </p><p>​3.其他情况都需要导包</p><p>​4.如果同时使用两个包中的同类名，需要用全类名 </p><p><strong>final:</strong></p><table><thead><tr><th>final修饰</th><th></th></tr></thead><tbody><tr><td>方法</td><td>表明该方法是最终方法，不能被重写</td></tr><tr><td>类</td><td>表明该类是最终类，不能被继承</td></tr><tr><td>变量</td><td>叫做常量，只能被赋值一次</td></tr></tbody></table><p>常量：在实际开发中，常量一般作为系统的配置信息，方便维护，提高可读性</p><p>常量的命名规则：</p><p>​单个单词：全部大写</p><p>​多个单词：全部大写，单词之间用下划线隔开</p><p>细节：</p><p>final修饰的变量是基本类型：那么变量存储的数据值不能发生改变</p><p>final修饰的变量是引用类型：那么变量存储的地址值不能发生改变，对象内部的可以改变。</p><p><strong>权限修饰符：</strong></p><p>权限修饰符：是用来控制一个成员能够被访问的范围的。</p><p>可以修饰成员变量，方法，构造方法，内部类。</p><p>分类：有四种作用范围从小到大(private&lt;缺省&lt;protected&lt;public)</p><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类</th><th align="center">同一个包中其他类</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">空着不写</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>规则：实际开发中，一般只用private和public</p><p>成员变量私有</p><p>方法公开</p><p>特列：如果方法中的代码是抽取其他方法中共性代码，这个方法一般私有。</p><p><strong>代码块：</strong></p><p>局部代码块：写在方法里面的一对单独的{}，提前结束变量的生命周期。</p><p>构造代码块：写在成员位置的代码块，可以把多个构造方法中重复的代码抽取出来，在创建本类对象的时候会优先于构造方法执行。</p><p><strong>静态代码块</strong>：格式:static{}</p><p>​特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次</p><p>​使用场景：在类加载的时候，做一些数据初始化的时候使用。</p><p>​应用场景：程序刚开始时进行数据的初始化</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;包-final-权限修饰符-代码块&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-多态</title>
    <link href="https://readmengk90.github.io/2024/02/21/java%E7%BB%A7%E6%89%BF-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%A4%9A%E6%80%81/"/>
    <id>https://readmengk90.github.io/2024/02/21/java%E7%BB%A7%E6%89%BF-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E5%A4%9A%E6%80%81/</id>
    <published>2024-02-21T13:09:43.581Z</published>
    <updated>2024-02-22T02:16:30.528Z</updated>
    
    <content type="html"><![CDATA[<p><strong>多态</strong>：多种形态，即，同种类型的对象，表现出得不太形态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><p>应用场景：多种权限的用户注册时。</p><p>表现形式：父类类型  对象名称 &#x3D; 子类对象；</p><p>多态的前提：1.有继承关系；</p><p>​        2.有父类引用指向子类对象（Fu f &#x3D; new Zi();）</p><p>​3.有方法重写；</p><p>多态的好处：使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利。</p><p><strong>多态调用成员的特点：</strong></p><p>​<strong>变量调用</strong>：编译看左边，运行也看左边</p><p>​编译看左边:   javac编译代码的时候，会看左边的父类中有没有这个变量，如果有，编译成功，如果没有编译失败。</p><p>​运行看左边：java运行代码时，实际获取的就是左边父类中成员变量的值。</p><p>​<strong>方法调用</strong>：编译看左边，运行看右边<br>​编译看左边：javac编译代码时侯，会看左边的父类中有没有这个方法，如果有，编译成功，如果没有编译失败</p><p>​运行看右边：Java运行代码的时候，实际上运行的是子类中的方法</p><p>​如何理解？</p><p>​Animal   a  &#x3D;  new Dog();</p><p>​成员变量：在子类对象中，会把父类的成员变量也继承下来。父：name,子：name</p><p>​成员方法：如果子类对方法进行重写，那么在虚方法表中是会把父类的方法进行覆盖的。</p><p><strong>多态的优势和弊端：</strong></p><p>​优势：</p><p>​1. 在多态形式下，右边对象可以 实现解耦合，便于扩展和维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Student</span>();  <span class="comment">//Person p = new Teacher();</span></span><br><span class="line">p.work();<span class="comment">//业务逻辑发生改变时，后续代码无需修改</span></span><br></pre></td></tr></table></figure><p>​2. <strong>定义方法时，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利</strong>。</p><p>​弊端：</p><p>​<strong>不能直接调用子类的特有功能</strong></p><p>​原因:当调用成员方法的时候,编译看左边，运行看右边，那么在编译的时候会先检查左边的父类中有没有这个方法，如果没有直接报错.</p><p>​解决方案:变回子类类型</p><p>​转换时如果转成其他类型，就会报错&#x2F;&#x2F;Cat c &#x3D; (Cat) a;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d.lookhome();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免转换类型与真实对象类型不一致会报错的解决方案</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog) a;</span><br><span class="line">d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat) a;</span><br><span class="line">c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK14新特性–判断和强转的合并.</p><p>先判断a是否为Dog类型，如果是，则强转为Dog类型，转换之后的变量名为d</p><p>如果不是，则不强转，结果直接为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;<span class="comment">//Animal a = new Dog();</span></span><br><span class="line">d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;<span class="comment">//Animal a = new Cat();</span></span><br><span class="line">c.catMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;多态&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-继承</title>
    <link href="https://readmengk90.github.io/2024/02/20/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/"/>
    <id>https://readmengk90.github.io/2024/02/20/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6-%E7%BB%A7%E6%89%BF/</id>
    <published>2024-02-20T01:37:51.641Z</published>
    <updated>2024-02-20T13:50:13.877Z</updated>
    
    <content type="html"><![CDATA[<p>封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为。</p><p><strong>继承</strong>：Java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起继承关系。</p><p>public class Student extends Person(){}</p><p>Student称为子类,Person称为父类</p><p>1.<strong>优点</strong>：</p><p>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性</p><p>子类可以在父类的基础上，增加其他的功能，使子类更强大。</p><p>子类可以得到父类的属性和行为，子类可以使用。</p><p><strong>什么时候用到继承？</strong>：当类与类之间，存在相同(共性)的内容，并满足子类是父类中的一种(学生是人的一种)，就可以考虑使用继承来优化代码。</p><p>2.<strong>方式</strong>：</p><p>1.自己设计</p><p>2.用别人的</p><p>3.<strong>特点</strong>：</p><p>​Java只<strong>支持</strong>单继承：</p><p>​<strong>不支持</strong>多继承：</p><p>​<strong>支持</strong>多层继承：子类A继承父类B,父类B可以继承父类C(直接父类(BA,CB)，间接父类(CA))</p><p>​<strong>每一个类都直接或间接的继承于Object</strong>(祖宗类)</p><p>4.<strong>子类到底能继承父类中的那些内容?:</strong>(继承和调用不一样)</p><table><thead><tr><th align="center">内容</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">构造方法</td><td align="center">非私有(NO)</td><td align="center">private(NO)</td></tr><tr><td align="center">成员变量</td><td align="center">非私有(YES)</td><td align="center">private(YES)   get&#x2F;set方法去使用</td></tr><tr><td align="center">成员方法</td><td align="center">非私有(YES)&#x2F;&#x2F;虚方法表</td><td align="center">private（NO）</td></tr></tbody></table><p>违背了构造方法的规则：构造方法名与类名必须相同。</p><p>只有父类中的<strong>虚方法</strong>(*非private,非static,非final)*才能被子类继承，生成虚方法表传给子类</p><p><strong>5.内存分析工具的使用：</strong></p><p>控制台输入jps:类的地址</p><p>内存分析工具：控制台输入 jhsdb hsdb</p><p><strong>6.继承中的特点</strong></p><p>继承中:成员变量的访问特点</p><p>​<strong>就近原则：谁离我近，我就用谁</strong>，先在局部位置找，然后本类位置找，父类成员位置找，逐级往上。</p><p>​如果重名了怎么访问?:</p><p>​从局部位置开始往上找，name</p><p>​从本类成员位置开始往上找, this.name</p><p>​从父类成员位置开始往上找, super.name</p><p>继承中:成员方法的访问特点</p><p>​直接调用：谁离我近，我就用谁</p><p>​先查看本类中是否有对应方法，有，就会调用子类的，如果没有，就会调用从父类中继承下来的对应方法</p><p>​super调用: 直接访问父类</p><p>​不会查看本类，直接查看父类中是否中是否有对应的方法</p><p>继承中:构造方法的特点</p><p>​ 父类中的构造方法不会 被子类继承。（构造方法名与类名不一致了）</p><p>​子类中所有的构造方法默认先访问父类中的无参构造，在执行自己的</p><p>​<strong>原因：</strong></p><p>​子类在初始化的时候，又可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。</p><p>​子类在初始化之前，一点要调用父类构造方法先完成父类数据空间的初始化</p><p>​<strong>调用父类方法</strong>：</p><p>​子类构造方法的第一行语句默认都是：super(),不写也存在，且必须在第一行</p><p>​如果想调用父类的有参构造，必须手动写super进行调用</p><p><strong><em>方法</em>的重写</strong>：当父类的方法不能满足子类现在的需求时，需要进行方法重写</p><p>​书写格式：在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法。</p><p>​@Override重写注解–给虚拟机和程序员看的</p><p>​1.@Override是放在重写后的方法上，校验子类重写时语法是否正确</p><p>​2.加上注解后如果有红色波浪线，表示语法错误。</p><p>​3.建议重写方法都加@Override注解，代码安全，优雅</p><p>​要求：</p><p>​1.重写方法的名称，形参列表必须与父类中的一致。</p><p>​2.子类重写父类方法时，访问权限<strong>子类</strong>必须大于等于父类(空着不写&lt;protected&lt;public)。</p><p>​3.子类重写父类方法时，返回值类型必须小于等于父类。</p><p>​<strong>4.建立：重写的方法尽量和父类保持一致。</strong></p><p>​<strong>5.只有被添加到虚方法表中的方法才能被重写。</strong></p><p><strong>7.this,super使用总结</strong></p><p>​this:本类,理解为一个变量，表示当前方法调用在的地址值。</p><p>​super:代表父类存储空间</p><table><thead><tr><th align="center">关键字</th><th align="center">访问成员变量</th><th align="center">访问成员方法</th><th align="center">访问构造方法</th></tr></thead><tbody><tr><td align="center">this</td><td align="center">this.成员变量<br>访问本类的成员变量</td><td align="center">this.成员方法(…..)<br/>访问本类成员方法</td><td align="center">this(…..)<br/>访问本类构造方法</td></tr><tr><td align="center">super</td><td align="center">super.成员变量<br/>访问父类成员变量</td><td align="center">super.成员方法(…..)<br/>访问父类的成员方法</td><td align="center">super(…….)<br/>访问父类构造方法</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;继承&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶main()方法的进一步理解</title>
    <link href="https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6main()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
    <id>https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6main()%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3/</id>
    <published>2024-02-19T14:34:13.952Z</published>
    <updated>2024-02-19T14:34:14.036Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public:被JVM(虚拟机)调用，访问权限足够大</span></span><br><span class="line"><span class="comment">static:被JVM调用，不用创建对象，直接类名访问，因为main()方法是静态的，所以测试类中其他方法也需要是静态的</span></span><br><span class="line"><span class="comment">void:被JVM调用，不需要给JVM返回值</span></span><br><span class="line"><span class="comment">main:一个通用的名称，虽然不是关键字，但是被JVM识别</span></span><br><span class="line"><span class="comment">String[] args:以前用于接收键盘录入数据的，现在没用。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;静态变量&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象进阶-static静态变量</title>
    <link href="https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-static/"/>
    <id>https://readmengk90.github.io/2024/02/19/java%E5%9F%BA%E7%A1%80-static/</id>
    <published>2024-02-19T07:50:51.004Z</published>
    <updated>2024-02-19T14:16:30.191Z</updated>
    
    <content type="html"><![CDATA[<p><strong>static</strong>：表示静态，是Java中的一个修饰符，可以修饰成员方法，成员变量。</p><p>学生对象共享同一个老师</p><p>public static String treachName;</p><p>类名调用，对象调用均可</p><table><thead><tr><th>被static修饰的成员变量，叫做静态变量</th><th>被static修饰的成员方法，叫做静态方法</th></tr></thead><tbody><tr><td>特点：被这个类所有对象共享<br>调用方式:<br>               类名调用(推荐)<br>               对象名调用<br>静态变量是随着类的加载而加载的，优先于对象出现的<br><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219162328.png"></td><td>特点：多用在测试类和工具类，javabean类中很少会用。<br>调用方式:<br/>               类名调用(推荐)<br/>               对象名调用<br/><strong>工具类</strong>：帮助我们做一些事情，但是不描述任何事物的类<br>1.类名见名知意<br>2.私有化构造方法<br>3.方法都定义为静态的<br><strong>javabean类</strong>：用来描述一类事物的类。比如student，teacher.<br><strong>测试类</strong>：用来坚持其他类是否书写正确，带有main方法的类，是程序的入口</td></tr></tbody></table><p>那些属性可以被定义为静态—-具有共享性质的</p><p><strong>static的注意事项</strong></p><p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p><p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p><p>3.静态方法中<strong>没有</strong>this关键字</p><p><strong>this:表示当前方法调用者的地址值，这个this是由虚拟机赋值的</strong>，<strong>方法内调用成员变量的时候就可以区分不太的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">(Student <span class="built_in">this</span>)</span>&#123; <span class="comment">//Student this在非静态方法中是隐藏的</span></span><br><span class="line">System.out.println(name+<span class="string">&quot;,&quot;</span>+age+<span class="string">&quot;,&quot;</span>+teachernaem)<span class="comment">//this.name  this.age  this.teachername</span></span><br><span class="line">    <span class="comment">//调用其他方法</span></span><br><span class="line">    show2<span class="comment">//this.show2();</span></span><br><span class="line">&#125;</span><br><span class="line">s1.show1/s2.show2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么非静态方法设计没有this?</p><p>​和某一个对象没有关系，共享思想。</p><p>静态(变量&#x2F;方法)随着类的加载而加载，非静态(变量&#x2F;方法)跟对象有关。</p><p>1.静态方法<strong>只能</strong>访问静态变量和静态方法(和this有关)</p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219220725.png"></p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221017.png"></p><p>2.非静态方法<strong>可以</strong>访问静态变量或静态方法，<strong>也可以</strong>访问非静态的成员变量和非静态的成员方法(<strong>和调用方式有关</strong>)</p><p><img src="/../images/java%E5%9F%BA%E7%A1%80-static/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240219221500.png"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;静态变量&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>登录错误时的次数限制</title>
    <link href="https://readmengk90.github.io/2024/02/19/%E7%99%BB%E5%BD%95%E5%A4%B1%E8%AF%AF%E6%97%B6%E6%AC%A1%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6/"/>
    <id>https://readmengk90.github.io/2024/02/19/%E7%99%BB%E5%BD%95%E5%A4%B1%E8%AF%AF%E6%97%B6%E6%AC%A1%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6/</id>
    <published>2024-02-19T06:28:35.124Z</published>
    <updated>2024-02-19T07:14:45.605Z</updated>
    
    <content type="html"><![CDATA[<p>day12</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(list, username);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;<span class="comment">//集合中没有该用户名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名未注册，请先注册&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">vericode</span> <span class="operator">=</span> getVericode();</span><br><span class="line">        System.out.println(vericode);</span><br><span class="line">        System.out.println(<span class="string">&quot;请录入验证码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">againcode</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span> (vericode.equalsIgnoreCase(againcode)) &#123;<span class="comment">//验证码正确</span></span><br><span class="line">            System.out.println(<span class="string">&quot;验证码录入成功&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功登录&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新录入验证码:&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stuInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(username, password, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">boolean</span> result=checkstuInfo(list,stuInfo);</span><br><span class="line">    <span class="keyword">if</span> (result)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录成功，可以使用你的学生管理系统了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败，用户名或密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前账号&quot;</span>+username+<span class="string">&quot;被锁定&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误，还剩下&quot;</span>+(<span class="number">2</span>-i)+<span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;次数限制&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>生成验证码</title>
    <link href="https://readmengk90.github.io/2024/02/19/%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://readmengk90.github.io/2024/02/19/%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2024-02-19T05:40:15.169Z</published>
    <updated>2024-02-19T06:15:54.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="验证码规则："><a href="#验证码规则：" class="headerlink" title="验证码规则："></a>验证码规则：</h4><p>​长度为5</p><p>​由4位大写或者小写字母和1位数字组成，同一个字母可重复</p><p>​数字可以出现在任意位置</p><p>比如：aQa1K</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getVericode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建一个集合添加所有的大写和小写字母</span></span><br><span class="line">    ArrayList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;<span class="number">26</span> ; i++)&#123;</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i));</span><br><span class="line">            list.add((<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//2.要随机抽取4个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取随机索引</span></span><br><span class="line">            <span class="type">int</span> index=rd.nextInt(list.size());</span><br><span class="line">            <span class="comment">//利用索引获取字符</span></span><br><span class="line">            <span class="type">char</span> c=list.get(index);</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.生成1位随机数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> rd.nextInt(<span class="number">10</span>); <span class="comment">// 生成0到9之间的随机数字</span></span><br><span class="line">    sb.append(number);</span><br><span class="line">    <span class="comment">//4.将字符串变成字符数组，然后再新建一个新的字符串</span></span><br><span class="line">    <span class="type">char</span>[] arr=sb.toString().toCharArray();</span><br><span class="line">    <span class="comment">//拿着最后一个索引，跟随机索引进行交换</span></span><br><span class="line">    <span class="type">int</span> randomIndex=rd.nextInt(arr.length);</span><br><span class="line">        <span class="comment">//最大索引指向的元素，跟随机索引指向的元素交换</span></span><br><span class="line">    <span class="type">char</span> temp=arr[randomIndex];</span><br><span class="line">        arr[randomIndex]=arr[arr.length-<span class="number">1</span>];</span><br><span class="line">    arr[arr.length-<span class="number">1</span>]=temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;验证码(数字+字母)&lt;/center&gt;</summary>
    
    
    
    <category term="经典算法思想" scheme="https://readmengk90.github.io/categories/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
    
    <category term="算法思想" scheme="https://readmengk90.github.io/tags/%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>跳出多重循环</title>
    <link href="https://readmengk90.github.io/2024/02/11/java%E5%9F%BA%E7%A1%80-%E8%B7%B3%E5%87%BA%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF/"/>
    <id>https://readmengk90.github.io/2024/02/11/java%E5%9F%BA%E7%A1%80-%E8%B7%B3%E5%87%BA%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF/</id>
    <published>2024-02-11T12:14:32.134Z</published>
    <updated>2024-02-16T13:55:50.829Z</updated>
    
    <content type="html"><![CDATA[<p>loop:while (true) {<br>Scanner sc &#x3D; new Scanner(System.in);<br>System.out.println(“请输入您的选择:”);<br>String result &#x3D; sc.next();<br>switch (result){<br>    case “5”-&gt; {<br>                    System.out.println(“退出”);<br>                    break loop;<br>                }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">停止虚拟机运行</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">while (true) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入您的选择:&quot;);</span><br><span class="line">String result = sc.next();</span><br><span class="line">switch (result)&#123;</span><br><span class="line">case &quot;5&quot;-&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;退出&quot;);</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;跳出多重循环&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>集合ArrayList</title>
    <link href="https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/"/>
    <id>https://readmengk90.github.io/2024/02/10/java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88ArrayList/</id>
    <published>2024-02-10T00:53:57.243Z</published>
    <updated>2024-02-11T15:16:47.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合ArrayList"><a href="#集合ArrayList" class="headerlink" title="集合ArrayList"></a>集合ArrayList</h1><p>长度可变的容器(自动扩容)</p><p>集合不能<strong>直接</strong>存基本数据类型–》包装类</p><ol><li><p>为什么要有集合?</p><p>ArrayList:</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;泛型&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;可省略&gt;();</span><br><span class="line"><span class="comment">//此时我们创建的是ArrayList的对象，而ArrayList是Java已经写好的一个类，这个类在底层做了一些处理打印对象不是地址值，而是集合中存储数据的内容，在展示的时候会拿[]把所有的数据进行包裹。</span></span><br></pre></td></tr></table></figure><p>成员方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E,e)</td><td>添加元素，返回值表示是否添加成功</td></tr><tr><td>boolean remove(E,e)</td><td>删除指定元素，返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回被删除元素</td></tr><tr><td>E set(int index,E,e)</td><td>修改指定索引下的元素，返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table></li><li><p>泛型：限定集合中存储数据的类型，集合不能<strong>直接存储</strong>基本数据类型，可以存储引用数据类型。</p></li><li><p>基本数据类型对应的包装类</p><table><thead><tr><th align="center">byte</th><th align="center">Byte</th></tr></thead><tbody><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">char</td><td align="center"><strong>Character</strong></td></tr><tr><td align="center">int</td><td align="center"><strong>Integer</strong></td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table></li><li><p>集合返回多个对象</p><p>技巧：如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回(集合&#x2F;数组)</p></li><li></li></ol>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符串相关类的底层原理</title>
    <link href="https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://readmengk90.github.io/2024/02/07/java%E5%9F%BA%E7%A1%80-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2024-02-07T00:34:09.426Z</published>
    <updated>2024-02-07T00:34:32.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串相关类的底层原理："><a href="#字符串相关类的底层原理：" class="headerlink" title="字符串相关类的底层原理："></a>字符串相关类的底层原理：</h1><p><strong>1.字符串存储的内存原理</strong></p><p>​直接赋值会复用字符串常量池</p><p>​new出来不会复用，而是开辟一个新空间</p><p><strong>2.&#x3D;&#x3D;号比较的到底是什么？</strong></p><p>​基本数据类型比较数据值</p><p>​引用数据类型比较地址值</p><p><strong>3.字符串拼接的底层原理</strong></p><p>​<strong>等号右边没有变量参与：</strong></p><p>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串次中的字符串。</p><p>​<strong>等号右边有变量参与：</strong></p><p>JDK8以前：系统底层会自动创建一个StringBuilder对象，然后再调用其append方法完成拼接。拼接后，再调用其toString方法转换为String类型，而toString方法的底层是直接new了一个字符串对象。</p><p>JDK8版本：系统会预估字符串拼接后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</p><p><strong>4.StringBuilder提高效率原理图</strong></p><p>所有要拼接的内容都会往String Builder中放，不会创建很多无用的空间，节约内存。</p><p>​<img src="C:\Users\Administrator\Desktop\微信截图_20240207073607.png"></p><p><strong>5.StringBuilder源码分析</strong></p><p>默认创建一个长度为16的字节数组，添加的内容长度小于16，直接存，添加的内容大于16会扩容(原来的内容*2+2)，如果扩容之后还不够，以实际长度为准。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;字符串相关类的底层原理&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StringJoiner</title>
    <link href="https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/"/>
    <id>https://readmengk90.github.io/2024/02/06/java%E5%9F%BA%E7%A1%80-StringJoiner/</id>
    <published>2024-02-06T13:18:34.058Z</published>
    <updated>2024-02-06T14:41:24.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><p>拼接速度快，代码又简单的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    StringJoiner sj=<span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        sj.add(arr[i]+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法：</strong></p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringJoiner(间隔符)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号。</td></tr><tr><td align="center">public StringJoiner(间隔符合，开始符号，结束符号)</td><td align="center">创建一个StringJoiner对象，指定拼接时的间隔符号，开始符号，结束符号。</td></tr></tbody></table><p><strong>成员方法：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner <strong>add(添加的内容)</strong></td><td>添加数据，并返回对象本身</td></tr><tr><td>public int <strong>length()</strong></td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String <strong>toString()</strong></td><td>返回一个字符串(该字符串就是拼接之后的结果)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;center&gt;StringBuilder的升级StringJoiner&lt;/center&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://readmengk90.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://readmengk90.github.io/tags/java/"/>
    
  </entry>
  
</feed>
